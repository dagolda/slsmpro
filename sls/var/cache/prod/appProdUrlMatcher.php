<?php

use Symfony\Component\Routing\Exception\MethodNotAllowedException;
use Symfony\Component\Routing\Exception\ResourceNotFoundException;
use Symfony\Component\Routing\RequestContext;

/**
 * appProdUrlMatcher.
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class appProdUrlMatcher extends Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher
{
    /**
     * Constructor.
     */
    public function __construct(RequestContext $context)
    {
        $this->context = $context;
    }

    public function match($pathinfo)
    {
        $allow = array();
        $pathinfo = rawurldecode($pathinfo);
        $context = $this->context;
        $request = $this->request;

        if (0 === strpos($pathinfo, '/quiz')) {
            // bo_quiz_homepage
            if (rtrim($pathinfo, '/') === '/quiz') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_quiz_homepage');
                }

                return array (  '_controller' => 'Bo\\QuizBundle\\Controller\\DefaultController::indexAction',  '_route' => 'bo_quiz_homepage',);
            }

            // bo_quiz_evaluation
            if (preg_match('#^/quiz/(?P<id>[^/]++)/evaluation/?$#s', $pathinfo, $matches)) {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_quiz_evaluation');
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'bo_quiz_evaluation')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\DefaultController::evaluationAction',));
            }

            // bo_quiz_quiz
            if (preg_match('#^/quiz/(?P<id>[^/]++)/(?P<idevalquiz>[^/]++)/quiz/?$#s', $pathinfo, $matches)) {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_quiz_quiz');
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'bo_quiz_quiz')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\DefaultController::quizAction',));
            }

            // bo_quiz_evalquiz
            if (preg_match('#^/quiz/(?P<id>[^/]++)/evalquiz/?$#s', $pathinfo, $matches)) {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_quiz_evalquiz');
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'bo_quiz_evalquiz')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\DefaultController::evalquizAction',));
            }

            // bo_quiz_resultquiz
            if (preg_match('#^/quiz/(?P<id>[^/]++)/(?P<iduser>[^/]++)/result/?$#s', $pathinfo, $matches)) {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_quiz_resultquiz');
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'bo_quiz_resultquiz')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\DefaultController::resultquizAction',));
            }

            if (0 === strpos($pathinfo, '/quiz/log')) {
                // bo_quiz_login
                if (rtrim($pathinfo, '/') === '/quiz/login') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'bo_quiz_login');
                    }

                    return array (  '_controller' => 'Bo\\QuizBundle\\Controller\\DefaultController::loginAction',  '_route' => 'bo_quiz_login',);
                }

                // bo_quiz_logout
                if (rtrim($pathinfo, '/') === '/quiz/logout') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'bo_quiz_logout');
                    }

                    return array (  '_controller' => 'Bo\\QuizBundle\\Controller\\DefaultController::logoutAction',  '_route' => 'bo_quiz_logout',);
                }

            }

            // bo_quiz_check
            if (rtrim($pathinfo, '/') === '/quiz/check') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_quiz_check');
                }

                return array (  '_controller' => 'Bo\\QuizBundle\\Controller\\DefaultController::checkAction',  '_route' => 'bo_quiz_check',);
            }

            // bo_quiz_error
            if (0 === strpos($pathinfo, '/quiz/error') && preg_match('#^/quiz/error/(?P<code>[^/]++)/?$#s', $pathinfo, $matches)) {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_quiz_error');
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'bo_quiz_error')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\DefaultController::errorAction',));
            }

            // bo_quiz_reckon
            if (preg_match('#^/quiz/(?P<id>[^/]++)/(?P<idevalquiz>[^/]++)/reckon$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                    goto not_bo_quiz_reckon;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'bo_quiz_reckon')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\DefaultController::reckonAction',));
            }
            not_bo_quiz_reckon:

        }

        if (0 === strpos($pathinfo, '/coordinator')) {
            // bo_coordinator_homepage
            if (rtrim($pathinfo, '/') === '/coordinator') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_coordinator_homepage');
                }

                return array (  '_controller' => 'Bo\\CoordinatorBundle\\Controller\\DefaultController::indexAction',  '_route' => 'bo_coordinator_homepage',);
            }

            // bo_coordinator_teamcontact
            if (rtrim($pathinfo, '/') === '/coordinator/team/admin') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_coordinator_teamcontact');
                }

                return array (  '_controller' => 'Bo\\CoordinatorBundle\\Controller\\DefaultController::teamcontactAction',  '_route' => 'bo_coordinator_teamcontact',);
            }

            // bo_coordinator_language
            if (preg_match('#^/coordinator/(?P<_locale>en|fr)/?$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                    goto not_bo_coordinator_language;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_coordinator_language');
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'bo_coordinator_language')), array (  '_controller' => 'Bo\\CoordinatorBundle\\Controller\\DefaultController::languageAction',));
            }
            not_bo_coordinator_language:

            if (0 === strpos($pathinfo, '/coordinator/supervision')) {
                // coordinator_supervision_index
                if (preg_match('#^/coordinator/supervision/(?P<status>[^/]++)/index/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_coordinator_supervision_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'coordinator_supervision_index');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'coordinator_supervision_index')), array (  '_controller' => 'Bo\\CoordinatorBundle\\Controller\\SupervisionController::indexAction',));
                }
                not_coordinator_supervision_index:

                // coordinator_supervision_contracts
                if (preg_match('#^/coordinator/supervision/(?P<status>[^/]++)/contracts/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_coordinator_supervision_contracts;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'coordinator_supervision_contracts');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'coordinator_supervision_contracts')), array (  '_controller' => 'Bo\\CoordinatorBundle\\Controller\\SupervisionController::contractsAction',));
                }
                not_coordinator_supervision_contracts:

                // coordinator_supervision_students
                if (rtrim($pathinfo, '/') === '/coordinator/supervision/students') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_coordinator_supervision_students;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'coordinator_supervision_students');
                    }

                    return array (  '_controller' => 'Bo\\CoordinatorBundle\\Controller\\SupervisionController::studentsAction',  '_route' => 'coordinator_supervision_students',);
                }
                not_coordinator_supervision_students:

                // coordinator_supervision_students_show
                if (preg_match('#^/coordinator/supervision/(?P<id>[^/]++)/students/show/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_coordinator_supervision_students_show;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'coordinator_supervision_students_show');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'coordinator_supervision_students_show')), array (  '_controller' => 'Bo\\CoordinatorBundle\\Controller\\SupervisionController::showstudentsAction',));
                }
                not_coordinator_supervision_students_show:

                // coordinator_supervision_contract_show
                if (preg_match('#^/coordinator/supervision/(?P<id>[^/]++)/contract/show/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_coordinator_supervision_contract_show;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'coordinator_supervision_contract_show');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'coordinator_supervision_contract_show')), array (  '_controller' => 'Bo\\CoordinatorBundle\\Controller\\SupervisionController::showcontractAction',));
                }
                not_coordinator_supervision_contract_show:

                // coordinator_supervision_contract_xls
                if (rtrim($pathinfo, '/') === '/coordinator/supervision/contract/xls') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_coordinator_supervision_contract_xls;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'coordinator_supervision_contract_xls');
                    }

                    return array (  '_controller' => 'Bo\\CoordinatorBundle\\Controller\\SupervisionController::xlsAction',  '_route' => 'coordinator_supervision_contract_xls',);
                }
                not_coordinator_supervision_contract_xls:

                if (0 === strpos($pathinfo, '/coordinator/supervision/page')) {
                    // coordinator_supervision_page
                    if (preg_match('#^/coordinator/supervision/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'coordinator_supervision_page')), array (  '_controller' => 'Bo\\CoordinatorBundle\\Controller\\SupervisionController::pageAction',));
                    }

                    // coordinator_supervision_pagesearch
                    if (rtrim($pathinfo, '/') === '/coordinator/supervision/pagesearch') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_coordinator_supervision_pagesearch;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'coordinator_supervision_pagesearch');
                        }

                        return array (  '_controller' => 'Bo\\CoordinatorBundle\\Controller\\SupervisionController::pagesearchAction',  '_route' => 'coordinator_supervision_pagesearch',);
                    }
                    not_coordinator_supervision_pagesearch:

                }

                // coordinator_supervision_group
                if (preg_match('#^/coordinator/supervision/(?P<id>[^/]++)/group$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_coordinator_supervision_group;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'coordinator_supervision_group')), array (  '_controller' => 'Bo\\CoordinatorBundle\\Controller\\SupervisionController::groupAction',));
                }
                not_coordinator_supervision_group:

                // coordinator_supervision_teachers
                if ($pathinfo === '/coordinator/supervision/teachers') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_coordinator_supervision_teachers;
                    }

                    return array (  '_controller' => 'Bo\\CoordinatorBundle\\Controller\\SupervisionController::teachersAction',  '_route' => 'coordinator_supervision_teachers',);
                }
                not_coordinator_supervision_teachers:

                // coordinator_supervision_coordinators
                if (preg_match('#^/coordinator/supervision/(?P<id>[^/]++)/coordinators$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_coordinator_supervision_coordinators;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'coordinator_supervision_coordinators')), array (  '_controller' => 'Bo\\CoordinatorBundle\\Controller\\SupervisionController::coordinatorsAction',));
                }
                not_coordinator_supervision_coordinators:

            }

        }

        if (0 === strpos($pathinfo, '/advisor')) {
            // bo_advisors_advisorspage
            if (rtrim($pathinfo, '/') === '/advisor') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_advisors_advisorspage');
                }

                return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\DefaultController::indexAction',  '_route' => 'bo_advisors_advisorspage',);
            }

            // bo_advisors_mycontracts
            if (rtrim($pathinfo, '/') === '/advisor/mycontracts') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_advisors_mycontracts');
                }

                return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\DefaultController::mycontractsAction',  '_route' => 'bo_advisors_mycontracts',);
            }

            if (0 === strpos($pathinfo, '/advisor/timesheet')) {
                // dash_timesheet_index
                if (rtrim($pathinfo, '/') === '/advisor/timesheet') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_timesheet_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_timesheet_index');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TimesheetController::indexAction',  '_route' => 'dash_timesheet_index',);
                }
                not_dash_timesheet_index:

                // dash_timesheet_show
                if (preg_match('#^/advisor/timesheet/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_timesheet_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_timesheet_show')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TimesheetController::showAction',));
                }
                not_dash_timesheet_show:

                // dash_timesheet_newbysearch
                if (preg_match('#^/advisor/timesheet/(?P<idcontract>[^/]++)/newbysearch$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_timesheet_newbysearch;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_timesheet_newbysearch')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TimesheetController::newbysearchAction',));
                }
                not_dash_timesheet_newbysearch:

                // dash_timesheet_new
                if ($pathinfo === '/advisor/timesheet/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_timesheet_new;
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TimesheetController::newAction',  '_route' => 'dash_timesheet_new',);
                }
                not_dash_timesheet_new:

                // dash_timesheet_other
                if ($pathinfo === '/advisor/timesheet/other') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_timesheet_other;
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TimesheetController::otherAction',  '_route' => 'dash_timesheet_other',);
                }
                not_dash_timesheet_other:

                // dash_timesheet_add
                if (0 === strpos($pathinfo, '/advisor/timesheet/add') && preg_match('#^/advisor/timesheet/add/(?P<idcontract>[^/]++)/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_timesheet_add;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_timesheet_add');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_timesheet_add')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TimesheetController::addtsAction',));
                }
                not_dash_timesheet_add:

                // dash_timesheet_group
                if (preg_match('#^/advisor/timesheet/(?P<idgroup>[^/]++)/group/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_timesheet_group;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_timesheet_group');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_timesheet_group')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TimesheetController::addtsgroupAction',));
                }
                not_dash_timesheet_group:

                // dash_timesheet_create
                if ($pathinfo === '/advisor/timesheet/create') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_timesheet_create;
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TimesheetController::createAction',  '_route' => 'dash_timesheet_create',);
                }
                not_dash_timesheet_create:

                // dash_timesheet_addmany
                if (rtrim($pathinfo, '/') === '/advisor/timesheet/new/many') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_timesheet_addmany;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_timesheet_addmany');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TimesheetController::addmanyAction',  '_route' => 'dash_timesheet_addmany',);
                }
                not_dash_timesheet_addmany:

                // dash_timesheet_edit
                if (preg_match('#^/advisor/timesheet/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_timesheet_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_timesheet_edit')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TimesheetController::editAction',));
                }
                not_dash_timesheet_edit:

                // dash_timesheet_delete
                if (preg_match('#^/advisor/timesheet/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_dash_timesheet_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_timesheet_delete')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TimesheetController::deleteAction',));
                }
                not_dash_timesheet_delete:

                // dash_timesheet_message
                if (rtrim($pathinfo, '/') === '/advisor/timesheet/message') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_timesheet_message;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_timesheet_message');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TimesheetController::messageAction',  '_route' => 'dash_timesheet_message',);
                }
                not_dash_timesheet_message:

                // dash_timesheet_contractsearch
                if ($pathinfo === '/advisor/timesheet/contractsearch/') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_dash_timesheet_contractsearch;
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TimesheetController::contractsearchAction',  '_route' => 'dash_timesheet_contractsearch',);
                }
                not_dash_timesheet_contractsearch:

                // dash_timesheet_search
                if ($pathinfo === '/advisor/timesheet/search/') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_dash_timesheet_search;
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TimesheetController::searchAction',  '_route' => 'dash_timesheet_search',);
                }
                not_dash_timesheet_search:

                // dash_timesheet_checking
                if (rtrim($pathinfo, '/') === '/advisor/timesheet/checking') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_timesheet_checking;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_timesheet_checking');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TimesheetController::checkingAction',  '_route' => 'dash_timesheet_checking',);
                }
                not_dash_timesheet_checking:

                // dash_timesheet_extrasearch
                if ($pathinfo === '/advisor/timesheet/extrasearch/') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_dash_timesheet_extrasearch;
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TimesheetController::extrasearchAction',  '_route' => 'dash_timesheet_extrasearch',);
                }
                not_dash_timesheet_extrasearch:

                // dash_timesheet_datesearch
                if ($pathinfo === '/advisor/timesheet/datesearch/') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_dash_timesheet_datesearch;
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TimesheetController::datesearchAction',  '_route' => 'dash_timesheet_datesearch',);
                }
                not_dash_timesheet_datesearch:

                // dash_timesheet_reloaddata
                if (rtrim($pathinfo, '/') === '/advisor/timesheet/reloaddata') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_timesheet_reloaddata;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_timesheet_reloaddata');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TimesheetController::reloaddataAction',  '_route' => 'dash_timesheet_reloaddata',);
                }
                not_dash_timesheet_reloaddata:

            }

            if (0 === strpos($pathinfo, '/advisor/absences')) {
                // dash_absences_index
                if (rtrim($pathinfo, '/') === '/advisor/absences') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_absences_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_absences_index');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\AbsencesController::indexAction',  '_route' => 'dash_absences_index',);
                }
                not_dash_absences_index:

                // dash_absences_show
                if (preg_match('#^/advisor/absences/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_absences_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_absences_show')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\AbsencesController::showAction',));
                }
                not_dash_absences_show:

                // dash_absences_new
                if ($pathinfo === '/advisor/absences/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_absences_new;
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\AbsencesController::newAction',  '_route' => 'dash_absences_new',);
                }
                not_dash_absences_new:

                // dash_absences_edit
                if (preg_match('#^/advisor/absences/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_absences_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_absences_edit')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\AbsencesController::editAction',));
                }
                not_dash_absences_edit:

                // dash_absences_delete
                if (preg_match('#^/advisor/absences/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_dash_absences_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_absences_delete')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\AbsencesController::deleteAction',));
                }
                not_dash_absences_delete:

            }

            if (0 === strpos($pathinfo, '/advisor/substitution')) {
                // dash_substitution_index
                if (rtrim($pathinfo, '/') === '/advisor/substitution/index') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_substitution_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_substitution_index');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\SubstitutionController::indexAction',  '_route' => 'dash_substitution_index',);
                }
                not_dash_substitution_index:

                // dash_substitution_list
                if (rtrim($pathinfo, '/') === '/advisor/substitution/liste') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_substitution_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_substitution_list');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\SubstitutionController::listAction',  '_route' => 'dash_substitution_list',);
                }
                not_dash_substitution_list:

                // dash_substitution_page
                if (preg_match('#^/advisor/substitution/(?P<option>[^/]++)/page$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_substitution_page;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_substitution_page')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\SubstitutionController::pageAction',));
                }
                not_dash_substitution_page:

                // dash_substitution_show
                if (preg_match('#^/advisor/substitution/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_substitution_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_substitution_show')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\SubstitutionController::showAction',));
                }
                not_dash_substitution_show:

                // dash_substitution_search
                if (rtrim($pathinfo, '/') === '/advisor/substitution/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_substitution_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_substitution_search');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\SubstitutionController::searchAction',  '_route' => 'dash_substitution_search',);
                }
                not_dash_substitution_search:

                // dash_substitution_pagesearch
                if (rtrim($pathinfo, '/') === '/advisor/substitution/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_substitution_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_substitution_pagesearch');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\SubstitutionController::pagesearchAction',  '_route' => 'dash_substitution_pagesearch',);
                }
                not_dash_substitution_pagesearch:

                // dash_substitution_newts
                if (preg_match('#^/advisor/substitution/(?P<id>[^/]++)/newts/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_substitution_newts;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_substitution_newts');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_substitution_newts')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\SubstitutionController::newtsAction',));
                }
                not_dash_substitution_newts:

            }

            if (0 === strpos($pathinfo, '/advisor/employee')) {
                // dash_employee_index
                if (rtrim($pathinfo, '/') === '/advisor/employee') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_employee_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_employee_index');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EmployeeController::indexAction',  '_route' => 'dash_employee_index',);
                }
                not_dash_employee_index:

                // dash_employee_list
                if (rtrim($pathinfo, '/') === '/advisor/employee/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_employee_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_employee_list');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EmployeeController::listAction',  '_route' => 'dash_employee_list',);
                }
                not_dash_employee_list:

                // dash_employee_page
                if (0 === strpos($pathinfo, '/advisor/employee/page') && preg_match('#^/advisor/employee/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_employee_page')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EmployeeController::pageAction',));
                }

                // dash_employee_show
                if (preg_match('#^/advisor/employee/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_employee_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_employee_show')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EmployeeController::showAction',));
                }
                not_dash_employee_show:

                // dash_employee_new
                if (preg_match('#^/advisor/employee/(?P<id>[^/]++)/timesheet/new$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_employee_new;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_employee_new')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EmployeeController::newAction',));
                }
                not_dash_employee_new:

                // dash_employee_search
                if (rtrim($pathinfo, '/') === '/advisor/employee/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_employee_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_employee_search');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EmployeeController::searchAction',  '_route' => 'dash_employee_search',);
                }
                not_dash_employee_search:

                // dash_employee_pagesearch
                if (rtrim($pathinfo, '/') === '/advisor/employee/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_employee_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_employee_pagesearch');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EmployeeController::pagesearchAction',  '_route' => 'dash_employee_pagesearch',);
                }
                not_dash_employee_pagesearch:

                // dash_employee_allvalidate
                if (preg_match('#^/advisor/employee/(?P<id>[^/]++)/allvalidate$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_employee_allvalidate;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_employee_allvalidate')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EmployeeController::allvalidateAction',));
                }
                not_dash_employee_allvalidate:

                // dash_employee_ajaxvalidate
                if (rtrim($pathinfo, '/') === '/advisor/employee/ajaxvalidate') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_employee_ajaxvalidate;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_employee_ajaxvalidate');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EmployeeController::ajaxvalidateAction',  '_route' => 'dash_employee_ajaxvalidate',);
                }
                not_dash_employee_ajaxvalidate:

            }

            if (0 === strpos($pathinfo, '/advisor/validation')) {
                // dash_validation_index
                if (rtrim($pathinfo, '/') === '/advisor/validation') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_validation_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_validation_index');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\ValidationController::indexAction',  '_route' => 'dash_validation_index',);
                }
                not_dash_validation_index:

                // dash_validation_list
                if (rtrim($pathinfo, '/') === '/advisor/validation/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_validation_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_validation_list');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\ValidationController::listAction',  '_route' => 'dash_validation_list',);
                }
                not_dash_validation_list:

                // dash_validation_page
                if (0 === strpos($pathinfo, '/advisor/validation/page') && preg_match('#^/advisor/validation/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_validation_page')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\ValidationController::pageAction',));
                }

                // dash_validation_show
                if (preg_match('#^/advisor/validation/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_validation_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_validation_show')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\ValidationController::showAction',));
                }
                not_dash_validation_show:

                // dash_validation_timesheet_show
                if (preg_match('#^/advisor/validation/(?P<id>[^/]++)/timesheet/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_validation_timesheet_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_validation_timesheet_show')), array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ValidationController::tsshowAction',));
                }
                not_dash_validation_timesheet_show:

                // dash_validation_search
                if (rtrim($pathinfo, '/') === '/advisor/validation/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_validation_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_validation_search');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\ValidationController::searchAction',  '_route' => 'dash_validation_search',);
                }
                not_dash_validation_search:

                // dash_validation_pagesearch
                if (rtrim($pathinfo, '/') === '/advisor/validation/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_validation_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_validation_pagesearch');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\ValidationController::pagesearchAction',  '_route' => 'dash_validation_pagesearch',);
                }
                not_dash_validation_pagesearch:

                // dash_validation_allvalidate
                if (preg_match('#^/advisor/validation/(?P<id>[^/]++)/allvalidate$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_validation_allvalidate;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_validation_allvalidate')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\ValidationController::allvalidateAction',));
                }
                not_dash_validation_allvalidate:

                // dash_validation_validate
                if (preg_match('#^/advisor/validation/(?P<id>[^/]++)/timesheet/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_validation_validate;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_validation_validate');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_validation_validate')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\ValidationController::validateAction',));
                }
                not_dash_validation_validate:

                // dash_validation_reject
                if (preg_match('#^/advisor/validation/(?P<id>[^/]++)/reject$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_validation_reject;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_validation_reject')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\ValidationController::rejectAction',));
                }
                not_dash_validation_reject:

            }

            if (0 === strpos($pathinfo, '/advisor/supervision')) {
                // dash_supervision_index
                if (preg_match('#^/advisor/supervision/(?P<status>[^/]++)/index/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_supervision_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_supervision_index');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_supervision_index')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\SupervisionController::indexAction',));
                }
                not_dash_supervision_index:

                // dash_supervision_list
                if (preg_match('#^/advisor/supervision/(?P<status>[^/]++)/list/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_supervision_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_supervision_list');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_supervision_list')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\SupervisionController::contractsAction',));
                }
                not_dash_supervision_list:

                // dash_supervision_page
                if (preg_match('#^/advisor/supervision/(?P<option>[^/]++)/page/?$#s', $pathinfo, $matches)) {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_supervision_page');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_supervision_page')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\SupervisionController::pageAction',));
                }

                // dash_supervision_contract_show
                if (preg_match('#^/advisor/supervision/(?P<id>[^/]++)/contract/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_supervision_contract_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_supervision_contract_show')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\SupervisionController::showcontractAction',));
                }
                not_dash_supervision_contract_show:

                // dash_supervision_pagesearch
                if (rtrim($pathinfo, '/') === '/advisor/supervision/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_supervision_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_supervision_pagesearch');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\SupervisionController::pagesearchAction',  '_route' => 'dash_supervision_pagesearch',);
                }
                not_dash_supervision_pagesearch:

                // dash_supervision_group
                if (preg_match('#^/advisor/supervision/(?P<id>[^/]++)/group$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_supervision_group;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_supervision_group')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\SupervisionController::groupAction',));
                }
                not_dash_supervision_group:

                // dash_supervision_teachers
                if ($pathinfo === '/advisor/supervision/teachers') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_supervision_teachers;
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\SupervisionController::teachersAction',  '_route' => 'dash_supervision_teachers',);
                }
                not_dash_supervision_teachers:

                // dash_supervision_students
                if (preg_match('#^/advisor/supervision/(?P<id>[^/]++)/students$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_supervision_students;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_supervision_students')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\SupervisionController::studentsAction',));
                }
                not_dash_supervision_students:

            }

            if (0 === strpos($pathinfo, '/advisor/enquiry')) {
                // dash_enquiry_index
                if (rtrim($pathinfo, '/') === '/advisor/enquiry') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_enquiry_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_enquiry_index');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EnquiryController::indexAction',  '_route' => 'dash_enquiry_index',);
                }
                not_dash_enquiry_index:

                // dash_enquiry_list
                if ($pathinfo === '/advisor/enquiry/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_enquiry_list;
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EnquiryController::listAction',  '_route' => 'dash_enquiry_list',);
                }
                not_dash_enquiry_list:

                // dash_enquiry_back
                if (rtrim($pathinfo, '/') === '/advisor/enquiry/back') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_enquiry_back;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_enquiry_back');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EnquiryController::backAction',  '_route' => 'dash_enquiry_back',);
                }
                not_dash_enquiry_back:

                // dash_enquiry_page
                if (0 === strpos($pathinfo, '/advisor/enquiry/page') && preg_match('#^/advisor/enquiry/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_enquiry_page')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EnquiryController::pageAction',));
                }

                // dash_enquiry_show
                if (preg_match('#^/advisor/enquiry/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_enquiry_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_enquiry_show')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EnquiryController::showAction',));
                }
                not_dash_enquiry_show:

                // dash_enquiry_order
                if (preg_match('#^/advisor/enquiry/(?P<id>[^/]++)/order$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_enquiry_order;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_enquiry_order')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EnquiryController::orderAction',));
                }
                not_dash_enquiry_order:

                // dash_enquiry_new
                if ($pathinfo === '/advisor/enquiry/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_enquiry_new;
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EnquiryController::newAction',  '_route' => 'dash_enquiry_new',);
                }
                not_dash_enquiry_new:

                // dash_enquiry_resolved
                if (rtrim($pathinfo, '/') === '/advisor/enquiry/resolved') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_enquiry_resolved;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_enquiry_resolved');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EnquiryController::resolvedAction',  '_route' => 'dash_enquiry_resolved',);
                }
                not_dash_enquiry_resolved:

                // dash_enquiry_notresolved
                if (rtrim($pathinfo, '/') === '/advisor/enquiry/notresolved') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_enquiry_notresolved;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_enquiry_notresolved');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EnquiryController::notresolvedAction',  '_route' => 'dash_enquiry_notresolved',);
                }
                not_dash_enquiry_notresolved:

                // dash_enquiry_edit
                if (preg_match('#^/advisor/enquiry/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_enquiry_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_enquiry_edit')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EnquiryController::editAction',));
                }
                not_dash_enquiry_edit:

                // dash_enquiry_delete
                if (preg_match('#^/advisor/enquiry/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_dash_enquiry_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_enquiry_delete')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EnquiryController::deleteAction',));
                }
                not_dash_enquiry_delete:

                // dash_enquiry_search
                if (rtrim($pathinfo, '/') === '/advisor/enquiry/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_enquiry_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_enquiry_search');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EnquiryController::searchAction',  '_route' => 'dash_enquiry_search',);
                }
                not_dash_enquiry_search:

                // dash_enquiry_pagesearch
                if (rtrim($pathinfo, '/') === '/advisor/enquiry/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_enquiry_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_enquiry_pagesearch');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EnquiryController::pagesearchAction',  '_route' => 'dash_enquiry_pagesearch',);
                }
                not_dash_enquiry_pagesearch:

                // dash_enquiry_extrasearch
                if (rtrim($pathinfo, '/') === '/advisor/enquiry/extrasearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_enquiry_extrasearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_enquiry_extrasearch');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\EnquiryController::extrasearchAction',  '_route' => 'dash_enquiry_extrasearch',);
                }
                not_dash_enquiry_extrasearch:

            }

            if (0 === strpos($pathinfo, '/advisor/orderform')) {
                // dash_orderform_index
                if (rtrim($pathinfo, '/') === '/advisor/orderform') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_orderform_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_orderform_index');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::indexAction',  '_route' => 'dash_orderform_index',);
                }
                not_dash_orderform_index:

                // dash_orderform_list
                if ($pathinfo === '/advisor/orderform/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_orderform_list;
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::listAction',  '_route' => 'dash_orderform_list',);
                }
                not_dash_orderform_list:

                // dash_orderform_back
                if ($pathinfo === '/advisor/orderform/back') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_orderform_back;
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::backAction',  '_route' => 'dash_orderform_back',);
                }
                not_dash_orderform_back:

                // dash_orderform_headsup
                if (rtrim($pathinfo, '/') === '/advisor/orderform/headsup') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_orderform_headsup;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_orderform_headsup');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::headsupAction',  '_route' => 'dash_orderform_headsup',);
                }
                not_dash_orderform_headsup:

                // dash_orderform_contract
                if (preg_match('#^/advisor/orderform/(?P<id>[^/]++)/generate/contract/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_orderform_contract;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_orderform_contract');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_orderform_contract')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::contractAction',));
                }
                not_dash_orderform_contract:

                // dash_orderform_page
                if (0 === strpos($pathinfo, '/advisor/orderform/page') && preg_match('#^/advisor/orderform/page/(?P<option>[^/]++)/?$#s', $pathinfo, $matches)) {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_orderform_page');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_orderform_page')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::pageAction',));
                }

                // dash_orderform_show
                if (preg_match('#^/advisor/orderform/(?P<id>[^/]++)/show/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_orderform_show;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_orderform_show');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_orderform_show')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::showAction',));
                }
                not_dash_orderform_show:

                // dash_orderform_showheadsup
                if (preg_match('#^/advisor/orderform/(?P<id>[^/]++)/show/headsup/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_orderform_showheadsup;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_orderform_showheadsup');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_orderform_showheadsup')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::showheadsupAction',));
                }
                not_dash_orderform_showheadsup:

                // dash_orderform_editenquiry
                if (preg_match('#^/advisor/orderform/(?P<id>[^/]++)/edit/enquiry/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_orderform_editenquiry;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_orderform_editenquiry');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_orderform_editenquiry')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::editenquiryAction',));
                }
                not_dash_orderform_editenquiry:

                // dash_orderform_error
                if (preg_match('#^/advisor/orderform/(?P<id>[^/]++)/(?P<opt>[^/]++)/items/missing/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_orderform_error;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_orderform_error');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_orderform_error')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::errorAction',));
                }
                not_dash_orderform_error:

                // dash_orderform_new
                if (preg_match('#^/advisor/orderform/(?P<id>[^/]++)/new/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_orderform_new;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_orderform_new');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_orderform_new')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::newAction',));
                }
                not_dash_orderform_new:

                // dash_orderform_pdf
                if (preg_match('#^/advisor/orderform/(?P<id>[^/]++)/pdf/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_orderform_pdf;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_orderform_pdf');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_orderform_pdf')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::pdfAction',));
                }
                not_dash_orderform_pdf:

                // dash_orderform_remove
                if (preg_match('#^/advisor/orderform/(?P<id>[^/]++)/remove/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_orderform_remove;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_orderform_remove');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_orderform_remove')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::removeAction',));
                }
                not_dash_orderform_remove:

                // dash_orderform_send
                if (preg_match('#^/advisor/orderform/(?P<id>[^/]++)/send/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_orderform_send;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_orderform_send');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_orderform_send')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::sendAction',));
                }
                not_dash_orderform_send:

                // dash_orderform_resolved
                if (rtrim($pathinfo, '/') === '/advisor/orderform/resolved') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_orderform_resolved;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_orderform_resolved');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::resolvedAction',  '_route' => 'dash_orderform_resolved',);
                }
                not_dash_orderform_resolved:

                // dash_orderform_notresolved
                if (rtrim($pathinfo, '/') === '/advisor/orderform/notresolved') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_orderform_notresolved;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_orderform_notresolved');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::notresolvedAction',  '_route' => 'dash_orderform_notresolved',);
                }
                not_dash_orderform_notresolved:

                // dash_orderform_edit
                if (preg_match('#^/advisor/orderform/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_orderform_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_orderform_edit')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::editAction',));
                }
                not_dash_orderform_edit:

                // dash_orderform_sendbordereau
                if (preg_match('#^/advisor/orderform/(?P<id>[^/]++)/send/bordereau/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_orderform_sendbordereau;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_orderform_sendbordereau');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_orderform_sendbordereau')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::sendbordereauAction',));
                }
                not_dash_orderform_sendbordereau:

                // dash_orderform_delete
                if (preg_match('#^/advisor/orderform/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_dash_orderform_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_orderform_delete')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::deleteAction',));
                }
                not_dash_orderform_delete:

                // dash_orderform_search
                if (rtrim($pathinfo, '/') === '/advisor/orderform/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_orderform_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_orderform_search');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::searchAction',  '_route' => 'dash_orderform_search',);
                }
                not_dash_orderform_search:

                // dash_orderform_pagesearch
                if (rtrim($pathinfo, '/') === '/advisor/orderform/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_orderform_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_orderform_pagesearch');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::pagesearchAction',  '_route' => 'dash_orderform_pagesearch',);
                }
                not_dash_orderform_pagesearch:

                // dash_orderform_extrasearch
                if (rtrim($pathinfo, '/') === '/advisor/orderform/extrasearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_orderform_extrasearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_orderform_extrasearch');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\OrderformController::extrasearchAction',  '_route' => 'dash_orderform_extrasearch',);
                }
                not_dash_orderform_extrasearch:

            }

            if (0 === strpos($pathinfo, '/advisor/modelts')) {
                // dash_model_new
                if (rtrim($pathinfo, '/') === '/advisor/modelts/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_model_new;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_model_new');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\ModelTsController::newAction',  '_route' => 'dash_model_new',);
                }
                not_dash_model_new:

                // dash_model_show
                if (preg_match('#^/advisor/modelts/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_model_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_model_show')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\ModelTsController::showAction',));
                }
                not_dash_model_show:

                // dash_model_edit
                if (preg_match('#^/advisor/modelts/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_model_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_model_edit')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\ModelTsController::editAction',));
                }
                not_dash_model_edit:

                // dash_model_index
                if (rtrim($pathinfo, '/') === '/advisor/modelts/index') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_model_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_model_index');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\ModelTsController::indexAction',  '_route' => 'dash_model_index',);
                }
                not_dash_model_index:

                // dash_model_addts
                if (preg_match('#^/advisor/modelts/(?P<id>[^/]++)/addts/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_model_addts;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_model_addts');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_model_addts')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\ModelTsController::addtsAction',));
                }
                not_dash_model_addts:

                // dash_model_delete
                if (preg_match('#^/advisor/modelts/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_dash_model_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_model_delete')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\ModelTsController::deleteAction',));
                }
                not_dash_model_delete:

            }

            if (0 === strpos($pathinfo, '/advisor/tickets')) {
                // dash_tickets_index
                if (rtrim($pathinfo, '/') === '/advisor/tickets') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_tickets_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_tickets_index');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TicketsController::indexAction',  '_route' => 'dash_tickets_index',);
                }
                not_dash_tickets_index:

                // dash_tickets_list
                if (rtrim($pathinfo, '/') === '/advisor/tickets/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_tickets_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_tickets_list');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TicketsController::listAction',  '_route' => 'dash_tickets_list',);
                }
                not_dash_tickets_list:

                // dash_tickets_blocklist
                if (rtrim($pathinfo, '/') === '/advisor/tickets/blocklist') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_tickets_blocklist;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_tickets_blocklist');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TicketsController::blocklistAction',  '_route' => 'dash_tickets_blocklist',);
                }
                not_dash_tickets_blocklist:

                // dash_tickets_page
                if (0 === strpos($pathinfo, '/advisor/tickets/page') && preg_match('#^/advisor/tickets/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_tickets_page')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TicketsController::pageAction',));
                }

                // dash_tickets_show
                if (preg_match('#^/advisor/tickets/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_tickets_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_tickets_show')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TicketsController::showAction',));
                }
                not_dash_tickets_show:

                // dash_tickets_new
                if ($pathinfo === '/advisor/tickets/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_tickets_new;
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TicketsController::newAction',  '_route' => 'dash_tickets_new',);
                }
                not_dash_tickets_new:

                // dash_tickets_edit
                if (preg_match('#^/advisor/tickets/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_tickets_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_tickets_edit')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TicketsController::editAction',));
                }
                not_dash_tickets_edit:

                // dash_tickets_delete
                if (preg_match('#^/advisor/tickets/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_dash_tickets_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_tickets_delete')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TicketsController::deleteAction',));
                }
                not_dash_tickets_delete:

                // dash_tickets_back
                if (rtrim($pathinfo, '/') === '/advisor/tickets/back') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_tickets_back;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_tickets_back');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TicketsController::backAction',  '_route' => 'dash_tickets_back',);
                }
                not_dash_tickets_back:

                // dash_tickets_search
                if (rtrim($pathinfo, '/') === '/advisor/tickets/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_tickets_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_tickets_search');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TicketsController::searchAction',  '_route' => 'dash_tickets_search',);
                }
                not_dash_tickets_search:

                // dash_tickets_pagesearch
                if (rtrim($pathinfo, '/') === '/advisor/tickets/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_tickets_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_tickets_pagesearch');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TicketsController::pagesearchAction',  '_route' => 'dash_tickets_pagesearch',);
                }
                not_dash_tickets_pagesearch:

                // dash_tickets_blocked
                if (preg_match('#^/advisor/tickets/(?P<id>[^/]++)/block/?$#s', $pathinfo, $matches)) {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_tickets_blocked');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_tickets_blocked')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TicketsController::blockAction',));
                }

                // dash_tickets_resolve
                if (preg_match('#^/advisor/tickets/(?P<id>[^/]++)/resolve/?$#s', $pathinfo, $matches)) {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_tickets_resolve');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_tickets_resolve')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TicketsController::resolveAction',));
                }

                // dash_tickets_close
                if (preg_match('#^/advisor/tickets/(?P<id>[^/]++)/close/?$#s', $pathinfo, $matches)) {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_tickets_close');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_tickets_close')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TicketsController::closeAction',));
                }

                // dash_tickets_extrasearch
                if (rtrim($pathinfo, '/') === '/advisor/tickets/extrasearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_tickets_extrasearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_tickets_extrasearch');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\TicketsController::extrasearchAction',  '_route' => 'dash_tickets_extrasearch',);
                }
                not_dash_tickets_extrasearch:

            }

            if (0 === strpos($pathinfo, '/advisor/help')) {
                // dash_help_index
                if (rtrim($pathinfo, '/') === '/advisor/help') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_help_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_help_index');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\HelpController::indexAction',  '_route' => 'dash_help_index',);
                }
                not_dash_help_index:

                // dash_help_list
                if (rtrim($pathinfo, '/') === '/advisor/help/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_help_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_help_list');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\HelpController::listAction',  '_route' => 'dash_help_list',);
                }
                not_dash_help_list:

                // dash_help_page
                if (0 === strpos($pathinfo, '/advisor/help/page') && preg_match('#^/advisor/help/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_help_page')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\HelpController::pageAction',));
                }

                // dash_help_show
                if (preg_match('#^/advisor/help/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_help_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_help_show')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\HelpController::showAction',));
                }
                not_dash_help_show:

                // dash_help_new
                if ($pathinfo === '/advisor/help/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_help_new;
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\HelpController::newAction',  '_route' => 'dash_help_new',);
                }
                not_dash_help_new:

                // dash_help_edit
                if (preg_match('#^/advisor/help/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_help_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_help_edit')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\HelpController::editAction',));
                }
                not_dash_help_edit:

                // dash_help_delete
                if (preg_match('#^/advisor/help/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_dash_help_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dash_help_delete')), array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\HelpController::deleteAction',));
                }
                not_dash_help_delete:

                // dash_help_back
                if (rtrim($pathinfo, '/') === '/advisor/help/back') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_dash_help_back;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_help_back');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\HelpController::backAction',  '_route' => 'dash_help_back',);
                }
                not_dash_help_back:

                // dash_help_search
                if (rtrim($pathinfo, '/') === '/advisor/help/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_help_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_help_search');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\HelpController::searchAction',  '_route' => 'dash_help_search',);
                }
                not_dash_help_search:

                // dash_help_pagesearch
                if (rtrim($pathinfo, '/') === '/advisor/help/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_dash_help_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dash_help_pagesearch');
                    }

                    return array (  '_controller' => 'Bo\\AdvisorsBundle\\Controller\\HelpController::pagesearchAction',  '_route' => 'dash_help_pagesearch',);
                }
                not_dash_help_pagesearch:

            }

        }

        if (0 === strpos($pathinfo, '/payroll')) {
            // bo_payroll_homepage
            if (rtrim($pathinfo, '/') === '/payroll') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_payroll_homepage');
                }

                return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\DefaultController::indexAction',  '_route' => 'bo_payroll_homepage',);
            }

            if (0 === strpos($pathinfo, '/payroll/timesheet')) {
                // payroll_timesheet_index
                if (rtrim($pathinfo, '/') === '/payroll/timesheet') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_payroll_timesheet_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_timesheet_index');
                    }

                    return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\TimesheetController::indexAction',  '_route' => 'payroll_timesheet_index',);
                }
                not_payroll_timesheet_index:

                // payroll_timesheet_back
                if ($pathinfo === '/payroll/timesheet/back') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_payroll_timesheet_back;
                    }

                    return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\TimesheetController::backAction',  '_route' => 'payroll_timesheet_back',);
                }
                not_payroll_timesheet_back:

                // payroll_timesheet_show
                if (preg_match('#^/payroll/timesheet/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_payroll_timesheet_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_timesheet_show')), array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\TimesheetController::showAction',));
                }
                not_payroll_timesheet_show:

                // payroll_timesheet_edit
                if (preg_match('#^/payroll/timesheet/(?P<id>[^/]++)/edit/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_payroll_timesheet_edit;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_timesheet_edit');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_timesheet_edit')), array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\TimesheetController::editAction',));
                }
                not_payroll_timesheet_edit:

                // payroll_timesheet_page
                if (0 === strpos($pathinfo, '/payroll/timesheet/page') && preg_match('#^/payroll/timesheet/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_payroll_timesheet_page;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_timesheet_page')), array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\TimesheetController::pageAction',));
                }
                not_payroll_timesheet_page:

                // payroll_timesheet_search
                if (rtrim($pathinfo, '/') === '/payroll/timesheet/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_payroll_timesheet_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_timesheet_search');
                    }

                    return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\TimesheetController::searchAction',  '_route' => 'payroll_timesheet_search',);
                }
                not_payroll_timesheet_search:

                // payroll_timesheet_pagesearch
                if (rtrim($pathinfo, '/') === '/payroll/timesheet/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_payroll_timesheet_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_timesheet_pagesearch');
                    }

                    return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\TimesheetController::pagesearchAction',  '_route' => 'payroll_timesheet_pagesearch',);
                }
                not_payroll_timesheet_pagesearch:

                // payroll_timesheet_extrasearch
                if (rtrim($pathinfo, '/') === '/payroll/timesheet/extrasearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_payroll_timesheet_extrasearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_timesheet_extrasearch');
                    }

                    return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\TimesheetController::extrasearchAction',  '_route' => 'payroll_timesheet_extrasearch',);
                }
                not_payroll_timesheet_extrasearch:

                // payroll_timesheet_navdate
                if (rtrim($pathinfo, '/') === '/payroll/timesheet/navdate') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_payroll_timesheet_navdate;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_timesheet_navdate');
                    }

                    return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\TimesheetController::navdateAction',  '_route' => 'payroll_timesheet_navdate',);
                }
                not_payroll_timesheet_navdate:

                // payroll_timesheet_validate
                if (preg_match('#^/payroll/timesheet/(?P<id>[^/]++)/validate$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_payroll_timesheet_validate;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_timesheet_validate')), array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\TimesheetController::validateAction',));
                }
                not_payroll_timesheet_validate:

                // payroll_timesheet_reject
                if (preg_match('#^/payroll/timesheet/(?P<id>[^/]++)/reject$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_payroll_timesheet_reject;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_timesheet_reject')), array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\TimesheetController::rejectAction',));
                }
                not_payroll_timesheet_reject:

                // payroll_timesheet_delete
                if (preg_match('#^/payroll/timesheet/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_payroll_timesheet_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_timesheet_delete')), array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\TimesheetController::deleteAction',));
                }
                not_payroll_timesheet_delete:

            }

            if (0 === strpos($pathinfo, '/payroll/employee')) {
                // payroll_employee_index
                if (rtrim($pathinfo, '/') === '/payroll/employee') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_payroll_employee_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_employee_index');
                    }

                    return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\EmployeeController::indexAction',  '_route' => 'payroll_employee_index',);
                }
                not_payroll_employee_index:

                // payroll_employee_list
                if (rtrim($pathinfo, '/') === '/payroll/employee/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_payroll_employee_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_employee_list');
                    }

                    return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\EmployeeController::listAction',  '_route' => 'payroll_employee_list',);
                }
                not_payroll_employee_list:

                // payroll_employee_page
                if (0 === strpos($pathinfo, '/payroll/employee/page') && preg_match('#^/payroll/employee/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_employee_page')), array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\EmployeeController::pageAction',));
                }

                // payroll_employee_show
                if (preg_match('#^/payroll/employee/(?P<id>[^/]++)/show/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_payroll_employee_show;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_employee_show');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_employee_show')), array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\EmployeeController::showAction',));
                }
                not_payroll_employee_show:

                // payroll_employee_contractshow
                if (preg_match('#^/payroll/employee/(?P<id>[^/]++)/contract/show/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_payroll_employee_contractshow;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_employee_contractshow');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_employee_contractshow')), array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\EmployeeController::contractshowAction',));
                }
                not_payroll_employee_contractshow:

                // payroll_employee_many
                if (preg_match('#^/payroll/employee/(?P<id>[^/]++)/show/many/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_payroll_employee_many;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_employee_many');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_employee_many')), array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\EmployeeController::manyAction',));
                }
                not_payroll_employee_many:

                if (0 === strpos($pathinfo, '/payroll/employee/generate')) {
                    if (0 === strpos($pathinfo, '/payroll/employee/generate/by')) {
                        // payroll_employee_allgenerate
                        if (rtrim($pathinfo, '/') === '/payroll/employee/generate/bycontract') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_payroll_employee_allgenerate;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'payroll_employee_allgenerate');
                            }

                            return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\EmployeeController::cgenerateAction',  '_route' => 'payroll_employee_allgenerate',);
                        }
                        not_payroll_employee_allgenerate:

                        // payroll_employee_tgenerate
                        if (rtrim($pathinfo, '/') === '/payroll/employee/generate/byteacher') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_payroll_employee_tgenerate;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'payroll_employee_tgenerate');
                            }

                            return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\EmployeeController::tgenerateAction',  '_route' => 'payroll_employee_tgenerate',);
                        }
                        not_payroll_employee_tgenerate:

                    }

                    // payroll_employee_generate
                    if (rtrim($pathinfo, '/') === '/payroll/employee/generate') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_payroll_employee_generate;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'payroll_employee_generate');
                        }

                        return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\EmployeeController::generateAction',  '_route' => 'payroll_employee_generate',);
                    }
                    not_payroll_employee_generate:

                }

                // payroll_employee_search
                if (rtrim($pathinfo, '/') === '/payroll/employee/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_payroll_employee_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_employee_search');
                    }

                    return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\EmployeeController::searchAction',  '_route' => 'payroll_employee_search',);
                }
                not_payroll_employee_search:

                // payroll_employee_pagesearch
                if (rtrim($pathinfo, '/') === '/payroll/employee/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_payroll_employee_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_employee_pagesearch');
                    }

                    return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\EmployeeController::pagesearchAction',  '_route' => 'payroll_employee_pagesearch',);
                }
                not_payroll_employee_pagesearch:

            }

            if (0 === strpos($pathinfo, '/payroll/contracts')) {
                // payroll_contracts_index
                if (rtrim($pathinfo, '/') === '/payroll/contracts') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_payroll_contracts_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_contracts_index');
                    }

                    return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ContractsController::indexAction',  '_route' => 'payroll_contracts_index',);
                }
                not_payroll_contracts_index:

                // payroll_contracts_list
                if (rtrim($pathinfo, '/') === '/payroll/contracts/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_payroll_contracts_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_contracts_list');
                    }

                    return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ContractsController::listAction',  '_route' => 'payroll_contracts_list',);
                }
                not_payroll_contracts_list:

                if (0 === strpos($pathinfo, '/payroll/contracts/generate')) {
                    // payroll_contracts_gencontts
                    if (rtrim($pathinfo, '/') === '/payroll/contracts/generate/contts') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_payroll_contracts_gencontts;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'payroll_contracts_gencontts');
                        }

                        return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ContractsController::generateforcontractAction',  '_route' => 'payroll_contracts_gencontts',);
                    }
                    not_payroll_contracts_gencontts:

                    // payroll_contracts_gengroupts
                    if (rtrim($pathinfo, '/') === '/payroll/contracts/generate/groupts') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_payroll_contracts_gengroupts;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'payroll_contracts_gengroupts');
                        }

                        return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ContractsController::generateforgroupAction',  '_route' => 'payroll_contracts_gengroupts',);
                    }
                    not_payroll_contracts_gengroupts:

                }

                if (0 === strpos($pathinfo, '/payroll/contracts/today')) {
                    // payroll_contracts_today
                    if (rtrim($pathinfo, '/') === '/payroll/contracts/today') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_payroll_contracts_today;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'payroll_contracts_today');
                        }

                        return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ContractsController::todayAction',  '_route' => 'payroll_contracts_today',);
                    }
                    not_payroll_contracts_today:

                    // payroll_contracts_group
                    if (rtrim($pathinfo, '/') === '/payroll/contracts/today/group') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_payroll_contracts_group;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'payroll_contracts_group');
                        }

                        return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ContractsController::groupAction',  '_route' => 'payroll_contracts_group',);
                    }
                    not_payroll_contracts_group:

                }

                // payroll_contracts_show
                if (preg_match('#^/payroll/contracts/(?P<id>[^/]++)/today/contracts/show/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_payroll_contracts_show;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_contracts_show');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_contracts_show')), array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ContractsController::showAction',));
                }
                not_payroll_contracts_show:

                // payroll_group_show
                if (preg_match('#^/payroll/contracts/(?P<id>[^/]++)/today/group/show/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_payroll_group_show;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_group_show');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_group_show')), array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ContractsController::groupshowAction',));
                }
                not_payroll_group_show:

                if (0 === strpos($pathinfo, '/payroll/contracts/generate')) {
                    // payroll_contracts_allgenerate
                    if (rtrim($pathinfo, '/') === '/payroll/contracts/generate/all') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_payroll_contracts_allgenerate;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'payroll_contracts_allgenerate');
                        }

                        return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ContractsController::allgenerateAction',  '_route' => 'payroll_contracts_allgenerate',);
                    }
                    not_payroll_contracts_allgenerate:

                    // payroll_contracts_generate
                    if (rtrim($pathinfo, '/') === '/payroll/contracts/generate') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_payroll_contracts_generate;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'payroll_contracts_generate');
                        }

                        return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ContractsController::generateAction',  '_route' => 'payroll_contracts_generate',);
                    }
                    not_payroll_contracts_generate:

                }

            }

            if (0 === strpos($pathinfo, '/payroll/validation')) {
                // payroll_validation_index
                if (rtrim($pathinfo, '/') === '/payroll/validation') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_payroll_validation_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_validation_index');
                    }

                    return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ValidationController::indexAction',  '_route' => 'payroll_validation_index',);
                }
                not_payroll_validation_index:

                // payroll_validation_list
                if (rtrim($pathinfo, '/') === '/payroll/validation/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_payroll_validation_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_validation_list');
                    }

                    return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ValidationController::listAction',  '_route' => 'payroll_validation_list',);
                }
                not_payroll_validation_list:

                // payroll_validation_page
                if (0 === strpos($pathinfo, '/payroll/validation/page') && preg_match('#^/payroll/validation/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_validation_page')), array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ValidationController::pageAction',));
                }

                // payroll_validation_show
                if (preg_match('#^/payroll/validation/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_payroll_validation_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_validation_show')), array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ValidationController::showAction',));
                }
                not_payroll_validation_show:

                // payroll_validation_showts
                if (preg_match('#^/payroll/validation/(?P<id>[^/]++)/showts$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_payroll_validation_showts;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_validation_showts')), array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ValidationController::showtsAction',));
                }
                not_payroll_validation_showts:

                // payroll_validation_search
                if (rtrim($pathinfo, '/') === '/payroll/validation/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_payroll_validation_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_validation_search');
                    }

                    return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ValidationController::searchAction',  '_route' => 'payroll_validation_search',);
                }
                not_payroll_validation_search:

                // payroll_validation_pagesearch
                if (rtrim($pathinfo, '/') === '/payroll/validation/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_payroll_validation_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_validation_pagesearch');
                    }

                    return array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ValidationController::pagesearchAction',  '_route' => 'payroll_validation_pagesearch',);
                }
                not_payroll_validation_pagesearch:

                // payroll_validation_validate
                if (preg_match('#^/payroll/validation/(?P<id>[^/]++)/validate/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_payroll_validation_validate;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_validation_validate');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_validation_validate')), array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ValidationController::validateAction',));
                }
                not_payroll_validation_validate:

                // payroll_validation_reject
                if (preg_match('#^/payroll/validation/(?P<id>[^/]++)/reject/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_payroll_validation_reject;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_validation_reject');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_validation_reject')), array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ValidationController::rejectAction',));
                }
                not_payroll_validation_reject:

                // payroll_validation_allvalidate
                if (preg_match('#^/payroll/validation/(?P<id>[^/]++)/allvalidate$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_payroll_validation_allvalidate;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_validation_allvalidate')), array (  '_controller' => 'Bo\\PayrollBundle\\Controller\\ValidationController::allvalidateAction',));
                }
                not_payroll_validation_allvalidate:

            }

        }

        if (0 === strpos($pathinfo, '/student')) {
            // bo_student_homepage
            if (rtrim($pathinfo, '/') === '/student') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_student_homepage');
                }

                $requiredSchemes = array (  'https' => 0,);
                if (!isset($requiredSchemes[$this->context->getScheme()])) {
                    return $this->redirect($pathinfo, 'bo_student_homepage', key($requiredSchemes));
                }

                return array (  '_controller' => 'Bo\\StudentBundle\\Controller\\DefaultController::indexAction',  '_route' => 'bo_student_homepage',);
            }

            // bo_student_teamcontact
            if (rtrim($pathinfo, '/') === '/student/team/admin') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_student_teamcontact');
                }

                $requiredSchemes = array (  'https' => 0,);
                if (!isset($requiredSchemes[$this->context->getScheme()])) {
                    return $this->redirect($pathinfo, 'bo_student_teamcontact', key($requiredSchemes));
                }

                return array (  '_controller' => 'Bo\\StudentBundle\\Controller\\DefaultController::teamcontactAction',  '_route' => 'bo_student_teamcontact',);
            }

            // bo_student_contract
            if (rtrim($pathinfo, '/') === '/student/contract') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_student_contract');
                }

                $requiredSchemes = array (  'https' => 0,);
                if (!isset($requiredSchemes[$this->context->getScheme()])) {
                    return $this->redirect($pathinfo, 'bo_student_contract', key($requiredSchemes));
                }

                return array (  '_controller' => 'Bo\\StudentBundle\\Controller\\DefaultController::contractAction',  '_route' => 'bo_student_contract',);
            }

            // bo_student_teamcontact_search
            if (rtrim($pathinfo, '/') === '/student/teamadmin/search') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_student_teamcontact_search');
                }

                $requiredSchemes = array (  'https' => 0,);
                if (!isset($requiredSchemes[$this->context->getScheme()])) {
                    return $this->redirect($pathinfo, 'bo_student_teamcontact_search', key($requiredSchemes));
                }

                return array (  '_controller' => 'Bo\\StudentBundle\\Controller\\DefaultController::contactsearchAction',  '_route' => 'bo_student_teamcontact_search',);
            }

            // bo_student_edit
            if ($pathinfo === '/student/account/edit') {
                return array (  '_controller' => 'Bo\\StudentBundle\\Controller\\DefaultController::editAction',  '_route' => 'bo_student_edit',);
            }

            // bo_student_language
            if (preg_match('#^/student/(?P<_locale>en|fr)/language/?$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                    goto not_bo_student_language;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_student_language');
                }

                $requiredSchemes = array (  'https' => 0,);
                if (!isset($requiredSchemes[$this->context->getScheme()])) {
                    return $this->redirect($pathinfo, 'bo_student_language', key($requiredSchemes));
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'bo_student_language')), array (  '_controller' => 'Bo\\StudentBundle\\Controller\\DefaultController::languageAction',));
            }
            not_bo_student_language:

            if (0 === strpos($pathinfo, '/student/t')) {
                if (0 === strpos($pathinfo, '/student/tsstudent')) {
                    // tsstudent_index
                    if (rtrim($pathinfo, '/') === '/student/tsstudent') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_tsstudent_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tsstudent_index');
                        }

                        return array (  '_controller' => 'Bo\\StudentBundle\\Controller\\TsStudentController::indexAction',  '_route' => 'tsstudent_index',);
                    }
                    not_tsstudent_index:

                    // tsstudent_validate
                    if (preg_match('#^/student/tsstudent/(?P<id>[^/]++)/validate$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tsstudent_validate;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'tsstudent_validate')), array (  '_controller' => 'Bo\\StudentBundle\\Controller\\TsStudentController::validateAction',));
                    }
                    not_tsstudent_validate:

                    // tsstudent_reject
                    if (preg_match('#^/student/tsstudent/(?P<id>[^/]++)/reject$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tsstudent_reject;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'tsstudent_reject')), array (  '_controller' => 'Bo\\StudentBundle\\Controller\\TsStudentController::rejectAction',));
                    }
                    not_tsstudent_reject:

                    // tsstudent_allvalidate
                    if ($pathinfo === '/student/tsstudent/allvalidate') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tsstudent_allvalidate;
                        }

                        return array (  '_controller' => 'Bo\\StudentBundle\\Controller\\TsStudentController::allvalidateAction',  '_route' => 'tsstudent_allvalidate',);
                    }
                    not_tsstudent_allvalidate:

                    // tsstudent_show
                    if (preg_match('#^/student/tsstudent/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_tsstudent_show;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'tsstudent_show')), array (  '_controller' => 'Bo\\StudentBundle\\Controller\\TsStudentController::showAction',));
                    }
                    not_tsstudent_show:

                }

                if (0 === strpos($pathinfo, '/student/timesheet')) {
                    // student_timesheet_index
                    if (rtrim($pathinfo, '/') === '/student/timesheet') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_student_timesheet_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'student_timesheet_index');
                        }

                        return array (  '_controller' => 'Bo\\StudentBundle\\Controller\\TimesheetController::indexAction',  '_route' => 'student_timesheet_index',);
                    }
                    not_student_timesheet_index:

                    // student_timesheet_show
                    if (preg_match('#^/student/timesheet/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_student_timesheet_show;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'student_timesheet_show')), array (  '_controller' => 'Bo\\StudentBundle\\Controller\\TimesheetController::showAction',));
                    }
                    not_student_timesheet_show:

                    // student_timesheet_validate
                    if (preg_match('#^/student/timesheet/(?P<id>[^/]++)/validate$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_student_timesheet_validate;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'student_timesheet_validate')), array (  '_controller' => 'Bo\\StudentBundle\\Controller\\TimesheetController::validateAction',));
                    }
                    not_student_timesheet_validate:

                    // student_timesheet_reject
                    if (preg_match('#^/student/timesheet/(?P<id>[^/]++)/reject$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_student_timesheet_reject;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'student_timesheet_reject')), array (  '_controller' => 'Bo\\StudentBundle\\Controller\\TimesheetController::rejectAction',));
                    }
                    not_student_timesheet_reject:

                    // student_timesheet_allvalidate
                    if ($pathinfo === '/student/timesheet/allvalidate') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_student_timesheet_allvalidate;
                        }

                        return array (  '_controller' => 'Bo\\StudentBundle\\Controller\\TimesheetController::allvalidateAction',  '_route' => 'student_timesheet_allvalidate',);
                    }
                    not_student_timesheet_allvalidate:

                    // student_timesheet_validated
                    if ($pathinfo === '/student/timesheet/validated') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_student_timesheet_validated;
                        }

                        return array (  '_controller' => 'Bo\\StudentBundle\\Controller\\TimesheetController::validatedAction',  '_route' => 'student_timesheet_validated',);
                    }
                    not_student_timesheet_validated:

                }

            }

            if (0 === strpos($pathinfo, '/student/a')) {
                if (0 === strpos($pathinfo, '/student/absences')) {
                    // student_absences_index
                    if (rtrim($pathinfo, '/') === '/student/absences') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_student_absences_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'student_absences_index');
                        }

                        return array (  '_controller' => 'Bo\\StudentBundle\\Controller\\AbsencesController::indexAction',  '_route' => 'student_absences_index',);
                    }
                    not_student_absences_index:

                    // student_absences_show
                    if (preg_match('#^/student/absences/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_student_absences_show;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'student_absences_show')), array (  '_controller' => 'Bo\\StudentBundle\\Controller\\AbsencesController::showAction',));
                    }
                    not_student_absences_show:

                    // student_absences_new
                    if ($pathinfo === '/student/absences/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_student_absences_new;
                        }

                        return array (  '_controller' => 'Bo\\StudentBundle\\Controller\\AbsencesController::newAction',  '_route' => 'student_absences_new',);
                    }
                    not_student_absences_new:

                    // student_absences_edit
                    if (preg_match('#^/student/absences/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_student_absences_edit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'student_absences_edit')), array (  '_controller' => 'Bo\\StudentBundle\\Controller\\AbsencesController::editAction',));
                    }
                    not_student_absences_edit:

                    // student_absences_delete
                    if (preg_match('#^/student/absences/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_student_absences_delete;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'student_absences_delete')), array (  '_controller' => 'Bo\\StudentBundle\\Controller\\AbsencesController::deleteAction',));
                    }
                    not_student_absences_delete:

                }

                if (0 === strpos($pathinfo, '/student/activities')) {
                    // student_activities_index
                    if (rtrim($pathinfo, '/') === '/student/activities') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_student_activities_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'student_activities_index');
                        }

                        return array (  '_controller' => 'Bo\\StudentBundle\\Controller\\ActivitiesController::indexAction',  '_route' => 'student_activities_index',);
                    }
                    not_student_activities_index:

                    // student_activities_page
                    if (0 === strpos($pathinfo, '/student/activities/page') && preg_match('#^/student/activities/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'student_activities_page')), array (  '_controller' => 'Bo\\StudentBundle\\Controller\\ActivitiesController::pageAction',));
                    }

                    // student_activities_show
                    if (preg_match('#^/student/activities/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_student_activities_show;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'student_activities_show')), array (  '_controller' => 'Bo\\StudentBundle\\Controller\\ActivitiesController::showAction',));
                    }
                    not_student_activities_show:

                }

            }

            if (0 === strpos($pathinfo, '/student/message')) {
                // student_message_index
                if (rtrim($pathinfo, '/') === '/student/message') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_student_message_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'student_message_index');
                    }

                    return array (  '_controller' => 'Bo\\StudentBundle\\Controller\\MessageController::indexAction',  '_route' => 'student_message_index',);
                }
                not_student_message_index:

                // student_message_show
                if (preg_match('#^/student/message/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_student_message_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'student_message_show')), array (  '_controller' => 'Bo\\StudentBundle\\Controller\\MessageController::showAction',));
                }
                not_student_message_show:

                // student_message_new
                if ($pathinfo === '/student/message/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_student_message_new;
                    }

                    return array (  '_controller' => 'Bo\\StudentBundle\\Controller\\MessageController::newAction',  '_route' => 'student_message_new',);
                }
                not_student_message_new:

                // student_message_edit
                if (preg_match('#^/student/message/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_student_message_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'student_message_edit')), array (  '_controller' => 'Bo\\StudentBundle\\Controller\\MessageController::editAction',));
                }
                not_student_message_edit:

                // student_message_delete
                if (preg_match('#^/student/message/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_student_message_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'student_message_delete')), array (  '_controller' => 'Bo\\StudentBundle\\Controller\\MessageController::deleteAction',));
                }
                not_student_message_delete:

            }

            if (0 === strpos($pathinfo, '/student/t')) {
                if (0 === strpos($pathinfo, '/student/tickets')) {
                    // student_tickets_index
                    if (rtrim($pathinfo, '/') === '/student/tickets') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_student_tickets_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'student_tickets_index');
                        }

                        return array (  '_controller' => 'Bo\\StudentBundle\\Controller\\TicketsController::indexAction',  '_route' => 'student_tickets_index',);
                    }
                    not_student_tickets_index:

                    // student_tickets_show
                    if (preg_match('#^/student/tickets/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_student_tickets_show;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'student_tickets_show')), array (  '_controller' => 'Bo\\StudentBundle\\Controller\\TicketsController::showAction',));
                    }
                    not_student_tickets_show:

                    // student_tickets_new
                    if ($pathinfo === '/student/tickets/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_student_tickets_new;
                        }

                        return array (  '_controller' => 'Bo\\StudentBundle\\Controller\\TicketsController::newAction',  '_route' => 'student_tickets_new',);
                    }
                    not_student_tickets_new:

                    // student_tickets_edit
                    if (preg_match('#^/student/tickets/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_student_tickets_edit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'student_tickets_edit')), array (  '_controller' => 'Bo\\StudentBundle\\Controller\\TicketsController::editAction',));
                    }
                    not_student_tickets_edit:

                }

                // bo_student_test
                if (rtrim($pathinfo, '/') === '/student/test') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'bo_student_test');
                    }

                    return array (  '_controller' => 'Bo\\StudentBundle\\Controller\\DefaultController::testAction',  '_route' => 'bo_student_test',);
                }

            }

        }

        if (0 === strpos($pathinfo, '/teacher')) {
            // bo_home_homepage
            if (rtrim($pathinfo, '/') === '/teacher') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_home_homepage');
                }

                return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\DefaultController::indexAction',  '_route' => 'bo_home_homepage',);
            }

            // bo_home_maintenance
            if (rtrim($pathinfo, '/') === '/teacher/maintenance') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_home_maintenance');
                }

                return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\DefaultController::maintenanceAction',  '_route' => 'bo_home_maintenance',);
            }

            // bo_home_broken
            if (rtrim($pathinfo, '/') === '/teacher/broken') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_home_broken');
                }

                return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\DefaultController::brokenAction',  '_route' => 'bo_home_broken',);
            }

            // bo_home_teamcontact
            if (rtrim($pathinfo, '/') === '/teacher/team/admin') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_home_teamcontact');
                }

                return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\DefaultController::teamcontactAction',  '_route' => 'bo_home_teamcontact',);
            }

            // bo_home_edit
            if ($pathinfo === '/teacher/account/edit') {
                return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\DefaultController::editAction',  '_route' => 'bo_home_edit',);
            }

            // bo_home_language
            if (preg_match('#^/teacher/(?P<_locale>en|fr)/language/?$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                    goto not_bo_home_language;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_home_language');
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'bo_home_language')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\DefaultController::languageAction',));
            }
            not_bo_home_language:

            // bo_home_user_update
            if (0 === strpos($pathinfo, '/teacher/user/update') && preg_match('#^/teacher/user/update/(?P<idemployee>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'bo_home_user_update')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DefaultController::updateAction',));
            }

            if (0 === strpos($pathinfo, '/teacher/timesheet')) {
                // home_timesheet_index
                if (rtrim($pathinfo, '/') === '/teacher/timesheet') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_timesheet_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_timesheet_index');
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TimesheetController::indexAction',  '_route' => 'home_timesheet_index',);
                }
                not_home_timesheet_index:

                // home_timesheet_show
                if (preg_match('#^/teacher/timesheet/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_timesheet_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_timesheet_show')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TimesheetController::showAction',));
                }
                not_home_timesheet_show:

                // home_timesheet_newbysearch
                if (preg_match('#^/teacher/timesheet/(?P<idcontract>[^/]++)/newbysearch$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_timesheet_newbysearch;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_timesheet_newbysearch')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TimesheetController::newbysearchAction',));
                }
                not_home_timesheet_newbysearch:

                // home_timesheet_new
                if ($pathinfo === '/teacher/timesheet/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_timesheet_new;
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TimesheetController::newAction',  '_route' => 'home_timesheet_new',);
                }
                not_home_timesheet_new:

                // home_timesheet_other
                if ($pathinfo === '/teacher/timesheet/other') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_timesheet_other;
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TimesheetController::otherAction',  '_route' => 'home_timesheet_other',);
                }
                not_home_timesheet_other:

                // home_timesheet_add
                if (0 === strpos($pathinfo, '/teacher/timesheet/add') && preg_match('#^/teacher/timesheet/add/(?P<idcontract>[^/]++)/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_timesheet_add;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_timesheet_add');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_timesheet_add')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TimesheetController::addtsAction',));
                }
                not_home_timesheet_add:

                // home_timesheet_group
                if (preg_match('#^/teacher/timesheet/(?P<idgroup>[^/]++)/group/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_timesheet_group;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_timesheet_group');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_timesheet_group')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TimesheetController::addtsgroupAction',));
                }
                not_home_timesheet_group:

                // home_timesheet_create
                if ($pathinfo === '/teacher/timesheet/create') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_timesheet_create;
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TimesheetController::createAction',  '_route' => 'home_timesheet_create',);
                }
                not_home_timesheet_create:

                // home_timesheet_addmany
                if (rtrim($pathinfo, '/') === '/teacher/timesheet/new/many') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_timesheet_addmany;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_timesheet_addmany');
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TimesheetController::addmanyAction',  '_route' => 'home_timesheet_addmany',);
                }
                not_home_timesheet_addmany:

                // home_timesheet_edit
                if (preg_match('#^/teacher/timesheet/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_timesheet_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_timesheet_edit')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TimesheetController::editAction',));
                }
                not_home_timesheet_edit:

                // home_timesheet_delete
                if (preg_match('#^/teacher/timesheet/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_home_timesheet_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_timesheet_delete')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TimesheetController::deleteAction',));
                }
                not_home_timesheet_delete:

                // home_timesheet_message
                if (rtrim($pathinfo, '/') === '/teacher/timesheet/message') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_timesheet_message;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_timesheet_message');
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TimesheetController::messageAction',  '_route' => 'home_timesheet_message',);
                }
                not_home_timesheet_message:

                // home_timesheet_contractsearch
                if ($pathinfo === '/teacher/timesheet/contractsearch/') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_home_timesheet_contractsearch;
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TimesheetController::contractsearchAction',  '_route' => 'home_timesheet_contractsearch',);
                }
                not_home_timesheet_contractsearch:

                // home_timesheet_search
                if ($pathinfo === '/teacher/timesheet/search/') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_home_timesheet_search;
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TimesheetController::searchAction',  '_route' => 'home_timesheet_search',);
                }
                not_home_timesheet_search:

                // home_timesheet_extrasearch
                if ($pathinfo === '/teacher/timesheet/extrasearch/') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_home_timesheet_extrasearch;
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TimesheetController::extrasearchAction',  '_route' => 'home_timesheet_extrasearch',);
                }
                not_home_timesheet_extrasearch:

                // home_timesheet_datesearch
                if ($pathinfo === '/teacher/timesheet/datesearch/') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_home_timesheet_datesearch;
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TimesheetController::datesearchAction',  '_route' => 'home_timesheet_datesearch',);
                }
                not_home_timesheet_datesearch:

                if (0 === strpos($pathinfo, '/teacher/timesheet/reload')) {
                    // home_timesheet_reloaddata
                    if (rtrim($pathinfo, '/') === '/teacher/timesheet/reloaddata') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_home_timesheet_reloaddata;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'home_timesheet_reloaddata');
                        }

                        return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TimesheetController::reloaddataAction',  '_route' => 'home_timesheet_reloaddata',);
                    }
                    not_home_timesheet_reloaddata:

                    // home_timesheet_reloadatt
                    if (rtrim($pathinfo, '/') === '/teacher/timesheet/reloadatt') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_home_timesheet_reloadatt;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'home_timesheet_reloadatt');
                        }

                        return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TimesheetController::reloadattAction',  '_route' => 'home_timesheet_reloadatt',);
                    }
                    not_home_timesheet_reloadatt:

                }

            }

            if (0 === strpos($pathinfo, '/teacher/absences')) {
                // home_absences_index
                if (rtrim($pathinfo, '/') === '/teacher/absences') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_absences_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_absences_index');
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\AbsencesController::indexAction',  '_route' => 'home_absences_index',);
                }
                not_home_absences_index:

                // home_absences_show
                if (preg_match('#^/teacher/absences/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_absences_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_absences_show')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\AbsencesController::showAction',));
                }
                not_home_absences_show:

                // home_absences_new
                if ($pathinfo === '/teacher/absences/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_absences_new;
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\AbsencesController::newAction',  '_route' => 'home_absences_new',);
                }
                not_home_absences_new:

                // home_absences_edit
                if (preg_match('#^/teacher/absences/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_absences_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_absences_edit')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\AbsencesController::editAction',));
                }
                not_home_absences_edit:

                // home_absences_delete
                if (preg_match('#^/teacher/absences/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_home_absences_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_absences_delete')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\AbsencesController::deleteAction',));
                }
                not_home_absences_delete:

            }

            if (0 === strpos($pathinfo, '/teacher/message')) {
                // home_message_index
                if (rtrim($pathinfo, '/') === '/teacher/message') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_message_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_message_index');
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\MessageController::indexAction',  '_route' => 'home_message_index',);
                }
                not_home_message_index:

                // home_message_show
                if (preg_match('#^/teacher/message/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_message_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_message_show')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\MessageController::showAction',));
                }
                not_home_message_show:

                // home_message_new
                if ($pathinfo === '/teacher/message/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_message_new;
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\MessageController::newAction',  '_route' => 'home_message_new',);
                }
                not_home_message_new:

                // home_message_edit
                if (preg_match('#^/teacher/message/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_message_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_message_edit')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\MessageController::editAction',));
                }
                not_home_message_edit:

                // home_message_delete
                if (preg_match('#^/teacher/message/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_home_message_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_message_delete')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\MessageController::deleteAction',));
                }
                not_home_message_delete:

            }

            if (0 === strpos($pathinfo, '/teacher/tickets')) {
                // home_tickets_index
                if (rtrim($pathinfo, '/') === '/teacher/tickets') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_tickets_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_tickets_index');
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TicketsController::indexAction',  '_route' => 'home_tickets_index',);
                }
                not_home_tickets_index:

                // home_tickets_show
                if (preg_match('#^/teacher/tickets/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_tickets_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_tickets_show')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TicketsController::showAction',));
                }
                not_home_tickets_show:

                // home_tickets_new
                if ($pathinfo === '/teacher/tickets/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_tickets_new;
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TicketsController::newAction',  '_route' => 'home_tickets_new',);
                }
                not_home_tickets_new:

                // home_tickets_edit
                if (preg_match('#^/teacher/tickets/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_tickets_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_tickets_edit')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TicketsController::editAction',));
                }
                not_home_tickets_edit:

            }

            if (0 === strpos($pathinfo, '/teacher/substitution')) {
                // home_substitution_index
                if (rtrim($pathinfo, '/') === '/teacher/substitution/index') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_substitution_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_substitution_index');
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\SubstitutionController::indexAction',  '_route' => 'home_substitution_index',);
                }
                not_home_substitution_index:

                // home_substitution_list
                if (rtrim($pathinfo, '/') === '/teacher/substitution/liste') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_substitution_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_substitution_list');
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\SubstitutionController::listAction',  '_route' => 'home_substitution_list',);
                }
                not_home_substitution_list:

                // home_substitution_page
                if (preg_match('#^/teacher/substitution/(?P<option>[^/]++)/page$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_substitution_page;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_substitution_page')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\SubstitutionController::pageAction',));
                }
                not_home_substitution_page:

                // home_substitution_show
                if (preg_match('#^/teacher/substitution/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_substitution_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_substitution_show')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\SubstitutionController::showAction',));
                }
                not_home_substitution_show:

                // home_substitution_search
                if (rtrim($pathinfo, '/') === '/teacher/substitution/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_substitution_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_substitution_search');
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\SubstitutionController::searchAction',  '_route' => 'home_substitution_search',);
                }
                not_home_substitution_search:

                // home_substitution_pagesearch
                if (rtrim($pathinfo, '/') === '/teacher/substitution/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_substitution_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_substitution_pagesearch');
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\SubstitutionController::pagesearchAction',  '_route' => 'home_substitution_pagesearch',);
                }
                not_home_substitution_pagesearch:

                // home_substitution_newts
                if (preg_match('#^/teacher/substitution/(?P<id>[^/]++)/newts/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_substitution_newts;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_substitution_newts');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_substitution_newts')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\SubstitutionController::newtsAction',));
                }
                not_home_substitution_newts:

            }

            if (0 === strpos($pathinfo, '/teacher/document')) {
                // home_emppj_index
                if (rtrim($pathinfo, '/') === '/teacher/document') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_emppj_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_emppj_index');
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\EmppjController::indexAction',  '_route' => 'home_emppj_index',);
                }
                not_home_emppj_index:

                // home_emppj_show
                if (preg_match('#^/teacher/document/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_emppj_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_emppj_show')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\EmppjController::showAction',));
                }
                not_home_emppj_show:

                // home_emppj_new
                if ($pathinfo === '/teacher/document/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_emppj_new;
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\EmppjController::newAction',  '_route' => 'home_emppj_new',);
                }
                not_home_emppj_new:

                // home_emppj_edit
                if (preg_match('#^/teacher/document/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_emppj_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_emppj_edit')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\EmppjController::editAction',));
                }
                not_home_emppj_edit:

                // home_emppj_delete
                if (preg_match('#^/teacher/document/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_home_emppj_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_emppj_delete')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\EmppjController::deleteAction',));
                }
                not_home_emppj_delete:

            }

            if (0 === strpos($pathinfo, '/teacher/agenda')) {
                // home_agenda_index
                if (rtrim($pathinfo, '/') === '/teacher/agenda') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_agenda_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_agenda_index');
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\AgendaController::indexAction',  '_route' => 'home_agenda_index',);
                }
                not_home_agenda_index:

                // home_agenda_search
                if (rtrim($pathinfo, '/') === '/teacher/agenda/agenda/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_agenda_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_agenda_search');
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AgendaController::searchAction',  '_route' => 'home_agenda_search',);
                }
                not_home_agenda_search:

            }

            if (0 === strpos($pathinfo, '/teacher/invitation')) {
                // home_invitation_index
                if (rtrim($pathinfo, '/') === '/teacher/invitation') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_invitation_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_invitation_index');
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\InvitationController::indexAction',  '_route' => 'home_invitation_index',);
                }
                not_home_invitation_index:

                // home_invitation_show
                if (preg_match('#^/teacher/invitation/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_invitation_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_invitation_show')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\InvitationController::showAction',));
                }
                not_home_invitation_show:

                // home_invitation_accept
                if (preg_match('#^/teacher/invitation/(?P<id>[^/]++)/accept$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_invitation_accept;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_invitation_accept')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\InvitationController::acceptAction',));
                }
                not_home_invitation_accept:

                // home_invitation_reject
                if (preg_match('#^/teacher/invitation/(?P<id>[^/]++)/reject$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_invitation_reject;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_invitation_reject')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\InvitationController::rejectAction',));
                }
                not_home_invitation_reject:

            }

            // home_contract_show
            if (rtrim($pathinfo, '/') === '/teacher/contracts/show') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'home_contract_show');
                }

                return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\ContractsController::showAction',  '_route' => 'home_contract_show',);
            }

            // home_schedule_load
            if (rtrim($pathinfo, '/') === '/teacher/schedule/load') {
                if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                    goto not_home_schedule_load;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'home_schedule_load');
                }

                return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\DefaultController::loadscheduleAction',  '_route' => 'home_schedule_load',);
            }
            not_home_schedule_load:

            if (0 === strpos($pathinfo, '/teacher/dash')) {
                // bo_home_newabsence
                if (rtrim($pathinfo, '/') === '/teacher/dash/absence/new') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'bo_home_newabsence');
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\DefaultController::newabsenceAction',  '_route' => 'bo_home_newabsence',);
                }

                // bo_home_newticket
                if (rtrim($pathinfo, '/') === '/teacher/dash/ticket/new') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'bo_home_newticket');
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\DefaultController::newticketAction',  '_route' => 'bo_home_newticket',);
                }

            }

            if (0 === strpos($pathinfo, '/teacher/tsdoc')) {
                // home_tsdoc_index
                if (rtrim($pathinfo, '/') === '/teacher/tsdoc/index') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_tsdoc_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_tsdoc_index');
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TsdocController::indexAction',  '_route' => 'home_tsdoc_index',);
                }
                not_home_tsdoc_index:

                // home_tsdoc_list
                if (rtrim($pathinfo, '/') === '/teacher/tsdoc/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_tsdoc_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_tsdoc_list');
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TsdocController::listAction',  '_route' => 'home_tsdoc_list',);
                }
                not_home_tsdoc_list:

                // home_tsdoc_page
                if (preg_match('#^/teacher/tsdoc/(?P<option>[^/]++)/page/?$#s', $pathinfo, $matches)) {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_tsdoc_page');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_tsdoc_page')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TsdocController::pageAction',));
                }

                // home_tsdoc_show
                if (preg_match('#^/teacher/tsdoc/(?P<id>[^/]++)/show/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_home_tsdoc_show;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_tsdoc_show');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_tsdoc_show')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TsdocController::showAction',));
                }
                not_home_tsdoc_show:

                // home_tsdoc_new
                if (rtrim($pathinfo, '/') === '/teacher/tsdoc/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_tsdoc_new;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_tsdoc_new');
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TsdocController::newAction',  '_route' => 'home_tsdoc_new',);
                }
                not_home_tsdoc_new:

                // home_tsdoc_edit
                if (preg_match('#^/teacher/tsdoc/(?P<id>[^/]++)/edit/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_tsdoc_edit;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_tsdoc_edit');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_tsdoc_edit')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TsdocController::editAction',));
                }
                not_home_tsdoc_edit:

                // home_tsdoc_delete
                if (preg_match('#^/teacher/tsdoc/(?P<id>[^/]++)/delete/$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_home_tsdoc_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'home_tsdoc_delete')), array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TsdocController::deleteAction',));
                }
                not_home_tsdoc_delete:

                // home_tsdoc_search
                if (rtrim($pathinfo, '/') === '/teacher/tsdoc/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_tsdoc_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_tsdoc_search');
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TsdocController::searchAction',  '_route' => 'home_tsdoc_search',);
                }
                not_home_tsdoc_search:

                // home_tsdoc_pagesearch
                if (rtrim($pathinfo, '/') === '/teacher/tsdoc/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_home_tsdoc_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'home_tsdoc_pagesearch');
                    }

                    return array (  '_controller' => 'Bo\\HomeBundle\\Controller\\TsdocController::pagesearchAction',  '_route' => 'home_tsdoc_pagesearch',);
                }
                not_home_tsdoc_pagesearch:

            }

        }

        if (0 === strpos($pathinfo, '/user')) {
            if (0 === strpos($pathinfo, '/user/manager')) {
                // user_index
                if (rtrim($pathinfo, '/') === '/user/manager') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_user_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'user_index');
                    }

                    return array (  '_controller' => 'Bo\\UserBundle\\Controller\\UserController::indexAction',  '_route' => 'user_index',);
                }
                not_user_index:

                // user_list
                if (rtrim($pathinfo, '/') === '/user/manager/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_user_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'user_list');
                    }

                    return array (  '_controller' => 'Bo\\UserBundle\\Controller\\UserController::listAction',  '_route' => 'user_list',);
                }
                not_user_list:

                // user_teacher_connected
                if (rtrim($pathinfo, '/') === '/user/manager/teacher/connected') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_user_teacher_connected;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'user_teacher_connected');
                    }

                    return array (  '_controller' => 'Bo\\UserBundle\\Controller\\UserController::tconnectedAction',  '_route' => 'user_teacher_connected',);
                }
                not_user_teacher_connected:

                // user_page
                if (0 === strpos($pathinfo, '/user/manager/page') && preg_match('#^/user/manager/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'user_page')), array (  '_controller' => 'Bo\\UserBundle\\Controller\\UserController::pageAction',));
                }

                // user_show
                if (preg_match('#^/user/manager/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_user_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'user_show')), array (  '_controller' => 'Bo\\UserBundle\\Controller\\UserController::showAction',));
                }
                not_user_show:

                // user_search
                if (rtrim($pathinfo, '/') === '/user/manager/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_user_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'user_search');
                    }

                    return array (  '_controller' => 'Bo\\UserBundle\\Controller\\UserController::searchAction',  '_route' => 'user_search',);
                }
                not_user_search:

                // user_pagesearch
                if (rtrim($pathinfo, '/') === '/user/manager/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_user_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'user_pagesearch');
                    }

                    return array (  '_controller' => 'Bo\\UserBundle\\Controller\\UserController::pagesearchAction',  '_route' => 'user_pagesearch',);
                }
                not_user_pagesearch:

                // user_new
                if ($pathinfo === '/user/manager/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_user_new;
                    }

                    return array (  '_controller' => 'Bo\\UserBundle\\Controller\\UserController::newAction',  '_route' => 'user_new',);
                }
                not_user_new:

                // user_edit
                if (preg_match('#^/user/manager/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_user_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'user_edit')), array (  '_controller' => 'Bo\\UserBundle\\Controller\\UserController::editAction',));
                }
                not_user_edit:

                // user_delete
                if (preg_match('#^/user/manager/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_user_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'user_delete')), array (  '_controller' => 'Bo\\UserBundle\\Controller\\UserController::deleteAction',));
                }
                not_user_delete:

                // user_send_account
                if (preg_match('#^/user/manager/(?P<id>[^/]++)/sendmail/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_user_send_account;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'user_send_account');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'user_send_account')), array (  '_controller' => 'Bo\\UserBundle\\Controller\\UserController::sendmailAction',));
                }
                not_user_send_account:

                // user_initialize_account
                if (preg_match('#^/user/manager/(?P<id>[^/]++)/initialize/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_user_initialize_account;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'user_initialize_account');
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'user_initialize_account')), array (  '_controller' => 'Bo\\UserBundle\\Controller\\UserController::initializeAction',));
                }
                not_user_initialize_account:

            }

            if (0 === strpos($pathinfo, '/user/r')) {
                // bo_user_resetting_password
                if (rtrim($pathinfo, '/') === '/user/resetting') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_bo_user_resetting_password;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'bo_user_resetting_password');
                    }

                    return array (  '_controller' => 'Bo\\UserBundle\\Controller\\DefaultController::resettingAction',  '_route' => 'bo_user_resetting_password',);
                }
                not_bo_user_resetting_password:

                if (0 === strpos($pathinfo, '/user/rights')) {
                    // rights_new
                    if ($pathinfo === '/user/rights/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_rights_new;
                        }

                        return array (  '_controller' => 'Bo\\UserBundle\\Controller\\RightsController::newAction',  '_route' => 'rights_new',);
                    }
                    not_rights_new:

                    // rights_update
                    if ($pathinfo === '/user/rights/update') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_rights_update;
                        }

                        return array (  '_controller' => 'Bo\\UserBundle\\Controller\\RightsController::updateAction',  '_route' => 'rights_update',);
                    }
                    not_rights_update:

                    // rights_create
                    if (preg_match('#^/user/rights/(?P<idprofil>[^/]++)/create$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_rights_create;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'rights_create')), array (  '_controller' => 'Bo\\UserBundle\\Controller\\RightsController::createAction',));
                    }
                    not_rights_create:

                    // rights_add
                    if (preg_match('#^/user/rights/(?P<idprofil>[^/]++)/add$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_rights_add;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'rights_add')), array (  '_controller' => 'Bo\\UserBundle\\Controller\\RightsController::addAction',));
                    }
                    not_rights_add:

                    // rights_show
                    if ($pathinfo === '/user/rights/show') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_rights_show;
                        }

                        return array (  '_controller' => 'Bo\\UserBundle\\Controller\\RightsController::showAction',  '_route' => 'rights_show',);
                    }
                    not_rights_show:

                    // rights_edit
                    if (preg_match('#^/user/rights/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_rights_edit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'rights_edit')), array (  '_controller' => 'Bo\\UserBundle\\Controller\\RightsController::editAction',));
                    }
                    not_rights_edit:

                    // rights_enableall
                    if (preg_match('#^/user/rights/(?P<id>[^/]++)/enableall$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_rights_enableall;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'rights_enableall')), array (  '_controller' => 'Bo\\UserBundle\\Controller\\RightsController::enableallAction',));
                    }
                    not_rights_enableall:

                    // rights_disable
                    if (preg_match('#^/user/rights/(?P<id>[^/]++)/disable$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_rights_disable;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'rights_disable')), array (  '_controller' => 'Bo\\UserBundle\\Controller\\RightsController::disableAction',));
                    }
                    not_rights_disable:

                    // rights_srubric_load
                    if (rtrim($pathinfo, '/') === '/user/rights/rubric/reload') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_rights_srubric_load;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'rights_srubric_load');
                        }

                        return array (  '_controller' => 'Bo\\UserBundle\\Controller\\RightsController::srubricAction',  '_route' => 'rights_srubric_load',);
                    }
                    not_rights_srubric_load:

                }

            }

            if (0 === strpos($pathinfo, '/user/log')) {
                if (0 === strpos($pathinfo, '/user/login')) {
                    // fos_user_security_login
                    if ($pathinfo === '/user/login') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_fos_user_security_login;
                        }

                        return array (  '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::loginAction',  '_route' => 'fos_user_security_login',);
                    }
                    not_fos_user_security_login:

                    // fos_user_security_check
                    if ($pathinfo === '/user/login_check') {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_fos_user_security_check;
                        }

                        return array (  '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::checkAction',  '_route' => 'fos_user_security_check',);
                    }
                    not_fos_user_security_check:

                }

                // fos_user_security_logout
                if ($pathinfo === '/user/logout') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_fos_user_security_logout;
                    }

                    return array (  '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::logoutAction',  '_route' => 'fos_user_security_logout',);
                }
                not_fos_user_security_logout:

            }

            if (0 === strpos($pathinfo, '/user/profile')) {
                // fos_user_profile_show
                if (rtrim($pathinfo, '/') === '/user/profile') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_fos_user_profile_show;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'fos_user_profile_show');
                    }

                    return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ProfileController::showAction',  '_route' => 'fos_user_profile_show',);
                }
                not_fos_user_profile_show:

                // fos_user_profile_edit
                if ($pathinfo === '/user/profile/edit') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_fos_user_profile_edit;
                    }

                    return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ProfileController::editAction',  '_route' => 'fos_user_profile_edit',);
                }
                not_fos_user_profile_edit:

            }

            if (0 === strpos($pathinfo, '/user/re')) {
                if (0 === strpos($pathinfo, '/user/register')) {
                    // fos_user_registration_register
                    if (rtrim($pathinfo, '/') === '/user/register') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_fos_user_registration_register;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'fos_user_registration_register');
                        }

                        return array (  '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::registerAction',  '_route' => 'fos_user_registration_register',);
                    }
                    not_fos_user_registration_register:

                    if (0 === strpos($pathinfo, '/user/register/c')) {
                        // fos_user_registration_check_email
                        if ($pathinfo === '/user/register/check-email') {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_fos_user_registration_check_email;
                            }

                            return array (  '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::checkEmailAction',  '_route' => 'fos_user_registration_check_email',);
                        }
                        not_fos_user_registration_check_email:

                        if (0 === strpos($pathinfo, '/user/register/confirm')) {
                            // fos_user_registration_confirm
                            if (preg_match('#^/user/register/confirm/(?P<token>[^/]++)$#s', $pathinfo, $matches)) {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_fos_user_registration_confirm;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'fos_user_registration_confirm')), array (  '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::confirmAction',));
                            }
                            not_fos_user_registration_confirm:

                            // fos_user_registration_confirmed
                            if ($pathinfo === '/user/register/confirmed') {
                                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                    $allow = array_merge($allow, array('GET', 'HEAD'));
                                    goto not_fos_user_registration_confirmed;
                                }

                                return array (  '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::confirmedAction',  '_route' => 'fos_user_registration_confirmed',);
                            }
                            not_fos_user_registration_confirmed:

                        }

                    }

                }

                if (0 === strpos($pathinfo, '/user/resetting')) {
                    // fos_user_resetting_request
                    if ($pathinfo === '/user/resetting/request') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_fos_user_resetting_request;
                        }

                        return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::requestAction',  '_route' => 'fos_user_resetting_request',);
                    }
                    not_fos_user_resetting_request:

                    // fos_user_resetting_send_email
                    if ($pathinfo === '/user/resetting/send-email') {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_fos_user_resetting_send_email;
                        }

                        return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::sendEmailAction',  '_route' => 'fos_user_resetting_send_email',);
                    }
                    not_fos_user_resetting_send_email:

                    // fos_user_resetting_check_email
                    if ($pathinfo === '/user/resetting/check-email') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_fos_user_resetting_check_email;
                        }

                        return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::checkEmailAction',  '_route' => 'fos_user_resetting_check_email',);
                    }
                    not_fos_user_resetting_check_email:

                    // fos_user_resetting_reset
                    if (0 === strpos($pathinfo, '/user/resetting/reset') && preg_match('#^/user/resetting/reset/(?P<token>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_fos_user_resetting_reset;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fos_user_resetting_reset')), array (  '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::resetAction',));
                    }
                    not_fos_user_resetting_reset:

                }

            }

            // fos_user_change_password
            if ($pathinfo === '/user/fc/change-password/first-connexion/change-password') {
                if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                    goto not_fos_user_change_password;
                }

                return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ChangePasswordController::changePassword2Action',  '_route' => 'fos_user_change_password',);
            }
            not_fos_user_change_password:

            // bo_user_logout
            if ($pathinfo === '/user/logout_redirect') {
                if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                    goto not_bo_user_logout;
                }

                return array (  '_controller' => 'Bo\\UserBundle\\Controller\\UserController::logoutAction',  '_route' => 'bo_user_logout',);
            }
            not_bo_user_logout:

            // bo_user_login
            if (rtrim($pathinfo, '/') === '/user/user/login') {
                if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                    goto not_bo_user_login;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_user_login');
                }

                return array (  '_controller' => 'Bo\\UserBundle\\Controller\\UserController::loginAction',  '_route' => 'bo_user_login',);
            }
            not_bo_user_login:

        }

        if (0 === strpos($pathinfo, '/calendar')) {
            if (0 === strpos($pathinfo, '/calendar/event')) {
                // event_index
                if (rtrim($pathinfo, '/') === '/calendar/event') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_event_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'event_index');
                    }

                    return array (  '_controller' => 'Bo\\CalendarBundle\\Controller\\EventController::indexAction',  '_route' => 'event_index',);
                }
                not_event_index:

                // event_show
                if (preg_match('#^/calendar/event/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_event_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'event_show')), array (  '_controller' => 'Bo\\CalendarBundle\\Controller\\EventController::showAction',));
                }
                not_event_show:

                // event_new
                if ($pathinfo === '/calendar/event/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_event_new;
                    }

                    return array (  '_controller' => 'Bo\\CalendarBundle\\Controller\\EventController::newAction',  '_route' => 'event_new',);
                }
                not_event_new:

                // event_edit
                if (preg_match('#^/calendar/event/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_event_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'event_edit')), array (  '_controller' => 'Bo\\CalendarBundle\\Controller\\EventController::editAction',));
                }
                not_event_edit:

                // event_delete
                if (preg_match('#^/calendar/event/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_event_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'event_delete')), array (  '_controller' => 'Bo\\CalendarBundle\\Controller\\EventController::deleteAction',));
                }
                not_event_delete:

            }

            // calendar_index
            if (rtrim($pathinfo, '/') === '/calendar') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'calendar_index');
                }

                return array (  '_controller' => 'Bo\\CalendarBundle\\Controller\\DefaultController::indexAction',  '_route' => 'calendar_index',);
            }

            // calendar_event_list
            if ($pathinfo === '/calendar/list') {
                return array (  '_controller' => 'Bo\\CalendarBundle\\Controller\\EventController::listAction',  '_route' => 'calendar_event_list',);
            }

            if (0 === strpos($pathinfo, '/calendar/by_')) {
                // calendar_event_list_by_day
                if (0 === strpos($pathinfo, '/calendar/by_day') && preg_match('#^/calendar/by_day/(?P<year>[^/]++)/(?P<month>[^/]++)/(?P<day>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'calendar_event_list_by_day')), array (  '_controller' => 'Bo\\CalendarBundle\\Controller\\EventController::listByDayAction',));
                }

                // calendar_event_list_by_week
                if (0 === strpos($pathinfo, '/calendar/by_week') && preg_match('#^/calendar/by_week/(?P<year>[^/]++)/(?P<month>[^/]++)/(?P<day>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'calendar_event_list_by_week')), array (  '_controller' => 'Bo\\CalendarBundle\\Controller\\EventController::listByWeekAction',));
                }

                // calendar_event_list_by_month
                if (0 === strpos($pathinfo, '/calendar/by_month') && preg_match('#^/calendar/by_month/(?P<year>[^/]++)/(?P<month>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'calendar_event_list_by_month')), array (  '_controller' => 'Bo\\CalendarBundle\\Controller\\EventController::listByMonthAction',));
                }

            }

            // calendar_event_add
            if ($pathinfo === '/calendar/add') {
                return array (  '_controller' => 'Bo\\CalendarBundle\\Controller\\EventController::addAction',  '_route' => 'calendar_event_add',);
            }

            // calendar_event_edit
            if (preg_match('#^/calendar/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'calendar_event_edit')), array (  '_controller' => 'Bo\\CalendarBundle\\Controller\\EventController::editAction',));
            }

            // calendar_event_delete
            if (preg_match('#^/calendar/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'calendar_event_delete')), array (  '_controller' => 'Bo\\CalendarBundle\\Controller\\EventController::deleteAction',));
            }

            // calendar_mini_calendar
            if (0 === strpos($pathinfo, '/calendar/mini') && preg_match('#^/calendar/mini/(?P<year>[^/]++)/(?P<month>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'calendar_mini_calendar')), array (  '_controller' => 'BladeTester\\CalendarBundle\\Controller\\CalendarController::showMiniAction',));
            }

            if (0 === strpos($pathinfo, '/calendar/calendar')) {
                if (0 === strpos($pathinfo, '/calendar/calendar/category')) {
                    // calendar_category_edit
                    if (preg_match('#^/calendar/calendar/category/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'calendar_category_edit')), array (  '_controller' => 'BladeTester\\CalendarBundle\\Controller\\CategoryController::editAction',));
                    }

                    // calendar_category_delete
                    if (preg_match('#^/calendar/calendar/category/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'calendar_category_delete')), array (  '_controller' => 'BladeTester\\CalendarBundle\\Controller\\CategoryController::deleteAction',));
                    }

                    // calendar_category_add
                    if ($pathinfo === '/calendar/calendar/category/add') {
                        return array (  '_controller' => 'BladeTester\\CalendarBundle\\Controller\\CategoryController::addAction',  '_route' => 'calendar_category_add',);
                    }

                }

                if (0 === strpos($pathinfo, '/calendar/calendar/settings')) {
                    // calendar_settings_update
                    if ($pathinfo === '/calendar/calendar/settings/update') {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_calendar_settings_update;
                        }

                        return array (  '_controller' => 'BladeTester\\CalendarBundle\\Controller\\SettingsController::updateAction',  '_route' => 'calendar_settings_update',);
                    }
                    not_calendar_settings_update:

                    // calendar_settings
                    if ($pathinfo === '/calendar/calendar/settings') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_calendar_settings;
                        }

                        return array (  '_controller' => 'BladeTester\\CalendarBundle\\Controller\\SettingsController::indexAction',  '_route' => 'calendar_settings',);
                    }
                    not_calendar_settings:

                }

            }

        }

        if (0 === strpos($pathinfo, '/admin')) {
            // bo_admin_homepage
            if (rtrim($pathinfo, '/') === '/admin') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_admin_homepage');
                }

                $requiredSchemes = array (  'https' => 0,);
                if (!isset($requiredSchemes[$this->context->getScheme()])) {
                    return $this->redirect($pathinfo, 'bo_admin_homepage', key($requiredSchemes));
                }

                return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DefaultController::indexAction',  '_route' => 'bo_admin_homepage',);
            }

            // bo_admin_loadschedule
            if (rtrim($pathinfo, '/') === '/admin/schedule/load') {
                if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                    goto not_bo_admin_loadschedule;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_admin_loadschedule');
                }

                $requiredSchemes = array (  'https' => 0,);
                if (!isset($requiredSchemes[$this->context->getScheme()])) {
                    return $this->redirect($pathinfo, 'bo_admin_loadschedule', key($requiredSchemes));
                }

                return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DefaultController::loadscheduleAction',  '_route' => 'bo_admin_loadschedule',);
            }
            not_bo_admin_loadschedule:

            // bo_superadmin_homepage
            if (rtrim($pathinfo, '/') === '/admin/override') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_superadmin_homepage');
                }

                $requiredSchemes = array (  'https' => 0,);
                if (!isset($requiredSchemes[$this->context->getScheme()])) {
                    return $this->redirect($pathinfo, 'bo_superadmin_homepage', key($requiredSchemes));
                }

                return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DefaultController::overrideAction',  '_route' => 'bo_superadmin_homepage',);
            }

            // bo_admin_maintenance
            if (rtrim($pathinfo, '/') === '/admin/maintenance/inprogress') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_admin_maintenance');
                }

                $requiredSchemes = array (  'https' => 0,);
                if (!isset($requiredSchemes[$this->context->getScheme()])) {
                    return $this->redirect($pathinfo, 'bo_admin_maintenance', key($requiredSchemes));
                }

                return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DefaultController::maintenanceAction',  '_route' => 'bo_admin_maintenance',);
            }

            // bo_admin_firsttime
            if (rtrim($pathinfo, '/') === '/admin/first/connexion') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_admin_firsttime');
                }

                $requiredSchemes = array (  'https' => 0,);
                if (!isset($requiredSchemes[$this->context->getScheme()])) {
                    return $this->redirect($pathinfo, 'bo_admin_firsttime', key($requiredSchemes));
                }

                return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DefaultController::firsttimeAction',  '_route' => 'bo_admin_firsttime',);
            }

            // bo_admin_edit
            if ($pathinfo === '/admin/account/edit') {
                if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                    goto not_bo_admin_edit;
                }

                $requiredSchemes = array (  'https' => 0,);
                if (!isset($requiredSchemes[$this->context->getScheme()])) {
                    return $this->redirect($pathinfo, 'bo_admin_edit', key($requiredSchemes));
                }

                return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DefaultController::editAction',  '_route' => 'bo_admin_edit',);
            }
            not_bo_admin_edit:

            // bo_admin_language
            if (preg_match('#^/admin/(?P<_locale>en|fr)/?$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                    goto not_bo_admin_language;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_admin_language');
                }

                $requiredSchemes = array (  'https' => 0,);
                if (!isset($requiredSchemes[$this->context->getScheme()])) {
                    return $this->redirect($pathinfo, 'bo_admin_language', key($requiredSchemes));
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'bo_admin_language')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DefaultController::languageAction',));
            }
            not_bo_admin_language:

            // bo_admin_user_update
            if (0 === strpos($pathinfo, '/admin/user/update') && preg_match('#^/admin/user/update/(?P<idemployee>[^/]++)$#s', $pathinfo, $matches)) {
                $requiredSchemes = array (  'https' => 0,);
                if (!isset($requiredSchemes[$this->context->getScheme()])) {
                    return $this->redirect($pathinfo, 'bo_admin_user_update', key($requiredSchemes));
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'bo_admin_user_update')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DefaultController::updateAction',));
            }

            if (0 === strpos($pathinfo, '/admin/campus')) {
                // campus_index
                if (rtrim($pathinfo, '/') === '/admin/campus') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_campus_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'campus_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'campus_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CampusController::indexAction',  '_route' => 'campus_index',);
                }
                not_campus_index:

                // campus_show
                if (preg_match('#^/admin/campus/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_campus_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'campus_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'campus_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CampusController::showAction',));
                }
                not_campus_show:

                // campus_new
                if ($pathinfo === '/admin/campus/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_campus_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'campus_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CampusController::newAction',  '_route' => 'campus_new',);
                }
                not_campus_new:

                // campus_edit
                if (preg_match('#^/admin/campus/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_campus_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'campus_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'campus_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CampusController::editAction',));
                }
                not_campus_edit:

                // campus_delete
                if (preg_match('#^/admin/campus/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_campus_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'campus_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'campus_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CampusController::deleteAction',));
                }
                not_campus_delete:

            }

            if (0 === strpos($pathinfo, '/admin/teamcontacts')) {
                // teamcontacts_index
                if (rtrim($pathinfo, '/') === '/admin/teamcontacts') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_teamcontacts_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'teamcontacts_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'teamcontacts_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TeamContactsController::indexAction',  '_route' => 'teamcontacts_index',);
                }
                not_teamcontacts_index:

                // teamcontacts_list
                if (rtrim($pathinfo, '/') === '/admin/teamcontacts/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_teamcontacts_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'teamcontacts_list');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'teamcontacts_list', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TeamContactsController::listAction',  '_route' => 'teamcontacts_list',);
                }
                not_teamcontacts_list:

                // teamcontacts_page
                if (0 === strpos($pathinfo, '/admin/teamcontacts/page') && preg_match('#^/admin/teamcontacts/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'teamcontacts_page', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'teamcontacts_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TeamContactsController::pageAction',));
                }

                // teamcontacts_show
                if (preg_match('#^/admin/teamcontacts/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_teamcontacts_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'teamcontacts_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'teamcontacts_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TeamContactsController::showAction',));
                }
                not_teamcontacts_show:

                // teamcontacts_new
                if ($pathinfo === '/admin/teamcontacts/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_teamcontacts_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'teamcontacts_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TeamContactsController::newAction',  '_route' => 'teamcontacts_new',);
                }
                not_teamcontacts_new:

                // teamcontacts_edit
                if (preg_match('#^/admin/teamcontacts/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_teamcontacts_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'teamcontacts_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'teamcontacts_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TeamContactsController::editAction',));
                }
                not_teamcontacts_edit:

                // teamcontacts_search
                if (rtrim($pathinfo, '/') === '/admin/teamcontacts/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_teamcontacts_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'teamcontacts_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'teamcontacts_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TeamContactsController::searchAction',  '_route' => 'teamcontacts_search',);
                }
                not_teamcontacts_search:

                // teamcontacts_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/teamcontacts/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_teamcontacts_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'teamcontacts_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'teamcontacts_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TeamContactsController::pagesearchAction',  '_route' => 'teamcontacts_pagesearch',);
                }
                not_teamcontacts_pagesearch:

                // teamcontacts_delete
                if (preg_match('#^/admin/teamcontacts/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_teamcontacts_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'teamcontacts_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'teamcontacts_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TeamContactsController::deleteAction',));
                }
                not_teamcontacts_delete:

                if (0 === strpos($pathinfo, '/admin/teamcontacts/extra')) {
                    // teamcontacts_extrasearch
                    if (rtrim($pathinfo, '/') === '/admin/teamcontacts/extrasearch') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_teamcontacts_extrasearch;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'teamcontacts_extrasearch');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'teamcontacts_extrasearch', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TeamContactsController::extrasearchAction',  '_route' => 'teamcontacts_extrasearch',);
                    }
                    not_teamcontacts_extrasearch:

                    // teamcontacts_xls
                    if (rtrim($pathinfo, '/') === '/admin/teamcontacts/extract/xls') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_teamcontacts_xls;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'teamcontacts_xls');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'teamcontacts_xls', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TeamContactsController::xlsAction',  '_route' => 'teamcontacts_xls',);
                    }
                    not_teamcontacts_xls:

                }

            }

            if (0 === strpos($pathinfo, '/admin/e')) {
                if (0 === strpos($pathinfo, '/admin/employees')) {
                    // employee_index
                    if (rtrim($pathinfo, '/') === '/admin/employees') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_employee_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employee_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::indexAction',  '_route' => 'employee_index',);
                    }
                    not_employee_index:

                    // employee_active
                    if (rtrim($pathinfo, '/') === '/admin/employees/active') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_employee_active;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employee_active');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_active', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::activeAction',  '_route' => 'employee_active',);
                    }
                    not_employee_active:

                    // employee_list
                    if (rtrim($pathinfo, '/') === '/admin/employees/list') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_employee_list;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employee_list');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_list', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::listAction',  '_route' => 'employee_list',);
                    }
                    not_employee_list:

                    // employee_page
                    if (0 === strpos($pathinfo, '/admin/employees/page') && preg_match('#^/admin/employees/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_page', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::pageAction',));
                    }

                    // employee_back
                    if (rtrim($pathinfo, '/') === '/admin/employees/back') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_employee_back;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employee_back');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_back', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::backAction',  '_route' => 'employee_back',);
                    }
                    not_employee_back:

                    // employee_show
                    if (preg_match('#^/admin/employees/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_employee_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::showAction',));
                    }
                    not_employee_show:

                    // employee_list_absence
                    if (preg_match('#^/admin/employees/(?P<id>[^/]++)/(?P<offset>[^/]++)/list/absences$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_employee_list_absence;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_list_absence', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_list_absence')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::listabsenceAction',));
                    }
                    not_employee_list_absence:

                    // employee_schedule
                    if (preg_match('#^/admin/employees/(?P<id>[^/]++)/schedule$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_employee_schedule;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_schedule', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_schedule')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::scheduleAction',));
                    }
                    not_employee_schedule:

                    // employee_extract_schedule
                    if ($pathinfo === '/admin/employees/extract/schedule') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_extract_schedule;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_extract_schedule', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::extractscheduleAction',  '_route' => 'employee_extract_schedule',);
                    }
                    not_employee_extract_schedule:

                    // employee_schedule_load
                    if ($pathinfo === '/admin/employees/schedule/load') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_schedule_load;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_schedule_load', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::loadscheduleAction',  '_route' => 'employee_schedule_load',);
                    }
                    not_employee_schedule_load:

                    // employee_add_schedule
                    if (preg_match('#^/admin/employees/(?P<id>[^/]++)/add/schedule$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_add_schedule;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_add_schedule', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_add_schedule')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::addscheduleAction',));
                    }
                    not_employee_add_schedule:

                    // employee_setting
                    if (preg_match('#^/admin/employees/(?P<id>[^/]++)/setting$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_setting;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_setting', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_setting')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::settingAction',));
                    }
                    not_employee_setting:

                    // employee_agenda
                    if (preg_match('#^/admin/employees/(?P<id>[^/]++)/agenda$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_agenda;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_agenda', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_agenda')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::agendaAction',));
                    }
                    not_employee_agenda:

                    // employee_invitation_show
                    if (preg_match('#^/admin/employees/(?P<id>[^/]++)/show/invitation/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_invitation_show;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employee_invitation_show');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_invitation_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_invitation_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::showinviteAction',));
                    }
                    not_employee_invitation_show:

                    // employee_user_create
                    if (preg_match('#^/admin/employees/(?P<id>[^/]++)/createuser$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_employee_user_create;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_user_create', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_user_create')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::createuserAction',));
                    }
                    not_employee_user_create:

                    // employee_new
                    if ($pathinfo === '/admin/employees/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::newAction',  '_route' => 'employee_new',);
                    }
                    not_employee_new:

                    // employee_securitycote_new
                    if (preg_match('#^/admin/employees/(?P<idemployee>[^/]++)/securitycote/new/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_securitycote_new;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employee_securitycote_new');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_securitycote_new', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_securitycote_new')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::securitycoteAction',));
                    }
                    not_employee_securitycote_new:

                    // employee_securitycote_delete
                    if (preg_match('#^/admin/employees/(?P<id>[^/]++)/securitycote/delete/$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_employee_securitycote_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_securitycote_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_securitycote_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::securitycotedeleteAction',));
                    }
                    not_employee_securitycote_delete:

                    // employee_securitycote_edit
                    if (preg_match('#^/admin/employees/(?P<id>[^/]++)/securitycote/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_securitycote_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_securitycote_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_securitycote_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::editsecuritycoteAction',));
                    }
                    not_employee_securitycote_edit:

                    // employee_newbatch
                    if ($pathinfo === '/admin/employees/newbatch') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_newbatch;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_newbatch', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::newbatchAction',  '_route' => 'employee_newbatch',);
                    }
                    not_employee_newbatch:

                    // employee_edit
                    if (preg_match('#^/admin/employees/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::editAction',));
                    }
                    not_employee_edit:

                    // employee_search
                    if (rtrim($pathinfo, '/') === '/admin/employees/search') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_search;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employee_search');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_search', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::searchAction',  '_route' => 'employee_search',);
                    }
                    not_employee_search:

                    if (0 === strpos($pathinfo, '/admin/employees/a')) {
                        // employee_agenda_search
                        if (rtrim($pathinfo, '/') === '/admin/employees/agenda/search') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_employee_agenda_search;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'employee_agenda_search');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'employee_agenda_search', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::agendasearchAction',  '_route' => 'employee_agenda_search',);
                        }
                        not_employee_agenda_search:

                        // employee_teacher_available
                        if (rtrim($pathinfo, '/') === '/admin/employees/available') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_employee_teacher_available;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'employee_teacher_available');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'employee_teacher_available', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::availableAction',  '_route' => 'employee_teacher_available',);
                        }
                        not_employee_teacher_available:

                    }

                    // employee_pagesearch
                    if (rtrim($pathinfo, '/') === '/admin/employees/pagesearch') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_pagesearch;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employee_pagesearch');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_pagesearch', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::pagesearchAction',  '_route' => 'employee_pagesearch',);
                    }
                    not_employee_pagesearch:

                    // employee_delete
                    if (preg_match('#^/admin/employees/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_employee_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::deleteAction',));
                    }
                    not_employee_delete:

                    // employee_update
                    if (rtrim($pathinfo, '/') === '/admin/employees/update') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_update;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employee_update');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_update', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::updateAction',  '_route' => 'employee_update',);
                    }
                    not_employee_update:

                    // mail_manager
                    if (0 === strpos($pathinfo, '/admin/employees/email') && preg_match('#^/admin/employees/email/(?P<name>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_mail_manager;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'mail_manager', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'mail_manager')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::mailAction',));
                    }
                    not_mail_manager:

                    // employee_create_status
                    if (rtrim($pathinfo, '/') === '/admin/employees/create/status') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_create_status;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employee_create_status');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_create_status', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::createstatusAction',  '_route' => 'employee_create_status',);
                    }
                    not_employee_create_status:

                    // employee_send_login
                    if (rtrim($pathinfo, '/') === '/admin/employees/send/login') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_send_login;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employee_send_login');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_send_login', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::sendloginAction',  '_route' => 'employee_send_login',);
                    }
                    not_employee_send_login:

                    // employee_sendlogin
                    if (preg_match('#^/admin/employees/(?P<id>[^/]++)/sendlogin/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_sendlogin;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employee_sendlogin');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_sendlogin', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_sendlogin')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::sendlogintwoAction',));
                    }
                    not_employee_sendlogin:

                    // employee_sendmail
                    if (rtrim($pathinfo, '/') === '/admin/employees/sendmail') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_sendmail;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employee_sendmail');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_sendmail', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::sendmailAction',  '_route' => 'employee_sendmail',);
                    }
                    not_employee_sendmail:

                    if (0 === strpos($pathinfo, '/admin/employees/create')) {
                        // employee_create_category
                        if (rtrim($pathinfo, '/') === '/admin/employees/create/category') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_employee_create_category;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'employee_create_category');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'employee_create_category', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::createcategoryAction',  '_route' => 'employee_create_category',);
                        }
                        not_employee_create_category:

                        // employee_create_language
                        if (rtrim($pathinfo, '/') === '/admin/employees/create/language') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_employee_create_language;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'employee_create_language');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'employee_create_language', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::createlanguageAction',  '_route' => 'employee_create_language',);
                        }
                        not_employee_create_language:

                    }

                    if (0 === strpos($pathinfo, '/admin/employees/extra')) {
                        // employee_extrasearch
                        if (rtrim($pathinfo, '/') === '/admin/employees/extrasearch') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_employee_extrasearch;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'employee_extrasearch');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'employee_extrasearch', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::extrasearchAction',  '_route' => 'employee_extrasearch',);
                        }
                        not_employee_extrasearch:

                        // employee_xls
                        if (rtrim($pathinfo, '/') === '/admin/employees/extract/xls') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_employee_xls;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'employee_xls');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'employee_xls', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::xlsAction',  '_route' => 'employee_xls',);
                        }
                        not_employee_xls:

                    }

                    if (0 === strpos($pathinfo, '/admin/employees/absences')) {
                        // employee_absence_day
                        if (rtrim($pathinfo, '/') === '/admin/employees/absences/today') {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_employee_absence_day;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'employee_absence_day');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'employee_absence_day', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::dayabsencesAction',  '_route' => 'employee_absence_day',);
                        }
                        not_employee_absence_day:

                        // employee_absence_index
                        if (rtrim($pathinfo, '/') === '/admin/employees/absences') {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_employee_absence_index;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'employee_absence_index');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'employee_absence_index', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::absencesAction',  '_route' => 'employee_absence_index',);
                        }
                        not_employee_absence_index:

                    }

                    // employee_page_absences
                    if (preg_match('#^/admin/employees/(?P<option>[^/]++)/absences/page/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_employee_page_absences;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employee_page_absences');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_page_absences', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_page_absences')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::absencespageAction',));
                    }
                    not_employee_page_absences:

                    // employee_create_absence
                    if (preg_match('#^/admin/employees/(?P<idemployee>[^/]++)/add/absence/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_create_absence;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employee_create_absence');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_create_absence', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_create_absence')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::addabsenceAction',));
                    }
                    not_employee_create_absence:

                    // employee_show_absence
                    if (preg_match('#^/admin/employees/(?P<id>[^/]++)/show/absence/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_employee_show_absence;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employee_show_absence');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_show_absence', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_show_absence')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::showabsenceAction',));
                    }
                    not_employee_show_absence:

                    // employee_edit_absence
                    if (preg_match('#^/admin/employees/(?P<id>[^/]++)/edit/absence/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_edit_absence;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employee_edit_absence');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_edit_absence', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_edit_absence')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::editabsenceAction',));
                    }
                    not_employee_edit_absence:

                    // employee_substitution_group
                    if (preg_match('#^/admin/employees/(?P<idgroup>[^/]++)/(?P<idabsence>[^/]++)/substitution/group/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_substitution_group;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employee_substitution_group');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_substitution_group', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_substitution_group')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::subsgroupAction',));
                    }
                    not_employee_substitution_group:

                    // employee_substitution_contract
                    if (preg_match('#^/admin/employees/(?P<idcontract>[^/]++)/(?P<idabsence>[^/]++)/substitution/contract/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_substitution_contract;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employee_substitution_contract');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_substitution_contract', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_substitution_contract')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::subscontAction',));
                    }
                    not_employee_substitution_contract:

                    // employee_delete_absence
                    if (preg_match('#^/admin/employees/(?P<id>[^/]++)/delete/absence/$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_employee_delete_absence;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_delete_absence', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employee_delete_absence')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::deleteabsenceAction',));
                    }
                    not_employee_delete_absence:

                    // employee_right_show
                    if (rtrim($pathinfo, '/') === '/admin/employees/right/show') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_employee_right_show;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employee_right_show');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'employee_right_show', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmployeeController::rightshowAction',  '_route' => 'employee_right_show',);
                    }
                    not_employee_right_show:

                }

                if (0 === strpos($pathinfo, '/admin/epj')) {
                    // emppj_index
                    if (rtrim($pathinfo, '/') === '/admin/epj') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_emppj_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'emppj_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'emppj_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmppjController::indexAction',  '_route' => 'emppj_index',);
                    }
                    not_emppj_index:

                    // emppj_show
                    if (preg_match('#^/admin/epj/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_emppj_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'emppj_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'emppj_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmppjController::showAction',));
                    }
                    not_emppj_show:

                    // emppj_new
                    if ($pathinfo === '/admin/epj/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_emppj_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'emppj_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmppjController::newAction',  '_route' => 'emppj_new',);
                    }
                    not_emppj_new:

                    // emppj_edit
                    if (preg_match('#^/admin/epj/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_emppj_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'emppj_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'emppj_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmppjController::editAction',));
                    }
                    not_emppj_edit:

                    // emppj_delete
                    if (preg_match('#^/admin/epj/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_emppj_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'emppj_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'emppj_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EmppjController::deleteAction',));
                    }
                    not_emppj_delete:

                }

            }

            if (0 === strpos($pathinfo, '/admin/supemployees')) {
                // supemployee_index
                if (rtrim($pathinfo, '/') === '/admin/supemployees') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_supemployee_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'supemployee_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'supemployee_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SupEmployeeController::indexAction',  '_route' => 'supemployee_index',);
                }
                not_supemployee_index:

                // supemployee_list
                if (rtrim($pathinfo, '/') === '/admin/supemployees/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_supemployee_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'supemployee_list');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'supemployee_list', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SupEmployeeController::listAction',  '_route' => 'supemployee_list',);
                }
                not_supemployee_list:

                // supemployee_page
                if (0 === strpos($pathinfo, '/admin/supemployees/page') && preg_match('#^/admin/supemployees/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'supemployee_page', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'supemployee_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SupEmployeeController::pageAction',));
                }

                // supemployee_show
                if (preg_match('#^/admin/supemployees/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_supemployee_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'supemployee_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'supemployee_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SupEmployeeController::showAction',));
                }
                not_supemployee_show:

                // supemployee_new
                if ($pathinfo === '/admin/supemployees/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_supemployee_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'supemployee_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SupEmployeeController::newAction',  '_route' => 'supemployee_new',);
                }
                not_supemployee_new:

                // supemployee_edit
                if (preg_match('#^/admin/supemployees/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_supemployee_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'supemployee_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'supemployee_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SupEmployeeController::editAction',));
                }
                not_supemployee_edit:

                // supemployee_delete
                if (preg_match('#^/admin/supemployees/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_supemployee_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'supemployee_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'supemployee_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SupEmployeeController::deleteAction',));
                }
                not_supemployee_delete:

                // supemployee_search
                if (rtrim($pathinfo, '/') === '/admin/supemployees/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_supemployee_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'supemployee_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'supemployee_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SupEmployeeController::searchAction',  '_route' => 'supemployee_search',);
                }
                not_supemployee_search:

                // supemployee_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/supemployees/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_supemployee_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'supemployee_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'supemployee_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SupEmployeeController::pagesearchAction',  '_route' => 'supemployee_pagesearch',);
                }
                not_supemployee_pagesearch:

                if (0 === strpos($pathinfo, '/admin/supemployees/extra')) {
                    // supemployee_extrasearch
                    if (rtrim($pathinfo, '/') === '/admin/supemployees/extrasearch') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_supemployee_extrasearch;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'supemployee_extrasearch');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'supemployee_extrasearch', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SupEmployeeController::extrasearchAction',  '_route' => 'supemployee_extrasearch',);
                    }
                    not_supemployee_extrasearch:

                    // supemployee_xls
                    if (rtrim($pathinfo, '/') === '/admin/supemployees/extract/xls') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_supemployee_xls;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'supemployee_xls');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'supemployee_xls', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SupEmployeeController::xlsAction',  '_route' => 'supemployee_xls',);
                    }
                    not_supemployee_xls:

                }

            }

            if (0 === strpos($pathinfo, '/admin/c')) {
                if (0 === strpos($pathinfo, '/admin/contracts')) {
                    // contracts_index
                    if (rtrim($pathinfo, '/') === '/admin/contracts') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_contracts_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::indexAction',  '_route' => 'contracts_index',);
                    }
                    not_contracts_index:

                    // contracts_list
                    if ($pathinfo === '/admin/contracts/list') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_contracts_list;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_list', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::listAction',  '_route' => 'contracts_list',);
                    }
                    not_contracts_list:

                    // contracts_upcoming
                    if (rtrim($pathinfo, '/') === '/admin/contracts/upcoming') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_upcoming;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_upcoming');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_upcoming', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::upcomingAction',  '_route' => 'contracts_upcoming',);
                    }
                    not_contracts_upcoming:

                    // contracts_back
                    if (rtrim($pathinfo, '/') === '/admin/contracts/back') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_contracts_back;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_back');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_back', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::backAction',  '_route' => 'contracts_back',);
                    }
                    not_contracts_back:

                    // contracts_page
                    if (preg_match('#^/admin/contracts/(?P<option>[^/]++)/page$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_contracts_page;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_page', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::pageAction',));
                    }
                    not_contracts_page:

                    // contracts_show
                    if (preg_match('#^/admin/contracts/(?P<id>[^/]++)/show/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_contracts_show;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_show');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::showAction',));
                    }
                    not_contracts_show:

                    if (0 === strpos($pathinfo, '/admin/contracts/elapsed')) {
                        // contracts_elapsed
                        if (rtrim($pathinfo, '/') === '/admin/contracts/elapsed') {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_contracts_elapsed;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'contracts_elapsed');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'contracts_elapsed', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::elapsedAction',  '_route' => 'contracts_elapsed',);
                        }
                        not_contracts_elapsed:

                        // contracts_elapsed_back
                        if (rtrim($pathinfo, '/') === '/admin/contracts/elapsed/back') {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_contracts_elapsed_back;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'contracts_elapsed_back');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'contracts_elapsed_back', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::elapsedbackAction',  '_route' => 'contracts_elapsed_back',);
                        }
                        not_contracts_elapsed_back:

                        // contracts_elapsed_update
                        if (rtrim($pathinfo, '/') === '/admin/contracts/elapsed/update') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_contracts_elapsed_update;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'contracts_elapsed_update');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'contracts_elapsed_update', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::elapsedupdateAction',  '_route' => 'contracts_elapsed_update',);
                        }
                        not_contracts_elapsed_update:

                    }

                    if (0 === strpos($pathinfo, '/admin/contracts/s')) {
                        // contracts_search
                        if (rtrim($pathinfo, '/') === '/admin/contracts/search') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_contracts_search;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'contracts_search');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'contracts_search', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::searchAction',  '_route' => 'contracts_search',);
                        }
                        not_contracts_search:

                        // contracts_statistic
                        if (rtrim($pathinfo, '/') === '/admin/contracts/statistic') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_contracts_statistic;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'contracts_statistic');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'contracts_statistic', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::statisticAction',  '_route' => 'contracts_statistic',);
                        }
                        not_contracts_statistic:

                    }

                    // contracts_confirmation
                    if (preg_match('#^/admin/contracts/(?P<idcontract>[^/]++)/confirmation/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_confirmation;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_confirmation');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_confirmation', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_confirmation')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::confirmationAction',));
                    }
                    not_contracts_confirmation:

                    // contracts_pagesearch
                    if (rtrim($pathinfo, '/') === '/admin/contracts/pagesearch') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_pagesearch;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_pagesearch');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_pagesearch', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::pagesearchAction',  '_route' => 'contracts_pagesearch',);
                    }
                    not_contracts_pagesearch:

                    // contracts_close
                    if (preg_match('#^/admin/contracts/(?P<id>[^/]++)/close/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_close;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_close');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_close', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_close')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::closeAction',));
                    }
                    not_contracts_close:

                    // contracts_reopen
                    if (preg_match('#^/admin/contracts/(?P<id>[^/]++)/reopen/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_reopen;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_reopen');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_reopen', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_reopen')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::reopenAction',));
                    }
                    not_contracts_reopen:

                    // contracts_open
                    if (rtrim($pathinfo, '/') === '/admin/contracts/open') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_open;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_open');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_open', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::openAction',  '_route' => 'contracts_open',);
                    }
                    not_contracts_open:

                    // contracts_plan
                    if (rtrim($pathinfo, '/') === '/admin/contracts/plan') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_plan;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_plan');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_plan', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::planAction',  '_route' => 'contracts_plan',);
                    }
                    not_contracts_plan:

                    // contracts_new
                    if ($pathinfo === '/admin/contracts/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::newAction',  '_route' => 'contracts_new',);
                    }
                    not_contracts_new:

                    // contracts_duplicate
                    if (preg_match('#^/admin/contracts/(?P<id>[^/]++)/duplicate$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_duplicate;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_duplicate', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_duplicate')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::duplicateAction',));
                    }
                    not_contracts_duplicate:

                    if (0 === strpos($pathinfo, '/admin/contracts/c')) {
                        // contracts_client_new
                        if ($pathinfo === '/admin/contracts/client/new') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_contracts_client_new;
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'contracts_client_new', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::newclientAction',  '_route' => 'contracts_client_new',);
                        }
                        not_contracts_client_new:

                        // contracts_coordinator_new
                        if ($pathinfo === '/admin/contracts/coordinator/new') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_contracts_coordinator_new;
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'contracts_coordinator_new', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::coordinatorAction',  '_route' => 'contracts_coordinator_new',);
                        }
                        not_contracts_coordinator_new:

                        // contracts_create_cbilling
                        if ($pathinfo === '/admin/contracts/cbilling/new') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_contracts_create_cbilling;
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'contracts_create_cbilling', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::cbillingAction',  '_route' => 'contracts_create_cbilling',);
                        }
                        not_contracts_create_cbilling:

                        // contracts_create_contractual
                        if ($pathinfo === '/admin/contracts/contractual/ccnew') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_contracts_create_contractual;
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'contracts_create_contractual', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::ccnewAction',  '_route' => 'contracts_create_contractual',);
                        }
                        not_contracts_create_contractual:

                    }

                    // contracts_contractual_new
                    if (preg_match('#^/admin/contracts/(?P<idcontract>[^/]++)/contractual/new$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_contractual_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_contractual_new', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_contractual_new')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::contractualAction',));
                    }
                    not_contracts_contractual_new:

                    // contracts_contractual_edit
                    if (preg_match('#^/admin/contracts/(?P<id>[^/]++)/contact/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_contractual_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_contractual_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_contractual_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::contractualeditAction',));
                    }
                    not_contracts_contractual_edit:

                    if (0 === strpos($pathinfo, '/admin/contracts/create')) {
                        // contracts_create_client
                        if (rtrim($pathinfo, '/') === '/admin/contracts/create/client') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_contracts_create_client;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'contracts_create_client');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'contracts_create_client', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::createclientAction',  '_route' => 'contracts_create_client',);
                        }
                        not_contracts_create_client:

                        // contracts_create_group
                        if (rtrim($pathinfo, '/') === '/admin/contracts/create/group') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_contracts_create_group;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'contracts_create_group');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'contracts_create_group', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::creategroupAction',  '_route' => 'contracts_create_group',);
                        }
                        not_contracts_create_group:

                    }

                    // contracts_students_new
                    if (rtrim($pathinfo, '/') === '/admin/contracts/student/create') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_students_new;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_students_new');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_students_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::createstudentAction',  '_route' => 'contracts_students_new',);
                    }
                    not_contracts_students_new:

                    // contracts_students_edit
                    if (preg_match('#^/admin/contracts/(?P<id>[^/]++)/student/edit/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_students_edit;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_students_edit');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_students_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_students_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::editstudentAction',));
                    }
                    not_contracts_students_edit:

                    // contracts_billingcontact_edit
                    if (preg_match('#^/admin/contracts/(?P<id>[^/]++)/(?P<idcontract>[^/]++)/billingcontact/edit/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_billingcontact_edit;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_billingcontact_edit');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_billingcontact_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_billingcontact_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::editbillingcontactAction',));
                    }
                    not_contracts_billingcontact_edit:

                    // contracts_students_select
                    if (preg_match('#^/admin/contracts/(?P<idstudent>[^/]++)/(?P<idcontract>[^/]++)/student/select/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_students_select;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_students_select');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_students_select', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_students_select')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::selectstudentAction',));
                    }
                    not_contracts_students_select:

                    // contracts_contractual_select
                    if (preg_match('#^/admin/contracts/(?P<idcontractual>[^/]++)/(?P<idcontract>[^/]++)/contractual/select/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_contractual_select;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_contractual_select');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_contractual_select', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_contractual_select')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::selectcontractualAction',));
                    }
                    not_contracts_contractual_select:

                    // contracts_contractual_remove
                    if (preg_match('#^/admin/contracts/(?P<idcontractual>[^/]++)/(?P<idcontract>[^/]++)/contractual/remove/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_contractual_remove;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_contractual_remove');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_contractual_remove', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_contractual_remove')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::removecontractualAction',));
                    }
                    not_contracts_contractual_remove:

                    // contracts_teacher_new
                    if (rtrim($pathinfo, '/') === '/admin/contracts/teacher/create') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_teacher_new;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_teacher_new');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_teacher_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::teacherAction',  '_route' => 'contracts_teacher_new',);
                    }
                    not_contracts_teacher_new:

                    // contracts_local_new
                    if (rtrim($pathinfo, '/') === '/admin/contracts/local/create') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_local_new;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_local_new');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_local_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::localAction',  '_route' => 'contracts_local_new',);
                    }
                    not_contracts_local_new:

                    // contracts_local_remove
                    if (preg_match('#^/admin/contracts/(?P<id>[^/]++)/local/remove/$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_contracts_local_remove;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_local_remove', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_local_remove')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::removelocalAction',));
                    }
                    not_contracts_local_remove:

                    // contracts_add_advisor
                    if (rtrim($pathinfo, '/') === '/admin/contracts/add/advisor') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_add_advisor;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_add_advisor');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_add_advisor', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::addAdvisorAction',  '_route' => 'contracts_add_advisor',);
                    }
                    not_contracts_add_advisor:

                    // contracts_advisor_remove
                    if (preg_match('#^/admin/contracts/(?P<idcontract>[^/]++)/(?P<idemployee>[^/]++)/advisor/remove/$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_contracts_advisor_remove;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_advisor_remove', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_advisor_remove')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::removeadvisorAction',));
                    }
                    not_contracts_advisor_remove:

                    // contracts_training_remove
                    if ($pathinfo === '/admin/contracts/training/remove/') {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_contracts_training_remove;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_training_remove', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::removetrainingAction',  '_route' => 'contracts_training_remove',);
                    }
                    not_contracts_training_remove:

                    // contracts_students_remove0
                    if (preg_match('#^/admin/contracts/(?P<idcontract>[^/]++)/(?P<idstudent>[^/]++)/students/remove/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_contracts_students_remove0;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_students_remove0');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_students_remove0', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_students_remove0')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::removestudents0Action',));
                    }
                    not_contracts_students_remove0:

                    // contracts_students_remove1
                    if (rtrim($pathinfo, '/') === '/admin/contracts/students/remove') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_contracts_students_remove1;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_students_remove1');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_students_remove1', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::removestudents1Action',  '_route' => 'contracts_students_remove1',);
                    }
                    not_contracts_students_remove1:

                    // contracts_students_remove2
                    if (preg_match('#^/admin/contracts/(?P<idcontract>[^/]++)/(?P<idstudent>[^/]++)/students/remove/$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_contracts_students_remove2;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_students_remove2', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_students_remove2')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::removestudents2Action',));
                    }
                    not_contracts_students_remove2:

                    // contracts_teacher_remove
                    if (preg_match('#^/admin/contracts/(?P<id>[^/]++)/(?P<idemployee>[^/]++)/teacher/remove/$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'POST') {
                            $allow[] = 'POST';
                            goto not_contracts_teacher_remove;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_teacher_remove', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_teacher_remove')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::removeteacherAction',));
                    }
                    not_contracts_teacher_remove:

                    // contracts_revision_new
                    if (rtrim($pathinfo, '/') === '/admin/contracts/revision/create') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_revision_new;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_revision_new');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_revision_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::revisionAction',  '_route' => 'contracts_revision_new',);
                    }
                    not_contracts_revision_new:

                    // contracts_schedule_new
                    if (rtrim($pathinfo, '/') === '/admin/contracts/assign/to') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_schedule_new;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_schedule_new');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_schedule_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::createscheduleAction',  '_route' => 'contracts_schedule_new',);
                    }
                    not_contracts_schedule_new:

                    // contracts_newbatch
                    if ($pathinfo === '/admin/contracts/batch') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_newbatch;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_newbatch', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::batchAction',  '_route' => 'contracts_newbatch',);
                    }
                    not_contracts_newbatch:

                    // contracts_edit
                    if (preg_match('#^/admin/contracts/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::editAction',));
                    }
                    not_contracts_edit:

                    // contracts_delete
                    if (preg_match('#^/admin/contracts/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_contracts_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::deleteAction',));
                    }
                    not_contracts_delete:

                    // contracts_location
                    if (rtrim($pathinfo, '/') === '/admin/contracts/location') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_location;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_location');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_location', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::locationAction',  '_route' => 'contracts_location',);
                    }
                    not_contracts_location:

                    // contracts_addteacher
                    if (rtrim($pathinfo, '/') === '/admin/contracts/addteacher') {
                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_addteacher');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_addteacher', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::addteacherAction',  '_route' => 'contracts_addteacher',);
                    }

                    // contracts_update
                    if (rtrim($pathinfo, '/') === '/admin/contracts/update') {
                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_update');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_update', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::updateAction',  '_route' => 'contracts_update',);
                    }

                    // contracts_active_agenda
                    if (preg_match('#^/admin/contracts/(?P<idagenda>[^/]++)/(?P<idcontract>[^/]++)/active/agenda$#s', $pathinfo, $matches)) {
                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_active_agenda', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_active_agenda')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::updateAction',));
                    }

                    // contracts_extrasearch
                    if (rtrim($pathinfo, '/') === '/admin/contracts/extrasearch') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_extrasearch;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_extrasearch');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_extrasearch', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::extrasearchAction',  '_route' => 'contracts_extrasearch',);
                    }
                    not_contracts_extrasearch:

                    // contracts_periodsearch
                    if (rtrim($pathinfo, '/') === '/admin/contracts/periodsearch') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_periodsearch;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_periodsearch');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_periodsearch', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::periodsearchAction',  '_route' => 'contracts_periodsearch',);
                    }
                    not_contracts_periodsearch:

                    // contracts_fieldsearch
                    if (rtrim($pathinfo, '/') === '/admin/contracts/fieldearch') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_fieldsearch;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_fieldsearch');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_fieldsearch', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::fieldsearchAction',  '_route' => 'contracts_fieldsearch',);
                    }
                    not_contracts_fieldsearch:

                    // contracts_xls
                    if (rtrim($pathinfo, '/') === '/admin/contracts/extract/xls') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_xls;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_xls');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_xls', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::xlsAction',  '_route' => 'contracts_xls',);
                    }
                    not_contracts_xls:

                    // contracts_presencexls
                    if (preg_match('#^/admin/contracts/(?P<id>[^/]++)/presence/xls/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_presencexls;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_presencexls');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_presencexls', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_presencexls')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::presencexlsAction',));
                    }
                    not_contracts_presencexls:

                    // contracts_substitution_new
                    if (preg_match('#^/admin/contracts/(?P<idagenda>[^/]++)/substitution/new$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_substitution_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_substitution_new', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_substitution_new')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::substituteAction',));
                    }
                    not_contracts_substitution_new:

                    // contracts_historic
                    if (preg_match('#^/admin/contracts/(?P<id>[^/]++)/historic/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_contracts_historic;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contracts_historic');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_historic', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_historic')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::historicAction',));
                    }
                    not_contracts_historic:

                    // contracts_addnote
                    if (preg_match('#^/admin/contracts/(?P<id>[^/]++)/add/note$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contracts_addnote;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contracts_addnote', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contracts_addnote')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractsController::addnoteAction',));
                    }
                    not_contracts_addnote:

                }

                if (0 === strpos($pathinfo, '/admin/customer')) {
                    // client_index
                    if (rtrim($pathinfo, '/') === '/admin/customer') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_client_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'client_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'client_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ClientController::indexAction',  '_route' => 'client_index',);
                    }
                    not_client_index:

                    // client_list
                    if (rtrim($pathinfo, '/') === '/admin/customer/list') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_client_list;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'client_list');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'client_list', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ClientController::listAction',  '_route' => 'client_list',);
                    }
                    not_client_list:

                    // client_show
                    if (preg_match('#^/admin/customer/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_client_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'client_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'client_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ClientController::showAction',));
                    }
                    not_client_show:

                    // client_new
                    if ($pathinfo === '/admin/customer/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_client_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'client_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ClientController::newAction',  '_route' => 'client_new',);
                    }
                    not_client_new:

                    // client_coordinator_new
                    if (preg_match('#^/admin/customer/(?P<idclient>[^/]+)master/new$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_client_coordinator_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'client_coordinator_new', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'client_coordinator_new')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ClientController::masternewAction',));
                    }
                    not_client_coordinator_new:

                    // client_edit
                    if (preg_match('#^/admin/customer/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_client_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'client_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'client_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ClientController::editAction',));
                    }
                    not_client_edit:

                    // client_search
                    if (rtrim($pathinfo, '/') === '/admin/customer/search') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_client_search;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'client_search');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'client_search', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ClientController::searchAction',  '_route' => 'client_search',);
                    }
                    not_client_search:

                    // client_pagesearch
                    if (rtrim($pathinfo, '/') === '/admin/customer/pagesearch') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_client_pagesearch;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'client_pagesearch');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'client_pagesearch', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ClientController::pagesearchAction',  '_route' => 'client_pagesearch',);
                    }
                    not_client_pagesearch:

                    // client_delete
                    if (preg_match('#^/admin/customer/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_client_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'client_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'client_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ClientController::deleteAction',));
                    }
                    not_client_delete:

                }

            }

            if (0 === strpos($pathinfo, '/admin/rooms')) {
                // local_index
                if (rtrim($pathinfo, '/') === '/admin/rooms') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_local_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'local_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'local_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LocalController::indexAction',  '_route' => 'local_index',);
                }
                not_local_index:

                // local_empty
                if (rtrim($pathinfo, '/') === '/admin/rooms/empty') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_local_empty;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'local_empty');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'local_empty', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LocalController::emptyAction',  '_route' => 'local_empty',);
                }
                not_local_empty:

                // local_upcomingbug
                if (rtrim($pathinfo, '/') === '/admin/rooms/upcomingbug') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_local_upcomingbug;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'local_upcomingbug');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'local_upcomingbug', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LocalController::upcomingbugAction',  '_route' => 'local_upcomingbug',);
                }
                not_local_upcomingbug:

                // local_page
                if (0 === strpos($pathinfo, '/admin/rooms/page') && preg_match('#^/admin/rooms/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'local_page', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'local_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LocalController::pageAction',));
                }

                // local_show
                if (preg_match('#^/admin/rooms/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_local_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'local_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'local_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LocalController::showAction',));
                }
                not_local_show:

                // local_disable
                if (preg_match('#^/admin/rooms/(?P<id>[^/]++)/disable$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_local_disable;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'local_disable', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'local_disable')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LocalController::disableAction',));
                }
                not_local_disable:

                // local_free
                if (preg_match('#^/admin/rooms/(?P<id>[^/]++)/free$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_local_free;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'local_free', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'local_free')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LocalController::freeAction',));
                }
                not_local_free:

                // local_enable
                if (preg_match('#^/admin/rooms/(?P<id>[^/]++)/enable$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_local_enable;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'local_enable', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'local_enable')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LocalController::enableAction',));
                }
                not_local_enable:

                // local_back
                if (rtrim($pathinfo, '/') === '/admin/rooms/back') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_local_back;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'local_back');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'local_back', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LocalController::backAction',  '_route' => 'local_back',);
                }
                not_local_back:

                // local_search
                if (rtrim($pathinfo, '/') === '/admin/rooms/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_local_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'local_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'local_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LocalController::searchAction',  '_route' => 'local_search',);
                }
                not_local_search:

                // local_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/rooms/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_local_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'local_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'local_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LocalController::pagesearchAction',  '_route' => 'local_pagesearch',);
                }
                not_local_pagesearch:

                if (0 === strpos($pathinfo, '/admin/rooms/new')) {
                    // local_new
                    if ($pathinfo === '/admin/rooms/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_local_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'local_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LocalController::newAction',  '_route' => 'local_new',);
                    }
                    not_local_new:

                    // local_newbatch
                    if ($pathinfo === '/admin/rooms/newbatch') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_local_newbatch;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'local_newbatch', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LocalController::newbatchAction',  '_route' => 'local_newbatch',);
                    }
                    not_local_newbatch:

                }

                // local_edit
                if (preg_match('#^/admin/rooms/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_local_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'local_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'local_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LocalController::editAction',));
                }
                not_local_edit:

                // local_maj
                if (rtrim($pathinfo, '/') === '/admin/rooms/update') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_local_maj;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'local_maj');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'local_maj', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LocalController::updateAction',  '_route' => 'local_maj',);
                }
                not_local_maj:

                // local_delete
                if (preg_match('#^/admin/rooms/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_local_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'local_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'local_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LocalController::deleteAction',));
                }
                not_local_delete:

                // local_extrasearch
                if (rtrim($pathinfo, '/') === '/admin/rooms/extrasearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_local_extrasearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'local_extrasearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'local_extrasearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LocalController::extrasearchAction',  '_route' => 'local_extrasearch',);
                }
                not_local_extrasearch:

                // local_periodsearch
                if (rtrim($pathinfo, '/') === '/admin/rooms/periodsearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_local_periodsearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'local_periodsearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'local_periodsearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LocalController::periodsearchAction',  '_route' => 'local_periodsearch',);
                }
                not_local_periodsearch:

                // local_xls
                if (rtrim($pathinfo, '/') === '/admin/rooms/extract/xls') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_local_xls;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'local_xls');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'local_xls', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LocalController::xlsAction',  '_route' => 'local_xls',);
                }
                not_local_xls:

            }

            if (0 === strpos($pathinfo, '/admin/company')) {
                // company_index
                if (rtrim($pathinfo, '/') === '/admin/company') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_company_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'company_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'company_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CompanyController::indexAction',  '_route' => 'company_index',);
                }
                not_company_index:

                // company_show
                if (preg_match('#^/admin/company/(?P<id>[^/]++)/show/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_company_show;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'company_show');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'company_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'company_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CompanyController::showAction',));
                }
                not_company_show:

                // company_new
                if (rtrim($pathinfo, '/') === '/admin/company/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_company_new;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'company_new');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'company_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CompanyController::newAction',  '_route' => 'company_new',);
                }
                not_company_new:

                // company_edit
                if (preg_match('#^/admin/company/(?P<id>[^/]++)/edit/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_company_edit;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'company_edit');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'company_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'company_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CompanyController::editAction',));
                }
                not_company_edit:

                // company_duplicate
                if (preg_match('#^/admin/company/(?P<id>[^/]++)/duplicate/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_company_duplicate;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'company_duplicate');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'company_duplicate', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'company_duplicate')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CompanyController::duplicateAction',));
                }
                not_company_duplicate:

                // company_delete
                if (preg_match('#^/admin/company/(?P<id>[^/]++)/delete/$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_company_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'company_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'company_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CompanyController::deleteAction',));
                }
                not_company_delete:

            }

            if (0 === strpos($pathinfo, '/admin/furniture')) {
                // mobiliers_index
                if (rtrim($pathinfo, '/') === '/admin/furniture') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_mobiliers_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'mobiliers_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'mobiliers_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MobiliersController::indexAction',  '_route' => 'mobiliers_index',);
                }
                not_mobiliers_index:

                // mobiliers_show
                if (preg_match('#^/admin/furniture/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_mobiliers_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'mobiliers_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'mobiliers_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MobiliersController::showAction',));
                }
                not_mobiliers_show:

                // mobiliers_new
                if ($pathinfo === '/admin/furniture/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_mobiliers_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'mobiliers_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MobiliersController::newAction',  '_route' => 'mobiliers_new',);
                }
                not_mobiliers_new:

                // mobiliers_edit
                if (preg_match('#^/admin/furniture/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_mobiliers_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'mobiliers_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'mobiliers_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MobiliersController::editAction',));
                }
                not_mobiliers_edit:

                // mobiliers_delete
                if (preg_match('#^/admin/furniture/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_mobiliers_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'mobiliers_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'mobiliers_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MobiliersController::deleteAction',));
                }
                not_mobiliers_delete:

            }

            if (0 === strpos($pathinfo, '/admin/profil')) {
                // profil_index
                if (rtrim($pathinfo, '/') === '/admin/profil') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_profil_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'profil_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'profil_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ProfilController::indexAction',  '_route' => 'profil_index',);
                }
                not_profil_index:

                // profil_show
                if (preg_match('#^/admin/profil/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_profil_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'profil_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'profil_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ProfilController::showAction',));
                }
                not_profil_show:

                // profil_all_enable
                if (preg_match('#^/admin/profil/(?P<id>[^/]++)/(?P<action>[^/]++)/allenable$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_profil_all_enable;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'profil_all_enable', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'profil_all_enable')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ProfilController::allenableAction',));
                }
                not_profil_all_enable:

                // profil_enableall
                if (preg_match('#^/admin/profil/(?P<id>[^/]++)/enable/all$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_profil_enableall;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'profil_enableall', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'profil_enableall')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ProfilController::enableallAction',));
                }
                not_profil_enableall:

                // profil_new
                if ($pathinfo === '/admin/profil/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_profil_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'profil_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ProfilController::newAction',  '_route' => 'profil_new',);
                }
                not_profil_new:

                // profil_edit
                if (preg_match('#^/admin/profil/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_profil_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'profil_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'profil_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ProfilController::editAction',));
                }
                not_profil_edit:

                // profil_delete
                if (preg_match('#^/admin/profil/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_profil_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'profil_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'profil_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ProfilController::deleteAction',));
                }
                not_profil_delete:

                // profil_srubric_load
                if (rtrim($pathinfo, '/') === '/admin/profil/rubric/reload') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_profil_srubric_load;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'profil_srubric_load');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'profil_srubric_load', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ProfilController::srubricAction',  '_route' => 'profil_srubric_load',);
                }
                not_profil_srubric_load:

            }

            if (0 === strpos($pathinfo, '/admin/status')) {
                // status_index
                if (rtrim($pathinfo, '/') === '/admin/status') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_status_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'status_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'status_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StatusController::indexAction',  '_route' => 'status_index',);
                }
                not_status_index:

                // status_show
                if (preg_match('#^/admin/status/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_status_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'status_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'status_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StatusController::showAction',));
                }
                not_status_show:

                // status_new
                if ($pathinfo === '/admin/status/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_status_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'status_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StatusController::newAction',  '_route' => 'status_new',);
                }
                not_status_new:

                // status_edit
                if (preg_match('#^/admin/status/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_status_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'status_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'status_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StatusController::editAction',));
                }
                not_status_edit:

                // status_delete
                if (preg_match('#^/admin/status/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_status_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'status_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'status_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StatusController::deleteAction',));
                }
                not_status_delete:

            }

            if (0 === strpos($pathinfo, '/admin/level')) {
                // level_index
                if (rtrim($pathinfo, '/') === '/admin/level') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_level_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'level_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'level_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LevelController::indexAction',  '_route' => 'level_index',);
                }
                not_level_index:

                // level_show
                if (preg_match('#^/admin/level/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_level_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'level_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'level_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LevelController::showAction',));
                }
                not_level_show:

                // level_new
                if ($pathinfo === '/admin/level/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_level_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'level_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LevelController::newAction',  '_route' => 'level_new',);
                }
                not_level_new:

                // level_edit
                if (preg_match('#^/admin/level/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_level_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'level_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'level_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LevelController::editAction',));
                }
                not_level_edit:

                // level_delete
                if (preg_match('#^/admin/level/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_level_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'level_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'level_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LevelController::deleteAction',));
                }
                not_level_delete:

            }

            if (0 === strpos($pathinfo, '/admin/students')) {
                // students_index
                if (rtrim($pathinfo, '/') === '/admin/students') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_students_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'students_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::indexAction',  '_route' => 'students_index',);
                }
                not_students_index:

                // students_list
                if ($pathinfo === '/admin/students/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_students_list;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_list', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::listAction',  '_route' => 'students_list',);
                }
                not_students_list:

                // students_page
                if (0 === strpos($pathinfo, '/admin/students/page') && preg_match('#^/admin/students/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_page', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'students_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::pageAction',));
                }

                // students_show
                if (preg_match('#^/admin/students/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_students_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'students_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::showAction',));
                }
                not_students_show:

                // students_list_absence
                if (preg_match('#^/admin/students/(?P<id>[^/]++)/(?P<offset>[^/]++)/list/absences$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_students_list_absence;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_list_absence', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'students_list_absence')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::listabsenceAction',));
                }
                not_students_list_absence:

                // students_evaluation
                if (preg_match('#^/admin/students/(?P<id>[^/]++)/(?P<idstudent>[^/]++)/evaluation$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_students_evaluation;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_evaluation', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'students_evaluation')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::evaluationAction',));
                }
                not_students_evaluation:

                // students_back
                if (rtrim($pathinfo, '/') === '/admin/students/back') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_students_back;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'students_back');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_back', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::backAction',  '_route' => 'students_back',);
                }
                not_students_back:

                // students_search
                if (rtrim($pathinfo, '/') === '/admin/students/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_students_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'students_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::searchAction',  '_route' => 'students_search',);
                }
                not_students_search:

                // students_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/students/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_students_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'students_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::pagesearchAction',  '_route' => 'students_pagesearch',);
                }
                not_students_pagesearch:

                // students_new
                if ($pathinfo === '/admin/students/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_students_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::newAction',  '_route' => 'students_new',);
                }
                not_students_new:

                // students_override_1
                if (preg_match('#^/admin/students/(?P<id>[^/]++)/override1/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_students_override_1;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'students_override_1');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_override_1', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'students_override_1')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::override1Action',));
                }
                not_students_override_1:

                // students_override_2
                if (preg_match('#^/admin/students/(?P<id>[^/]++)/override2/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_students_override_2;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'students_override_2');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_override_2', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'students_override_2')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::override2Action',));
                }
                not_students_override_2:

                // students_edit
                if (preg_match('#^/admin/students/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_students_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'students_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::editAction',));
                }
                not_students_edit:

                // students_delete
                if (preg_match('#^/admin/students/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_students_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'students_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::deleteAction',));
                }
                not_students_delete:

                if (0 === strpos($pathinfo, '/admin/students/absences')) {
                    // students_absence_day
                    if (rtrim($pathinfo, '/') === '/admin/students/absences/today') {
                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'students_absence_day');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'students_absence_day', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::dayabsencesAction',  '_route' => 'students_absence_day',);
                    }

                    // students_absence_index
                    if (rtrim($pathinfo, '/') === '/admin/students/absences') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_students_absence_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'students_absence_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'students_absence_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::absencesAction',  '_route' => 'students_absence_index',);
                    }
                    not_students_absence_index:

                    // students_absence_search
                    if (rtrim($pathinfo, '/') === '/admin/students/absences/search') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_students_absence_search;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'students_absence_search');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'students_absence_search', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::searchabsAction',  '_route' => 'students_absence_search',);
                    }
                    not_students_absence_search:

                    // students_absence_pagesearch
                    if (rtrim($pathinfo, '/') === '/admin/students/absences/pagesearch') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_students_absence_pagesearch;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'students_absence_pagesearch');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'students_absence_pagesearch', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::pagesearchabsAction',  '_route' => 'students_absence_pagesearch',);
                    }
                    not_students_absence_pagesearch:

                }

                // students_page_absences
                if (preg_match('#^/admin/students/(?P<option>[^/]++)/absences/page/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_students_page_absences;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'students_page_absences');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_page_absences', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'students_page_absences')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::absencespageAction',));
                }
                not_students_page_absences:

                // students_create_absence
                if (preg_match('#^/admin/students/(?P<idstudent>[^/]++)/add/absence/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_students_create_absence;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'students_create_absence');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_create_absence', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'students_create_absence')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::addAbsenceAction',));
                }
                not_students_create_absence:

                // students_add_absence
                if (rtrim($pathinfo, '/') === '/admin/students/add/absence') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_students_add_absence;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'students_add_absence');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_add_absence', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::createabsenceAction',  '_route' => 'students_add_absence',);
                }
                not_students_add_absence:

                // students_show_absence
                if (preg_match('#^/admin/students/(?P<id>[^/]++)/(?P<option>[^/]++)/show/absence/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_students_show_absence;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'students_show_absence');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_show_absence', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'students_show_absence')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::showAbsenceAction',));
                }
                not_students_show_absence:

                // students_edit_absence
                if (preg_match('#^/admin/students/(?P<id>[^/]++)/(?P<option>[^/]++)/edit/absence/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_students_edit_absence;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'students_edit_absence');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_edit_absence', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'students_edit_absence')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::editAbsenceAction',));
                }
                not_students_edit_absence:

                // students_teacher_available
                if (rtrim($pathinfo, '/') === '/admin/students/teacher/available') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_students_teacher_available;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'students_teacher_available');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_teacher_available', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::teacheravailableAction',  '_route' => 'students_teacher_available',);
                }
                not_students_teacher_available:

                // students_delete_absence
                if (preg_match('#^/admin/students/(?P<id>[^/]++)/(?P<option>[^/]++)/delete/absence/$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_students_delete_absence;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_delete_absence', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'students_delete_absence')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::deleteAbsenceAction',));
                }
                not_students_delete_absence:

                // students_newbatch
                if ($pathinfo === '/admin/students/newbatch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_students_newbatch;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_newbatch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::newbatchAction',  '_route' => 'students_newbatch',);
                }
                not_students_newbatch:

                // students_user_create
                if (preg_match('#^/admin/students/(?P<id>[^/]++)/createuser$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_students_user_create;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_user_create', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'students_user_create')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::createuserAction',));
                }
                not_students_user_create:

                // students_user_new
                if (rtrim($pathinfo, '/') === '/admin/students/newuser') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_students_user_new;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'students_user_new');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_user_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::newuserAction',  '_route' => 'students_user_new',);
                }
                not_students_user_new:

                // students_schedule
                if (preg_match('#^/admin/students/(?P<id>[^/]++)/schedule/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_students_schedule;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'students_schedule');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_schedule', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'students_schedule')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::scheduleAction',));
                }
                not_students_schedule:

                // students_schedule_load
                if ($pathinfo === '/admin/students/schedule/load') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_students_schedule_load;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'students_schedule_load', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StudentsController::loadscheduleAction',  '_route' => 'students_schedule_load',);
                }
                not_students_schedule_load:

            }

            if (0 === strpos($pathinfo, '/admin/clearance')) {
                // securitycote_index
                if (rtrim($pathinfo, '/') === '/admin/clearance') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_securitycote_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'securitycote_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'securitycote_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SecurityCoteController::indexAction',  '_route' => 'securitycote_index',);
                }
                not_securitycote_index:

                // securitycote_page
                if (0 === strpos($pathinfo, '/admin/clearance/page') && preg_match('#^/admin/clearance/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'securitycote_page', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'securitycote_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SecurityCoteController::pageAction',));
                }

                // securitycote_show
                if (preg_match('#^/admin/clearance/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_securitycote_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'securitycote_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'securitycote_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SecurityCoteController::showAction',));
                }
                not_securitycote_show:

                // securitycote_new
                if ($pathinfo === '/admin/clearance/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_securitycote_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'securitycote_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SecurityCoteController::newAction',  '_route' => 'securitycote_new',);
                }
                not_securitycote_new:

                // securitycote_edit
                if (preg_match('#^/admin/clearance/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_securitycote_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'securitycote_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'securitycote_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SecurityCoteController::editAction',));
                }
                not_securitycote_edit:

                // securitycote_delete
                if (preg_match('#^/admin/clearance/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_securitycote_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'securitycote_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'securitycote_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SecurityCoteController::deleteAction',));
                }
                not_securitycote_delete:

                // securitycote_newbatch
                if ($pathinfo === '/admin/clearance/newbatch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_securitycote_newbatch;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'securitycote_newbatch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SecurityCoteController::newbatchAction',  '_route' => 'securitycote_newbatch',);
                }
                not_securitycote_newbatch:

                // securitycote_search
                if (rtrim($pathinfo, '/') === '/admin/clearance/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_securitycote_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'securitycote_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'securitycote_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SecurityCoteController::searchAction',  '_route' => 'securitycote_search',);
                }
                not_securitycote_search:

                // securitycote_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/clearance/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_securitycote_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'securitycote_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'securitycote_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SecurityCoteController::pagesearchAction',  '_route' => 'securitycote_pagesearch',);
                }
                not_securitycote_pagesearch:

            }

            if (0 === strpos($pathinfo, '/admin/qualification')) {
                // qualification_index
                if (rtrim($pathinfo, '/') === '/admin/qualification') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_qualification_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'qualification_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'qualification_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'BoAdminBundle:Qualification:index',  '_route' => 'qualification_index',);
                }
                not_qualification_index:

                // qualification_show
                if (preg_match('#^/admin/qualification/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_qualification_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'qualification_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'qualification_show')), array (  '_controller' => 'BoAdminBundle:Qualification:show',));
                }
                not_qualification_show:

                // qualification_new
                if ($pathinfo === '/admin/qualification/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_qualification_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'qualification_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'BoAdminBundle:Qualification:new',  '_route' => 'qualification_new',);
                }
                not_qualification_new:

                // qualification_edit
                if (preg_match('#^/admin/qualification/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_qualification_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'qualification_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'qualification_edit')), array (  '_controller' => 'BoAdminBundle:Qualification:edit',));
                }
                not_qualification_edit:

                // qualification_delete
                if (preg_match('#^/admin/qualification/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_qualification_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'qualification_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'qualification_delete')), array (  '_controller' => 'BoAdminBundle:Qualification:delete',));
                }
                not_qualification_delete:

            }

            if (0 === strpos($pathinfo, '/admin/category')) {
                if (0 === strpos($pathinfo, '/admin/categoryroom')) {
                    // categoryroom_index
                    if (rtrim($pathinfo, '/') === '/admin/categoryroom') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_categoryroom_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'categoryroom_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'categoryroom_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CategoryroomController::indexAction',  '_route' => 'categoryroom_index',);
                    }
                    not_categoryroom_index:

                    // categoryroom_show
                    if (preg_match('#^/admin/categoryroom/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_categoryroom_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'categoryroom_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'categoryroom_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CategoryroomController::showAction',));
                    }
                    not_categoryroom_show:

                    // categoryroom_new
                    if ($pathinfo === '/admin/categoryroom/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_categoryroom_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'categoryroom_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CategoryroomController::newAction',  '_route' => 'categoryroom_new',);
                    }
                    not_categoryroom_new:

                    // categoryroom_edit
                    if (preg_match('#^/admin/categoryroom/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_categoryroom_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'categoryroom_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'categoryroom_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CategoryroomController::editAction',));
                    }
                    not_categoryroom_edit:

                    // categoryroom_delete
                    if (preg_match('#^/admin/categoryroom/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_categoryroom_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'categoryroom_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'categoryroom_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CategoryroomController::deleteAction',));
                    }
                    not_categoryroom_delete:

                }

                if (0 === strpos($pathinfo, '/admin/categoryteacher')) {
                    // categoryteacher_index
                    if (rtrim($pathinfo, '/') === '/admin/categoryteacher') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_categoryteacher_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'categoryteacher_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'categoryteacher_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CategoryteacherController::indexAction',  '_route' => 'categoryteacher_index',);
                    }
                    not_categoryteacher_index:

                    // categoryteacher_show
                    if (preg_match('#^/admin/categoryteacher/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_categoryteacher_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'categoryteacher_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'categoryteacher_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CategoryteacherController::showAction',));
                    }
                    not_categoryteacher_show:

                    // categoryteacher_new
                    if ($pathinfo === '/admin/categoryteacher/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_categoryteacher_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'categoryteacher_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CategoryteacherController::newAction',  '_route' => 'categoryteacher_new',);
                    }
                    not_categoryteacher_new:

                    // categoryteacher_edit
                    if (preg_match('#^/admin/categoryteacher/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_categoryteacher_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'categoryteacher_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'categoryteacher_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CategoryteacherController::editAction',));
                    }
                    not_categoryteacher_edit:

                    // categoryteacher_delete
                    if (preg_match('#^/admin/categoryteacher/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_categoryteacher_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'categoryteacher_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'categoryteacher_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CategoryteacherController::deleteAction',));
                    }
                    not_categoryteacher_delete:

                }

            }

            if (0 === strpos($pathinfo, '/admin/furniturestate')) {
                // etatmobiliers_index
                if (rtrim($pathinfo, '/') === '/admin/furniturestate') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_etatmobiliers_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'etatmobiliers_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'etatmobiliers_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EtatMobiliersController::indexAction',  '_route' => 'etatmobiliers_index',);
                }
                not_etatmobiliers_index:

                // etatmobiliers_show
                if (preg_match('#^/admin/furniturestate/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_etatmobiliers_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'etatmobiliers_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'etatmobiliers_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EtatMobiliersController::showAction',));
                }
                not_etatmobiliers_show:

                // etatmobiliers_new
                if ($pathinfo === '/admin/furniturestate/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_etatmobiliers_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'etatmobiliers_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EtatMobiliersController::newAction',  '_route' => 'etatmobiliers_new',);
                }
                not_etatmobiliers_new:

                // etatmobiliers_edit
                if (preg_match('#^/admin/furniturestate/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_etatmobiliers_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'etatmobiliers_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'etatmobiliers_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EtatMobiliersController::editAction',));
                }
                not_etatmobiliers_edit:

                // etatmobiliers_delete
                if (preg_match('#^/admin/furniturestate/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_etatmobiliers_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'etatmobiliers_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'etatmobiliers_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EtatMobiliersController::deleteAction',));
                }
                not_etatmobiliers_delete:

            }

            if (0 === strpos($pathinfo, '/admin/workfields')) {
                // workfields_index
                if (rtrim($pathinfo, '/') === '/admin/workfields') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_workfields_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'workfields_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'workfields_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\WorkfieldsController::indexAction',  '_route' => 'workfields_index',);
                }
                not_workfields_index:

                // workfields_show
                if (preg_match('#^/admin/workfields/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_workfields_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'workfields_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'workfields_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\WorkfieldsController::showAction',));
                }
                not_workfields_show:

                // workfields_new
                if ($pathinfo === '/admin/workfields/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_workfields_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'workfields_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\WorkfieldsController::newAction',  '_route' => 'workfields_new',);
                }
                not_workfields_new:

                // workfields_edit
                if (preg_match('#^/admin/workfields/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_workfields_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'workfields_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'workfields_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\WorkfieldsController::editAction',));
                }
                not_workfields_edit:

                // workfields_delete
                if (preg_match('#^/admin/workfields/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_workfields_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'workfields_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'workfields_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\WorkfieldsController::deleteAction',));
                }
                not_workfields_delete:

            }

            if (0 === strpos($pathinfo, '/admin/typecontract')) {
                // typecontract_index
                if (rtrim($pathinfo, '/') === '/admin/typecontract') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_typecontract_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'typecontract_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'typecontract_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TypecontractController::indexAction',  '_route' => 'typecontract_index',);
                }
                not_typecontract_index:

                // typecontract_show
                if (preg_match('#^/admin/typecontract/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_typecontract_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'typecontract_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'typecontract_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TypecontractController::showAction',));
                }
                not_typecontract_show:

                // typecontract_new
                if ($pathinfo === '/admin/typecontract/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_typecontract_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'typecontract_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TypecontractController::newAction',  '_route' => 'typecontract_new',);
                }
                not_typecontract_new:

                // typecontract_edit
                if (preg_match('#^/admin/typecontract/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_typecontract_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'typecontract_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'typecontract_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TypecontractController::editAction',));
                }
                not_typecontract_edit:

                // typecontract_delete
                if (preg_match('#^/admin/typecontract/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_typecontract_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'typecontract_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'typecontract_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TypecontractController::deleteAction',));
                }
                not_typecontract_delete:

            }

            if (0 === strpos($pathinfo, '/admin/revision')) {
                // revision_edit
                if (preg_match('#^/admin/revision/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_revision_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'revision_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'revision_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\RevisionController::editAction',));
                }
                not_revision_edit:

                // revision_remove
                if (preg_match('#^/admin/revision/(?P<id>[^/]++)/remove$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_revision_remove;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'revision_remove', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'revision_remove')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\RevisionController::removeAction',));
                }
                not_revision_remove:

                // revision_delete
                if (preg_match('#^/admin/revision/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_revision_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'revision_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'revision_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\RevisionController::deleteAction',));
                }
                not_revision_delete:

            }

            if (0 === strpos($pathinfo, '/admin/setting')) {
                // param_index
                if (rtrim($pathinfo, '/') === '/admin/setting') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_param_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'param_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'param_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ParamController::indexAction',  '_route' => 'param_index',);
                }
                not_param_index:

                // param_list
                if (rtrim($pathinfo, '/') === '/admin/setting/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_param_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'param_list');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'param_list', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ParamController::listAction',  '_route' => 'param_list',);
                }
                not_param_list:

                // param_page
                if (0 === strpos($pathinfo, '/admin/setting/page') && preg_match('#^/admin/setting/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'param_page', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'param_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ParamController::pageAction',));
                }

                // param_show
                if (preg_match('#^/admin/setting/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_param_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'param_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'param_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ParamController::showAction',));
                }
                not_param_show:

                // param_new
                if ($pathinfo === '/admin/setting/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_param_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'param_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ParamController::newAction',  '_route' => 'param_new',);
                }
                not_param_new:

                // param_edit
                if (preg_match('#^/admin/setting/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_param_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'param_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'param_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ParamController::editAction',));
                }
                not_param_edit:

                // param_delete
                if (preg_match('#^/admin/setting/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_param_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'param_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'param_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ParamController::deleteAction',));
                }
                not_param_delete:

                // param_search
                if (rtrim($pathinfo, '/') === '/admin/setting/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_param_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'param_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'param_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ParamController::searchAction',  '_route' => 'param_search',);
                }
                not_param_search:

                // param_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/setting/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_param_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'param_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'param_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ParamController::pagesearchAction',  '_route' => 'param_pagesearch',);
                }
                not_param_pagesearch:

            }

            if (0 === strpos($pathinfo, '/admin/activities')) {
                // activities_index
                if (rtrim($pathinfo, '/') === '/admin/activities') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_activities_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'activities_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'activities_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ActivitiesController::indexAction',  '_route' => 'activities_index',);
                }
                not_activities_index:

                // activities_page
                if (0 === strpos($pathinfo, '/admin/activities/page') && preg_match('#^/admin/activities/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'activities_page', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'activities_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ActivitiesController::pageAction',));
                }

                // activities_show
                if (preg_match('#^/admin/activities/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_activities_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'activities_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'activities_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ActivitiesController::showAction',));
                }
                not_activities_show:

                // activities_new
                if ($pathinfo === '/admin/activities/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_activities_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'activities_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ActivitiesController::newAction',  '_route' => 'activities_new',);
                }
                not_activities_new:

                // activities_edit
                if (preg_match('#^/admin/activities/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_activities_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'activities_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'activities_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ActivitiesController::editAction',));
                }
                not_activities_edit:

                // activities_delete
                if (preg_match('#^/admin/activities/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_activities_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'activities_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'activities_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ActivitiesController::deleteAction',));
                }
                not_activities_delete:

                // activities_search
                if (rtrim($pathinfo, '/') === '/admin/activities/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_activities_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'activities_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'activities_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ActivitiesController::searchAction',  '_route' => 'activities_search',);
                }
                not_activities_search:

                // activities_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/activities/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_activities_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'activities_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'activities_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ActivitiesController::pagesearchAction',  '_route' => 'activities_pagesearch',);
                }
                not_activities_pagesearch:

            }

            if (0 === strpos($pathinfo, '/admin/events')) {
                // events_index
                if (rtrim($pathinfo, '/') === '/admin/events') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_events_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'events_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'events_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EventsController::indexAction',  '_route' => 'events_index',);
                }
                not_events_index:

                // events_show
                if (preg_match('#^/admin/events/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_events_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'events_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'events_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EventsController::showAction',));
                }
                not_events_show:

                // events_new
                if ($pathinfo === '/admin/events/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_events_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'events_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EventsController::newAction',  '_route' => 'events_new',);
                }
                not_events_new:

                // events_edit
                if (preg_match('#^/admin/events/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_events_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'events_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'events_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EventsController::editAction',));
                }
                not_events_edit:

                // events_delete
                if (preg_match('#^/admin/events/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_events_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'events_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'events_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EventsController::deleteAction',));
                }
                not_events_delete:

            }

            if (0 === strpos($pathinfo, '/admin/schedule')) {
                // schedule_index
                if (rtrim($pathinfo, '/') === '/admin/schedule') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_schedule_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'schedule_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'schedule_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ScheduleController::indexAction',  '_route' => 'schedule_index',);
                }
                not_schedule_index:

                // schedule_show
                if (preg_match('#^/admin/schedule/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_schedule_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'schedule_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'schedule_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ScheduleController::showAction',));
                }
                not_schedule_show:

                // schedule_new
                if ($pathinfo === '/admin/schedule/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_schedule_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'schedule_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ScheduleController::newAction',  '_route' => 'schedule_new',);
                }
                not_schedule_new:

                // schedule_edit
                if (preg_match('#^/admin/schedule/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_schedule_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'schedule_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'schedule_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ScheduleController::editAction',));
                }
                not_schedule_edit:

                // schedule_delete
                if (preg_match('#^/admin/schedule/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_schedule_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'schedule_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'schedule_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ScheduleController::deleteAction',));
                }
                not_schedule_delete:

            }

            if (0 === strpos($pathinfo, '/admin/contractschedule')) {
                // contractschedule_index
                if (rtrim($pathinfo, '/') === '/admin/contractschedule') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_contractschedule_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'contractschedule_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'contractschedule_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractScheduleController::indexAction',  '_route' => 'contractschedule_index',);
                }
                not_contractschedule_index:

                // contractschedule_show
                if (preg_match('#^/admin/contractschedule/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_contractschedule_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'contractschedule_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'contractschedule_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractScheduleController::showAction',));
                }
                not_contractschedule_show:

                // contractschedule_new
                if ($pathinfo === '/admin/contractschedule/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_contractschedule_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'contractschedule_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractScheduleController::newAction',  '_route' => 'contractschedule_new',);
                }
                not_contractschedule_new:

                // contractschedule_edit
                if (preg_match('#^/admin/contractschedule/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_contractschedule_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'contractschedule_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'contractschedule_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractScheduleController::editAction',));
                }
                not_contractschedule_edit:

                // contractschedule_delete
                if (preg_match('#^/admin/contractschedule/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_contractschedule_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'contractschedule_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'contractschedule_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractScheduleController::deleteAction',));
                }
                not_contractschedule_delete:

            }

            if (0 === strpos($pathinfo, '/admin/t')) {
                if (0 === strpos($pathinfo, '/admin/typets')) {
                    // typets_index
                    if (rtrim($pathinfo, '/') === '/admin/typets') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_typets_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'typets_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'typets_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TypetsController::indexAction',  '_route' => 'typets_index',);
                    }
                    not_typets_index:

                    // typets_new
                    if ($pathinfo === '/admin/typets/create') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_typets_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'typets_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TypetsController::newAction',  '_route' => 'typets_new',);
                    }
                    not_typets_new:

                    // typets_edit
                    if (preg_match('#^/admin/typets/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_typets_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'typets_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'typets_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TypetsController::editAction',));
                    }
                    not_typets_edit:

                    // typets_message
                    if ($pathinfo === '/admin/typets/message') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_typets_message;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'typets_message', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TypetsController::messageAction',  '_route' => 'typets_message',);
                    }
                    not_typets_message:

                    // typets_delete
                    if (preg_match('#^/admin/typets/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_typets_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'typets_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'typets_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TypetsController::deleteAction',));
                    }
                    not_typets_delete:

                }

                if (0 === strpos($pathinfo, '/admin/tmonth')) {
                    // tmonth_index
                    if (rtrim($pathinfo, '/') === '/admin/tmonth') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_tmonth_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tmonth_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tmonth_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TmonthController::indexAction',  '_route' => 'tmonth_index',);
                    }
                    not_tmonth_index:

                    // tmonth_show
                    if (preg_match('#^/admin/tmonth/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_tmonth_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tmonth_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'tmonth_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TmonthController::showAction',));
                    }
                    not_tmonth_show:

                    // tmonth_new
                    if ($pathinfo === '/admin/tmonth/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tmonth_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tmonth_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TmonthController::newAction',  '_route' => 'tmonth_new',);
                    }
                    not_tmonth_new:

                    // tmonth_edit
                    if (preg_match('#^/admin/tmonth/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tmonth_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tmonth_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'tmonth_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TmonthController::editAction',));
                    }
                    not_tmonth_edit:

                    // tmonth_delete
                    if (preg_match('#^/admin/tmonth/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_tmonth_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tmonth_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'tmonth_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TmonthController::deleteAction',));
                    }
                    not_tmonth_delete:

                }

            }

            if (0 === strpos($pathinfo, '/admin/errors')) {
                // errors_index
                if (rtrim($pathinfo, '/') === '/admin/errors') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_errors_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'errors_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'errors_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ErrorsController::indexAction',  '_route' => 'errors_index',);
                }
                not_errors_index:

                // errors_list
                if (rtrim($pathinfo, '/') === '/admin/errors/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_errors_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'errors_list');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'errors_list', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ErrorsController::listAction',  '_route' => 'errors_list',);
                }
                not_errors_list:

                // errors_page
                if (0 === strpos($pathinfo, '/admin/errors/page') && preg_match('#^/admin/errors/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'errors_page', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'errors_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ErrorsController::pageAction',));
                }

                // errors_show
                if (preg_match('#^/admin/errors/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'errors_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'errors_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ErrorsController::showAction',));
                }

                // errors_search
                if (rtrim($pathinfo, '/') === '/admin/errors/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_errors_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'errors_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'errors_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ErrorsController::searchAction',  '_route' => 'errors_search',);
                }
                not_errors_search:

                // errors_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/errors/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_errors_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'errors_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'errors_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ErrorsController::pagesearchAction',  '_route' => 'errors_pagesearch',);
                }
                not_errors_pagesearch:

                // errors_delete
                if (preg_match('#^/admin/errors/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_errors_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'errors_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'errors_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ErrorsController::deleteAction',));
                }
                not_errors_delete:

            }

            if (0 === strpos($pathinfo, '/admin/t')) {
                if (0 === strpos($pathinfo, '/admin/tday')) {
                    // tday_index
                    if (rtrim($pathinfo, '/') === '/admin/tday') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_tday_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tday_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tday_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TdayController::indexAction',  '_route' => 'tday_index',);
                    }
                    not_tday_index:

                    // tday_show
                    if (preg_match('#^/admin/tday/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_tday_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tday_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'tday_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TdayController::showAction',));
                    }
                    not_tday_show:

                    // tday_new
                    if ($pathinfo === '/admin/tday/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tday_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tday_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TdayController::newAction',  '_route' => 'tday_new',);
                    }
                    not_tday_new:

                    // tday_edit
                    if (preg_match('#^/admin/tday/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tday_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tday_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'tday_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TdayController::editAction',));
                    }
                    not_tday_edit:

                    // tday_delete
                    if (preg_match('#^/admin/tday/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_tday_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tday_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'tday_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TdayController::deleteAction',));
                    }
                    not_tday_delete:

                }

                if (0 === strpos($pathinfo, '/admin/teachers')) {
                    // teachers_index
                    if (rtrim($pathinfo, '/') === '/admin/teachers') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_teachers_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'teachers_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'teachers_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TeachersController::indexAction',  '_route' => 'teachers_index',);
                    }
                    not_teachers_index:

                    // teachers_list
                    if (rtrim($pathinfo, '/') === '/admin/teachers/list') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_teachers_list;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'teachers_list');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'teachers_list', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TeachersController::listAction',  '_route' => 'teachers_list',);
                    }
                    not_teachers_list:

                    // teachers_page
                    if (0 === strpos($pathinfo, '/admin/teachers/page') && preg_match('#^/admin/teachers/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'teachers_page', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'teachers_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TeachersController::pageAction',));
                    }

                    // teachers_show
                    if (preg_match('#^/admin/teachers/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_teachers_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'teachers_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'teachers_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TeachersController::showAction',));
                    }
                    not_teachers_show:

                    // teachers_new
                    if ($pathinfo === '/admin/teachers/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_teachers_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'teachers_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TeachersController::newAction',  '_route' => 'teachers_new',);
                    }
                    not_teachers_new:

                    // teachers_edit
                    if (preg_match('#^/admin/teachers/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_teachers_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'teachers_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'teachers_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TeachersController::editAction',));
                    }
                    not_teachers_edit:

                    // teachers_search
                    if (rtrim($pathinfo, '/') === '/admin/teachers/search') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_teachers_search;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'teachers_search');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'teachers_search', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TeachersController::searchAction',  '_route' => 'teachers_search',);
                    }
                    not_teachers_search:

                    // teachers_pagesearch
                    if (rtrim($pathinfo, '/') === '/admin/teachers/pagesearch') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_teachers_pagesearch;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'teachers_pagesearch');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'teachers_pagesearch', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TeachersController::pagesearchAction',  '_route' => 'teachers_pagesearch',);
                    }
                    not_teachers_pagesearch:

                    // teachers_delete
                    if (preg_match('#^/admin/teachers/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_teachers_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'teachers_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'teachers_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TeachersController::deleteAction',));
                    }
                    not_teachers_delete:

                }

            }

            if (0 === strpos($pathinfo, '/admin/co')) {
                if (0 === strpos($pathinfo, '/admin/coordinator')) {
                    // coordinator_index
                    if (rtrim($pathinfo, '/') === '/admin/coordinator') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_coordinator_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'coordinator_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'coordinator_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CoordinatorController::indexAction',  '_route' => 'coordinator_index',);
                    }
                    not_coordinator_index:

                    // coordinator_list
                    if (rtrim($pathinfo, '/') === '/admin/coordinator/list') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_coordinator_list;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'coordinator_list');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'coordinator_list', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CoordinatorController::listAction',  '_route' => 'coordinator_list',);
                    }
                    not_coordinator_list:

                    // coordinator_page
                    if (0 === strpos($pathinfo, '/admin/coordinator/page') && preg_match('#^/admin/coordinator/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'coordinator_page', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'coordinator_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CoordinatorController::pageAction',));
                    }

                    // coordinator_show
                    if (preg_match('#^/admin/coordinator/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_coordinator_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'coordinator_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'coordinator_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CoordinatorController::showAction',));
                    }
                    not_coordinator_show:

                    // coordinator_new
                    if (rtrim($pathinfo, '/') === '/admin/coordinator/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_coordinator_new;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'coordinator_new');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'coordinator_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CoordinatorController::newAction',  '_route' => 'coordinator_new',);
                    }
                    not_coordinator_new:

                    // coordinator_edit
                    if (preg_match('#^/admin/coordinator/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_coordinator_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'coordinator_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'coordinator_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CoordinatorController::editAction',));
                    }
                    not_coordinator_edit:

                    // coordinator_back
                    if (rtrim($pathinfo, '/') === '/admin/coordinator/back') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_coordinator_back;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'coordinator_back');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'coordinator_back', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CoordinatorController::backAction',  '_route' => 'coordinator_back',);
                    }
                    not_coordinator_back:

                    // coordinator_delete
                    if (preg_match('#^/admin/coordinator/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_coordinator_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'coordinator_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'coordinator_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CoordinatorController::deleteAction',));
                    }
                    not_coordinator_delete:

                    // coordinator_user_create
                    if (preg_match('#^/admin/coordinator/(?P<id>[^/]++)/createuser$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_coordinator_user_create;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'coordinator_user_create', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'coordinator_user_create')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CoordinatorController::createuserAction',));
                    }
                    not_coordinator_user_create:

                    // coordinator_search
                    if (rtrim($pathinfo, '/') === '/admin/coordinator/search') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_coordinator_search;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'coordinator_search');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'coordinator_search', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CoordinatorController::searchAction',  '_route' => 'coordinator_search',);
                    }
                    not_coordinator_search:

                    // coordinator_pagesearch
                    if (rtrim($pathinfo, '/') === '/admin/coordinator/pagesearch') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_coordinator_pagesearch;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'coordinator_pagesearch');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'coordinator_pagesearch', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\CoordinatorController::pagesearchAction',  '_route' => 'coordinator_pagesearch',);
                    }
                    not_coordinator_pagesearch:

                }

                if (0 === strpos($pathinfo, '/admin/contractual')) {
                    // contractual_index
                    if (rtrim($pathinfo, '/') === '/admin/contractual') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_contractual_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contractual_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contractual_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractualController::indexAction',  '_route' => 'contractual_index',);
                    }
                    not_contractual_index:

                    // contractual_show
                    if (preg_match('#^/admin/contractual/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_contractual_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contractual_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contractual_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractualController::showAction',));
                    }
                    not_contractual_show:

                    // contractual_new
                    if (preg_match('#^/admin/contractual/(?P<idcontract>[^/]++)/new$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contractual_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contractual_new', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contractual_new')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractualController::newAction',));
                    }
                    not_contractual_new:

                    // contractual_edit
                    if (preg_match('#^/admin/contractual/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contractual_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contractual_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contractual_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractualController::editAction',));
                    }
                    not_contractual_edit:

                    // contractual_delete
                    if (preg_match('#^/admin/contractual/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_contractual_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contractual_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'contractual_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractualController::deleteAction',));
                    }
                    not_contractual_delete:

                    // contractual_search
                    if (rtrim($pathinfo, '/') === '/admin/contractual/search') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contractual_search;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contractual_search');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contractual_search', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractualController::searchAction',  '_route' => 'contractual_search',);
                    }
                    not_contractual_search:

                    // contractual_pagesearch
                    if (rtrim($pathinfo, '/') === '/admin/contractual/pagesearch') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_contractual_pagesearch;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'contractual_pagesearch');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'contractual_pagesearch', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ContractualController::pagesearchAction',  '_route' => 'contractual_pagesearch',);
                    }
                    not_contractual_pagesearch:

                }

            }

            if (0 === strpos($pathinfo, '/admin/group')) {
                // group_index
                if (rtrim($pathinfo, '/') === '/admin/group') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_group_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'group_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'group_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\GroupController::indexAction',  '_route' => 'group_index',);
                }
                not_group_index:

                // group_nmso
                if (rtrim($pathinfo, '/') === '/admin/group/nmso') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_group_nmso;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'group_nmso');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'group_nmso', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\GroupController::nmsoAction',  '_route' => 'group_nmso',);
                }
                not_group_nmso:

                // group_list
                if (rtrim($pathinfo, '/') === '/admin/group/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_group_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'group_list');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'group_list', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\GroupController::listAction',  '_route' => 'group_list',);
                }
                not_group_list:

                // group_page
                if (0 === strpos($pathinfo, '/admin/group/page') && preg_match('#^/admin/group/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'group_page', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'group_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\GroupController::pageAction',));
                }

                // group_back
                if (rtrim($pathinfo, '/') === '/admin/group/back') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_group_back;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'group_back');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'group_back', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\GroupController::backAction',  '_route' => 'group_back',);
                }
                not_group_back:

                // group_show
                if (preg_match('#^/admin/group/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_group_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'group_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'group_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\GroupController::showAction',));
                }
                not_group_show:

                // group_actualize
                if (preg_match('#^/admin/group/(?P<id>[^/]++)/actualize$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_group_actualize;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'group_actualize', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'group_actualize')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\GroupController::actualizeAction',));
                }
                not_group_actualize:

                // group_close
                if (preg_match('#^/admin/group/(?P<id>[^/]++)/close$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_group_close;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'group_close', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'group_close')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\GroupController::closeAction',));
                }
                not_group_close:

                // group_reopen
                if (preg_match('#^/admin/group/(?P<id>[^/]++)/reopen$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_group_reopen;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'group_reopen', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'group_reopen')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\GroupController::reopenAction',));
                }
                not_group_reopen:

                // group_historic
                if (preg_match('#^/admin/group/(?P<id>[^/]++)/historic$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_group_historic;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'group_historic', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'group_historic')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\GroupController::historicAction',));
                }
                not_group_historic:

                // group_new
                if ($pathinfo === '/admin/group/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_group_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'group_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\GroupController::newAction',  '_route' => 'group_new',);
                }
                not_group_new:

                // group_duplicate
                if (preg_match('#^/admin/group/(?P<id>[^/]++)/duplicate$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_group_duplicate;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'group_duplicate', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'group_duplicate')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\GroupController::duplicateAction',));
                }
                not_group_duplicate:

                // group_newbatch
                if ($pathinfo === '/admin/group/newbatch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_group_newbatch;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'group_newbatch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\GroupController::newbatchAction',  '_route' => 'group_newbatch',);
                }
                not_group_newbatch:

                // group_edit
                if (preg_match('#^/admin/group/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_group_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'group_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'group_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\GroupController::editAction',));
                }
                not_group_edit:

                // group_search
                if (rtrim($pathinfo, '/') === '/admin/group/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_group_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'group_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'group_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\GroupController::searchAction',  '_route' => 'group_search',);
                }
                not_group_search:

                // group_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/group/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_group_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'group_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'group_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\GroupController::pagesearchAction',  '_route' => 'group_pagesearch',);
                }
                not_group_pagesearch:

                // group_delete
                if (preg_match('#^/admin/group/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_group_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'group_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'group_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\GroupController::deleteAction',));
                }
                not_group_delete:

                if (0 === strpos($pathinfo, '/admin/group/update')) {
                    // group_update
                    if (rtrim($pathinfo, '/') === '/admin/group/update') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_group_update;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'group_update');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'group_update', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\GroupController::updateAction',  '_route' => 'group_update',);
                    }
                    not_group_update:

                    // group_updategroup
                    if (rtrim($pathinfo, '/') === '/admin/group/updategroup') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_group_updategroup;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'group_updategroup');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'group_updategroup', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\GroupController::updategroupAction',  '_route' => 'group_updategroup',);
                    }
                    not_group_updategroup:

                }

            }

            if (0 === strpos($pathinfo, '/admin/absences')) {
                // absences_index
                if (rtrim($pathinfo, '/') === '/admin/absences') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_absences_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'absences_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'absences_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AbsencesController::indexAction',  '_route' => 'absences_index',);
                }
                not_absences_index:

                if (0 === strpos($pathinfo, '/admin/absences/employee')) {
                    // absences_employee_index
                    if (rtrim($pathinfo, '/') === '/admin/absences/employee') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_absences_employee_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'absences_employee_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'absences_employee_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AbsencesController::foremployeeAction',  '_route' => 'absences_employee_index',);
                    }
                    not_absences_employee_index:

                    // absences_employee_day
                    if (rtrim($pathinfo, '/') === '/admin/absences/employee/today') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_absences_employee_day;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'absences_employee_day');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'absences_employee_day', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AbsencesController::employeedayAction',  '_route' => 'absences_employee_day',);
                    }
                    not_absences_employee_day:

                    // absences_employee_search
                    if (rtrim($pathinfo, '/') === '/admin/absences/employee/search') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_absences_employee_search;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'absences_employee_search');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'absences_employee_search', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AbsencesController::empsearchAction',  '_route' => 'absences_employee_search',);
                    }
                    not_absences_employee_search:

                }

                // absences_page
                if (0 === strpos($pathinfo, '/admin/absences/page') && preg_match('#^/admin/absences/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'absences_page', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'absences_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AbsencesController::pageAction',));
                }

                // absences_show
                if (preg_match('#^/admin/absences/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_absences_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'absences_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'absences_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AbsencesController::showAction',));
                }
                not_absences_show:

                if (0 === strpos($pathinfo, '/admin/absences/new')) {
                    // absences_new
                    if ($pathinfo === '/admin/absences/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_absences_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'absences_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AbsencesController::newAction',  '_route' => 'absences_new',);
                    }
                    not_absences_new:

                    // absences_new_employee
                    if (rtrim($pathinfo, '/') === '/admin/absences/new/for/employee') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_absences_new_employee;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'absences_new_employee');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'absences_new_employee', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AbsencesController::newforemployeeAction',  '_route' => 'absences_new_employee',);
                    }
                    not_absences_new_employee:

                }

                // absences_edit
                if (preg_match('#^/admin/absences/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_absences_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'absences_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'absences_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AbsencesController::editAction',));
                }
                not_absences_edit:

                // absences_employee_show
                if (preg_match('#^/admin/absences/(?P<id>[^/]++)/employee/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_absences_employee_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'absences_employee_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'absences_employee_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AbsencesController::showforemployeeAction',));
                }
                not_absences_employee_show:

                // absences_employee_edit
                if (preg_match('#^/admin/absences/(?P<id>[^/]++)/employee/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_absences_employee_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'absences_employee_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'absences_employee_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AbsencesController::editforemployeeAction',));
                }
                not_absences_employee_edit:

                // absences_search
                if (rtrim($pathinfo, '/') === '/admin/absences/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_absences_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'absences_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'absences_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AbsencesController::searchAction',  '_route' => 'absences_search',);
                }
                not_absences_search:

                // absences_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/absences/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_absences_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'absences_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'absences_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AbsencesController::pagesearchAction',  '_route' => 'absences_pagesearch',);
                }
                not_absences_pagesearch:

                // absences_delete
                if (preg_match('#^/admin/absences/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_absences_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'absences_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'absences_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AbsencesController::deleteAction',));
                }
                not_absences_delete:

            }

            if (0 === strpos($pathinfo, '/admin/timesheet')) {
                // timesheet_index
                if (rtrim($pathinfo, '/') === '/admin/timesheet') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_timesheet_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'timesheet_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'timesheet_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TimesheetController::indexAction',  '_route' => 'timesheet_index',);
                }
                not_timesheet_index:

                // timesheet_newbysearch
                if (preg_match('#^/admin/timesheet/(?P<idcontract>[^/]++)/newbysearch$#s', $pathinfo, $matches)) {
                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'timesheet_newbysearch', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'timesheet_newbysearch')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TimesheetController::newbysearchAction',));
                }

                // timesheet_contractsearch
                if ($pathinfo === '/admin/timesheet/contractsearch/') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_timesheet_contractsearch;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'timesheet_contractsearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TimesheetController::contractsearchAction',  '_route' => 'timesheet_contractsearch',);
                }
                not_timesheet_contractsearch:

                // timesheet_show
                if (preg_match('#^/admin/timesheet/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_timesheet_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'timesheet_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'timesheet_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TimesheetController::showAction',));
                }
                not_timesheet_show:

                // timesheet_new
                if ($pathinfo === '/admin/timesheet/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_timesheet_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'timesheet_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TimesheetController::newAction',  '_route' => 'timesheet_new',);
                }
                not_timesheet_new:

                // timesheet_edit
                if (preg_match('#^/admin/timesheet/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_timesheet_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'timesheet_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'timesheet_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TimesheetController::editAction',));
                }
                not_timesheet_edit:

                // timesheet_addmany
                if (rtrim($pathinfo, '/') === '/admin/timesheet/new/many') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_timesheet_addmany;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'timesheet_addmany');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'timesheet_addmany', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TimesheetController::addmanyAction',  '_route' => 'timesheet_addmany',);
                }
                not_timesheet_addmany:

                // timesheet_delete
                if (preg_match('#^/admin/timesheet/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_timesheet_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'timesheet_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'timesheet_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TimesheetController::deleteAction',));
                }
                not_timesheet_delete:

            }

            if (0 === strpos($pathinfo, '/admin/substitution')) {
                // substitution_index
                if (rtrim($pathinfo, '/') === '/admin/substitution/index') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_substitution_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'substitution_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'substitution_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SubstitutionController::indexAction',  '_route' => 'substitution_index',);
                }
                not_substitution_index:

                // substitution_list
                if (rtrim($pathinfo, '/') === '/admin/substitution/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_substitution_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'substitution_list');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'substitution_list', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SubstitutionController::listAction',  '_route' => 'substitution_list',);
                }
                not_substitution_list:

                // substitution_daylist
                if ($pathinfo === '/admin/substitution/day/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_substitution_daylist;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'substitution_daylist', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SubstitutionController::daylistAction',  '_route' => 'substitution_daylist',);
                }
                not_substitution_daylist:

                // substitution_page
                if (preg_match('#^/admin/substitution/(?P<option>[^/]++)/page$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_substitution_page;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'substitution_page', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'substitution_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SubstitutionController::pageAction',));
                }
                not_substitution_page:

                // substitution_show
                if (preg_match('#^/admin/substitution/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_substitution_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'substitution_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'substitution_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SubstitutionController::showAction',));
                }
                not_substitution_show:

                // substitution_new
                if (preg_match('#^/admin/substitution/(?P<idcontract>[^/]++)/new$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_substitution_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'substitution_new', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'substitution_new')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SubstitutionController::newAction',));
                }
                not_substitution_new:

                // substitution_edit
                if (preg_match('#^/admin/substitution/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_substitution_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'substitution_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'substitution_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SubstitutionController::editAction',));
                }
                not_substitution_edit:

                // substitution_delete
                if (preg_match('#^/admin/substitution/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_substitution_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'substitution_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'substitution_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SubstitutionController::deleteAction',));
                }
                not_substitution_delete:

                // substitution_search
                if (rtrim($pathinfo, '/') === '/admin/substitution/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_substitution_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'substitution_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'substitution_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SubstitutionController::searchAction',  '_route' => 'substitution_search',);
                }
                not_substitution_search:

                // substitution_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/substitution/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_substitution_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'substitution_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'substitution_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SubstitutionController::pagesearchAction',  '_route' => 'substitution_pagesearch',);
                }
                not_substitution_pagesearch:

                if (0 === strpos($pathinfo, '/admin/substitution/reload')) {
                    // substitution_reload
                    if (rtrim($pathinfo, '/') === '/admin/substitution/reload') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_substitution_reload;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'substitution_reload');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'substitution_reload', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SubstitutionController::reloadAction',  '_route' => 'substitution_reload',);
                    }
                    not_substitution_reload:

                    // substitution_reload2
                    if (rtrim($pathinfo, '/') === '/admin/substitution/reload2') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_substitution_reload2;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'substitution_reload2');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'substitution_reload2', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SubstitutionController::reload2Action',  '_route' => 'substitution_reload2',);
                    }
                    not_substitution_reload2:

                }

                // substitution_holder
                if (rtrim($pathinfo, '/') === '/admin/substitution/holder') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_substitution_holder;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'substitution_holder');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'substitution_holder', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SubstitutionController::holderAction',  '_route' => 'substitution_holder',);
                }
                not_substitution_holder:

                // substitution_substitute
                if (rtrim($pathinfo, '/') === '/admin/substitution/substitute') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_substitution_substitute;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'substitution_substitute');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'substitution_substitute', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SubstitutionController::substituteAction',  '_route' => 'substitution_substitute',);
                }
                not_substitution_substitute:

            }

            if (0 === strpos($pathinfo, '/admin/payroll')) {
                // payroll_index
                if (rtrim($pathinfo, '/') === '/admin/payroll') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_payroll_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'payroll_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'payroll_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PayrollController::indexAction',  '_route' => 'payroll_index',);
                }
                not_payroll_index:

                // payroll_show
                if (preg_match('#^/admin/payroll/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_payroll_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'payroll_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PayrollController::showAction',));
                }
                not_payroll_show:

                // payroll_new
                if ($pathinfo === '/admin/payroll/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_payroll_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'payroll_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PayrollController::newAction',  '_route' => 'payroll_new',);
                }
                not_payroll_new:

                // payroll_extract
                if (preg_match('#^/admin/payroll/(?P<id>[^/]++)/(?P<action>[^/]++)/extract$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_payroll_extract;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'payroll_extract', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_extract')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PayrollController::extractAction',));
                }
                not_payroll_extract:

                // payroll_message
                if ($pathinfo === '/admin/payroll/message') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_payroll_message;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'payroll_message', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PayrollController::messageAction',  '_route' => 'payroll_message',);
                }
                not_payroll_message:

                // payroll_edit
                if (preg_match('#^/admin/payroll/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_payroll_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'payroll_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PayrollController::editAction',));
                }
                not_payroll_edit:

                // payroll_tshours
                if ($pathinfo === '/admin/payroll/tshours') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_payroll_tshours;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'payroll_tshours', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PayrollController::tshoursAction',  '_route' => 'payroll_tshours',);
                }
                not_payroll_tshours:

                // payroll_delete
                if (preg_match('#^/admin/payroll/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_payroll_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'payroll_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'payroll_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PayrollController::deleteAction',));
                }
                not_payroll_delete:

            }

            if (0 === strpos($pathinfo, '/admin/training')) {
                // training_index
                if (rtrim($pathinfo, '/') === '/admin/training') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_training_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'training_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'training_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TrainingController::indexAction',  '_route' => 'training_index',);
                }
                not_training_index:

                // training_show
                if (preg_match('#^/admin/training/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_training_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'training_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'training_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TrainingController::showAction',));
                }
                not_training_show:

                // training_new
                if (preg_match('#^/admin/training/(?P<idcontract>[^/]++)/new$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_training_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'training_new', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'training_new')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TrainingController::newAction',));
                }
                not_training_new:

                // training_edit
                if (preg_match('#^/admin/training/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_training_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'training_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'training_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TrainingController::editAction',));
                }
                not_training_edit:

                // training_delete
                if (preg_match('#^/admin/training/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_training_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'training_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'training_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TrainingController::deleteAction',));
                }
                not_training_delete:

                if (0 === strpos($pathinfo, '/admin/training/update')) {
                    // training_update
                    if ($pathinfo === '/admin/training/update') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_training_update;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'training_update', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TrainingController::updateAction',  '_route' => 'training_update',);
                    }
                    not_training_update:

                    // training_update2
                    if ($pathinfo === '/admin/training/update2') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_training_update2;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'training_update2', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TrainingController::update2Action',  '_route' => 'training_update2',);
                    }
                    not_training_update2:

                }

            }

            if (0 === strpos($pathinfo, '/admin/billing')) {
                // billing_index
                if (rtrim($pathinfo, '/') === '/admin/billing') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_billing_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'billing_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'billing_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\BillingController::indexAction',  '_route' => 'billing_index',);
                }
                not_billing_index:

                // billing_billed
                if (rtrim($pathinfo, '/') === '/admin/billing/billed') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_billing_billed;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'billing_billed');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'billing_billed', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\BillingController::billedAction',  '_route' => 'billing_billed',);
                }
                not_billing_billed:

                // billing_show
                if (preg_match('#^/admin/billing/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_billing_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'billing_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'billing_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\BillingController::showAction',));
                }
                not_billing_show:

                // billing_showts
                if (preg_match('#^/admin/billing/(?P<id>[^/]++)/(?P<idbilling>[^/]++)/showts$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_billing_showts;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'billing_showts', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'billing_showts')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\BillingController::showtsAction',));
                }
                not_billing_showts:

                // billing_bill
                if (preg_match('#^/admin/billing/(?P<id>[^/]++)/bill$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_billing_bill;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'billing_bill', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'billing_bill')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\BillingController::billAction',));
                }
                not_billing_bill:

            }

            if (0 === strpos($pathinfo, '/admin/cyclepay')) {
                // cyclepay_index
                if (rtrim($pathinfo, '/') === '/admin/cyclepay') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_cyclepay_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'cyclepay_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'cyclepay_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'BoAdminBundle:CyclePay:index',  '_route' => 'cyclepay_index',);
                }
                not_cyclepay_index:

                // cyclepay_show
                if (preg_match('#^/admin/cyclepay/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_cyclepay_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'cyclepay_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'cyclepay_show')), array (  '_controller' => 'BoAdminBundle:CyclePay:show',));
                }
                not_cyclepay_show:

                // cyclepay_new
                if ($pathinfo === '/admin/cyclepay/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_cyclepay_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'cyclepay_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'BoAdminBundle:CyclePay:new',  '_route' => 'cyclepay_new',);
                }
                not_cyclepay_new:

                // cyclepay_edit
                if (preg_match('#^/admin/cyclepay/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_cyclepay_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'cyclepay_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'cyclepay_edit')), array (  '_controller' => 'BoAdminBundle:CyclePay:edit',));
                }
                not_cyclepay_edit:

                // cyclepay_delete
                if (preg_match('#^/admin/cyclepay/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_cyclepay_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'cyclepay_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'cyclepay_delete')), array (  '_controller' => 'BoAdminBundle:CyclePay:delete',));
                }
                not_cyclepay_delete:

            }

            if (0 === strpos($pathinfo, '/admin/message')) {
                // message_index
                if (rtrim($pathinfo, '/') === '/admin/message') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_message_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'message_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'message_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MessageController::indexAction',  '_route' => 'message_index',);
                }
                not_message_index:

                // message_list
                if (rtrim($pathinfo, '/') === '/admin/message/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_message_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'message_list');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'message_list', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MessageController::listAction',  '_route' => 'message_list',);
                }
                not_message_list:

                // message_page
                if (0 === strpos($pathinfo, '/admin/message/page') && preg_match('#^/admin/message/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'message_page', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'message_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MessageController::pageAction',));
                }

                // message_show
                if (preg_match('#^/admin/message/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_message_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'message_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'message_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MessageController::showAction',));
                }
                not_message_show:

                // message_new
                if ($pathinfo === '/admin/message/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_message_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'message_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MessageController::newAction',  '_route' => 'message_new',);
                }
                not_message_new:

                // message_duplicate
                if (preg_match('#^/admin/message/(?P<id>[^/]++)/duplicate$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_message_duplicate;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'message_duplicate', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'message_duplicate')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MessageController::duplicateAction',));
                }
                not_message_duplicate:

                // message_edit
                if (preg_match('#^/admin/message/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_message_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'message_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'message_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MessageController::editAction',));
                }
                not_message_edit:

                // message_delete
                if (preg_match('#^/admin/message/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_message_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'message_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'message_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MessageController::deleteAction',));
                }
                not_message_delete:

                // message_search
                if (rtrim($pathinfo, '/') === '/admin/message/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_message_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'message_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'message_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MessageController::searchAction',  '_route' => 'message_search',);
                }
                not_message_search:

                // message_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/message/pagesearch') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'message_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'message_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MessageController::pagesearchAction',  '_route' => 'message_pagesearch',);
                }

            }

            if (0 === strpos($pathinfo, '/admin/periodpay')) {
                // periodpay_index
                if (rtrim($pathinfo, '/') === '/admin/periodpay') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_periodpay_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'periodpay_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'periodpay_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PeriodPayController::indexAction',  '_route' => 'periodpay_index',);
                }
                not_periodpay_index:

                // periodpay_show
                if (preg_match('#^/admin/periodpay/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_periodpay_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'periodpay_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'periodpay_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PeriodPayController::showAction',));
                }
                not_periodpay_show:

                // periodpay_new
                if ($pathinfo === '/admin/periodpay/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_periodpay_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'periodpay_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PeriodPayController::newAction',  '_route' => 'periodpay_new',);
                }
                not_periodpay_new:

                // periodpay_edit
                if (preg_match('#^/admin/periodpay/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_periodpay_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'periodpay_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'periodpay_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PeriodPayController::editAction',));
                }
                not_periodpay_edit:

                // periodpay_delete
                if (preg_match('#^/admin/periodpay/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_periodpay_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'periodpay_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'periodpay_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PeriodPayController::deleteAction',));
                }
                not_periodpay_delete:

            }

            if (0 === strpos($pathinfo, '/admin/rubric')) {
                // rubric_index
                if (rtrim($pathinfo, '/') === '/admin/rubric') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_rubric_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'rubric_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'rubric_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\RubricController::indexAction',  '_route' => 'rubric_index',);
                }
                not_rubric_index:

                // rubric_show
                if (preg_match('#^/admin/rubric/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_rubric_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'rubric_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'rubric_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\RubricController::showAction',));
                }
                not_rubric_show:

                // rubric_new
                if ($pathinfo === '/admin/rubric/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_rubric_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'rubric_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\RubricController::newAction',  '_route' => 'rubric_new',);
                }
                not_rubric_new:

                // subrubric_new
                if ($pathinfo === '/admin/rubric/sub/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_subrubric_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'subrubric_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\RubricController::subnewAction',  '_route' => 'subrubric_new',);
                }
                not_subrubric_new:

                // subrubric_edit
                if (preg_match('#^/admin/rubric/(?P<id>[^/]++)/sub/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_subrubric_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'subrubric_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'subrubric_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\RubricController::subeditAction',));
                }
                not_subrubric_edit:

                // rubric_edit
                if (preg_match('#^/admin/rubric/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_rubric_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'rubric_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'rubric_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\RubricController::editAction',));
                }
                not_rubric_edit:

                // rubric_delete
                if (preg_match('#^/admin/rubric/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_rubric_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'rubric_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'rubric_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\RubricController::deleteAction',));
                }
                not_rubric_delete:

            }

            if (0 === strpos($pathinfo, '/admin/advisors')) {
                // advisors_index
                if (rtrim($pathinfo, '/') === '/admin/advisors') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_advisors_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'advisors_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'advisors_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AdvisorsController::indexAction',  '_route' => 'advisors_index',);
                }
                not_advisors_index:

                // advisors_list
                if (rtrim($pathinfo, '/') === '/admin/advisors/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_advisors_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'advisors_list');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'advisors_list', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AdvisorsController::listAction',  '_route' => 'advisors_list',);
                }
                not_advisors_list:

                // advisors_page
                if (0 === strpos($pathinfo, '/admin/advisors/page') && preg_match('#^/admin/advisors/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'advisors_page', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'advisors_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AdvisorsController::pageAction',));
                }

                // advisors_show
                if (preg_match('#^/admin/advisors/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_advisors_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'advisors_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'advisors_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AdvisorsController::showAction',));
                }
                not_advisors_show:

                // advisors_new
                if ($pathinfo === '/admin/advisors/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_advisors_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'advisors_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AdvisorsController::newAction',  '_route' => 'advisors_new',);
                }
                not_advisors_new:

                // advisors_edit
                if (preg_match('#^/admin/advisors/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_advisors_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'advisors_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'advisors_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AdvisorsController::editAction',));
                }
                not_advisors_edit:

                // advisors_search
                if (rtrim($pathinfo, '/') === '/admin/advisors/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_advisors_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'advisors_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'advisors_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AdvisorsController::searchAction',  '_route' => 'advisors_search',);
                }
                not_advisors_search:

                // advisors_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/advisors/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_advisors_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'advisors_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'advisors_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AdvisorsController::pagesearchAction',  '_route' => 'advisors_pagesearch',);
                }
                not_advisors_pagesearch:

                // advisors_delete
                if (preg_match('#^/admin/advisors/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_advisors_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'advisors_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'advisors_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AdvisorsController::deleteAction',));
                }
                not_advisors_delete:

            }

            if (0 === strpos($pathinfo, '/admin/holidayslist')) {
                // holidayslist_index
                if (rtrim($pathinfo, '/') === '/admin/holidayslist') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_holidayslist_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'holidayslist_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'holidayslist_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HolidayslistController::indexAction',  '_route' => 'holidayslist_index',);
                }
                not_holidayslist_index:

                // holidayslist_list
                if (rtrim($pathinfo, '/') === '/admin/holidayslist/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_holidayslist_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'holidayslist_list');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'holidayslist_list', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HolidayslistController::listAction',  '_route' => 'holidayslist_list',);
                }
                not_holidayslist_list:

                // holidayslist_page
                if (0 === strpos($pathinfo, '/admin/holidayslist/page') && preg_match('#^/admin/holidayslist/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'holidayslist_page', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'holidayslist_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HolidayslistController::pageAction',));
                }

                // holidayslist_show
                if (preg_match('#^/admin/holidayslist/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_holidayslist_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'holidayslist_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'holidayslist_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HolidayslistController::showAction',));
                }
                not_holidayslist_show:

                // holidayslist_duplicate
                if (preg_match('#^/admin/holidayslist/(?P<id>[^/]++)/duplicate$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_holidayslist_duplicate;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'holidayslist_duplicate', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'holidayslist_duplicate')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HolidayslistController::duplicateAction',));
                }
                not_holidayslist_duplicate:

                // holidayslist_new
                if ($pathinfo === '/admin/holidayslist/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_holidayslist_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'holidayslist_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HolidayslistController::newAction',  '_route' => 'holidayslist_new',);
                }
                not_holidayslist_new:

                // holidayslist_edit
                if (preg_match('#^/admin/holidayslist/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_holidayslist_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'holidayslist_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'holidayslist_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HolidayslistController::editAction',));
                }
                not_holidayslist_edit:

                // holidayslist_delete
                if (preg_match('#^/admin/holidayslist/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_holidayslist_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'holidayslist_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'holidayslist_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HolidayslistController::deleteAction',));
                }
                not_holidayslist_delete:

                // holidayslist_search
                if (rtrim($pathinfo, '/') === '/admin/holidayslist/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_holidayslist_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'holidayslist_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'holidayslist_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HolidayslistController::searchAction',  '_route' => 'holidayslist_search',);
                }
                not_holidayslist_search:

                // holidayslist_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/holidayslist/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_holidayslist_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'holidayslist_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'holidayslist_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HolidayslistController::pagesearchAction',  '_route' => 'holidayslist_pagesearch',);
                }
                not_holidayslist_pagesearch:

            }

            if (0 === strpos($pathinfo, '/admin/billingcontact')) {
                // billingcontact_index
                if (rtrim($pathinfo, '/') === '/admin/billingcontact') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_billingcontact_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'billingcontact_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'billingcontact_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\BillingContactController::indexAction',  '_route' => 'billingcontact_index',);
                }
                not_billingcontact_index:

                // billingcontact_show
                if (preg_match('#^/admin/billingcontact/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_billingcontact_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'billingcontact_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'billingcontact_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\BillingContactController::showAction',));
                }
                not_billingcontact_show:

                // billingcontact_new
                if ($pathinfo === '/admin/billingcontact/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_billingcontact_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'billingcontact_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\BillingContactController::newAction',  '_route' => 'billingcontact_new',);
                }
                not_billingcontact_new:

                // billingcontact_edit
                if (preg_match('#^/admin/billingcontact/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_billingcontact_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'billingcontact_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'billingcontact_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\BillingContactController::editAction',));
                }
                not_billingcontact_edit:

                // billingcontact_delete
                if (preg_match('#^/admin/billingcontact/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_billingcontact_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'billingcontact_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'billingcontact_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\BillingContactController::deleteAction',));
                }
                not_billingcontact_delete:

            }

            // bo_admin_test
            if (rtrim($pathinfo, '/') === '/admin/test') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'bo_admin_test');
                }

                $requiredSchemes = array (  'https' => 0,);
                if (!isset($requiredSchemes[$this->context->getScheme()])) {
                    return $this->redirect($pathinfo, 'bo_admin_test', key($requiredSchemes));
                }

                return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TestController::indexAction',  '_route' => 'bo_admin_test',);
            }

            if (0 === strpos($pathinfo, '/admin/payroll')) {
                if (0 === strpos($pathinfo, '/admin/payroll/admin')) {
                    // hadmin_index
                    if (rtrim($pathinfo, '/') === '/admin/payroll/admin') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_hadmin_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'hadmin_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hadmin_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HadminController::indexAction',  '_route' => 'hadmin_index',);
                    }
                    not_hadmin_index:

                    // hadmin_show
                    if (preg_match('#^/admin/payroll/admin/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_hadmin_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hadmin_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'hadmin_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HadminController::showAction',));
                    }
                    not_hadmin_show:

                    // hadmin_new
                    if ($pathinfo === '/admin/payroll/admin/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_hadmin_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hadmin_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HadminController::newAction',  '_route' => 'hadmin_new',);
                    }
                    not_hadmin_new:

                    // hadmin_edit
                    if (preg_match('#^/admin/payroll/admin/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_hadmin_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hadmin_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'hadmin_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HadminController::editAction',));
                    }
                    not_hadmin_edit:

                    // hadmin_delete
                    if (preg_match('#^/admin/payroll/admin/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_hadmin_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hadmin_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'hadmin_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HadminController::deleteAction',));
                    }
                    not_hadmin_delete:

                }

                if (0 === strpos($pathinfo, '/admin/payroll/teaching')) {
                    // hteaching_index
                    if (rtrim($pathinfo, '/') === '/admin/payroll/teaching') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_hteaching_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'hteaching_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hteaching_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HteachingController::indexAction',  '_route' => 'hteaching_index',);
                    }
                    not_hteaching_index:

                    // hteaching_show
                    if (preg_match('#^/admin/payroll/teaching/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_hteaching_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hteaching_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'hteaching_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HteachingController::showAction',));
                    }
                    not_hteaching_show:

                    // hteaching_new
                    if ($pathinfo === '/admin/payroll/teaching/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_hteaching_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hteaching_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HteachingController::newAction',  '_route' => 'hteaching_new',);
                    }
                    not_hteaching_new:

                    // hteaching_edit
                    if (preg_match('#^/admin/payroll/teaching/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_hteaching_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hteaching_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'hteaching_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HteachingController::editAction',));
                    }
                    not_hteaching_edit:

                    // hteaching_delete
                    if (preg_match('#^/admin/payroll/teaching/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_hteaching_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hteaching_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'hteaching_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HteachingController::deleteAction',));
                    }
                    not_hteaching_delete:

                }

                if (0 === strpos($pathinfo, '/admin/payroll/noshow')) {
                    // hnoshow_index
                    if (rtrim($pathinfo, '/') === '/admin/payroll/noshow') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_hnoshow_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'hnoshow_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hnoshow_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HnoshowController::indexAction',  '_route' => 'hnoshow_index',);
                    }
                    not_hnoshow_index:

                    // hnoshow_show
                    if (preg_match('#^/admin/payroll/noshow/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_hnoshow_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hnoshow_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'hnoshow_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HnoshowController::showAction',));
                    }
                    not_hnoshow_show:

                    // hnoshow_new
                    if ($pathinfo === '/admin/payroll/noshow/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_hnoshow_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hnoshow_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HnoshowController::newAction',  '_route' => 'hnoshow_new',);
                    }
                    not_hnoshow_new:

                    // hnoshow_edit
                    if (preg_match('#^/admin/payroll/noshow/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_hnoshow_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hnoshow_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'hnoshow_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HnoshowController::editAction',));
                    }
                    not_hnoshow_edit:

                    // hnoshow_delete
                    if (preg_match('#^/admin/payroll/noshow/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_hnoshow_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hnoshow_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'hnoshow_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HnoshowController::deleteAction',));
                    }
                    not_hnoshow_delete:

                }

                if (0 === strpos($pathinfo, '/admin/payroll/holiday')) {
                    // hholiday_index
                    if (rtrim($pathinfo, '/') === '/admin/payroll/holiday') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_hholiday_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'hholiday_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hholiday_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HholidayController::indexAction',  '_route' => 'hholiday_index',);
                    }
                    not_hholiday_index:

                    // hholiday_show
                    if (preg_match('#^/admin/payroll/holiday/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_hholiday_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hholiday_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'hholiday_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HholidayController::showAction',));
                    }
                    not_hholiday_show:

                    // hholiday_new
                    if ($pathinfo === '/admin/payroll/holiday/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_hholiday_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hholiday_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HholidayController::newAction',  '_route' => 'hholiday_new',);
                    }
                    not_hholiday_new:

                    // hholiday_edit
                    if (preg_match('#^/admin/payroll/holiday/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_hholiday_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hholiday_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'hholiday_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HholidayController::editAction',));
                    }
                    not_hholiday_edit:

                    // hholiday_delete
                    if (preg_match('#^/admin/payroll/holiday/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_hholiday_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hholiday_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'hholiday_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HholidayController::deleteAction',));
                    }
                    not_hholiday_delete:

                }

                if (0 === strpos($pathinfo, '/admin/payroll/others')) {
                    // hothers_index
                    if (rtrim($pathinfo, '/') === '/admin/payroll/others') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_hothers_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'hothers_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hothers_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HothersController::indexAction',  '_route' => 'hothers_index',);
                    }
                    not_hothers_index:

                    // hothers_show
                    if (preg_match('#^/admin/payroll/others/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_hothers_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hothers_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'hothers_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HothersController::showAction',));
                    }
                    not_hothers_show:

                    // hothers_new
                    if ($pathinfo === '/admin/payroll/others/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_hothers_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hothers_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HothersController::newAction',  '_route' => 'hothers_new',);
                    }
                    not_hothers_new:

                    // hothers_edit
                    if (preg_match('#^/admin/payroll/others/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_hothers_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hothers_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'hothers_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HothersController::editAction',));
                    }
                    not_hothers_edit:

                    // hothers_delete
                    if (preg_match('#^/admin/payroll/others/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_hothers_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'hothers_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'hothers_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\HothersController::deleteAction',));
                    }
                    not_hothers_delete:

                }

            }

            if (0 === strpos($pathinfo, '/admin/teachers/schedule')) {
                // teacherschedule_index
                if (rtrim($pathinfo, '/') === '/admin/teachers/schedule/index') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_teacherschedule_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'teacherschedule_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'teacherschedule_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'BoAdminBundle:TeacherSchedule:index',  '_route' => 'teacherschedule_index',);
                }
                not_teacherschedule_index:

                // teacherschedule_show
                if (preg_match('#^/admin/teachers/schedule/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_teacherschedule_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'teacherschedule_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'teacherschedule_show')), array (  '_controller' => 'BoAdminBundle:TeacherSchedule:show',));
                }
                not_teacherschedule_show:

                // teacherschedule_new
                if (preg_match('#^/admin/teachers/schedule/(?P<idcontract>[^/]++)/new$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_teacherschedule_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'teacherschedule_new', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'teacherschedule_new')), array (  '_controller' => 'BoAdminBundle:TeacherSchedule:new',));
                }
                not_teacherschedule_new:

                // teacherschedule_edit
                if (preg_match('#^/admin/teachers/schedule/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_teacherschedule_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'teacherschedule_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'teacherschedule_edit')), array (  '_controller' => 'BoAdminBundle:TeacherSchedule:edit',));
                }
                not_teacherschedule_edit:

                // teacherschedule_schedule
                if (preg_match('#^/admin/teachers/schedule/(?P<idemployee>[^/]++)/(?P<idcontract>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_teacherschedule_schedule;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'teacherschedule_schedule', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'teacherschedule_schedule')), array (  '_controller' => 'BoAdminBundle:TeacherSchedule:schedule',));
                }
                not_teacherschedule_schedule:

                // teacherschedule_check
                if (rtrim($pathinfo, '/') === '/admin/teachers/schedule/check') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_teacherschedule_check;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'teacherschedule_check');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'teacherschedule_check', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'BoAdminBundle:TeacherSchedule:check',  '_route' => 'teacherschedule_check',);
                }
                not_teacherschedule_check:

                // teacherschedule_remove
                if (preg_match('#^/admin/teachers/schedule/(?P<idemployee>[^/]++)/(?P<idcontract>[^/]++)/remove$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_teacherschedule_remove;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'teacherschedule_remove', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'teacherschedule_remove')), array (  '_controller' => 'BoAdminBundle:TeacherSchedule:remove',));
                }
                not_teacherschedule_remove:

                // teacherschedule_delete
                if (preg_match('#^/admin/teachers/schedule/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_teacherschedule_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'teacherschedule_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'teacherschedule_delete')), array (  '_controller' => 'BoAdminBundle:TeacherSchedule:delete',));
                }
                not_teacherschedule_delete:

                // teacherschedule_historic
                if (preg_match('#^/admin/teachers/schedule/(?P<idcontract>[^/]++)/new$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_teacherschedule_historic;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'teacherschedule_historic', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'teacherschedule_historic')), array (  '_controller' => 'BoAdminBundle:TeacherSchedule:new',));
                }
                not_teacherschedule_historic:

                // teacherschedule_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/teachers/schedule/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_teacherschedule_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'teacherschedule_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'teacherschedule_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'BoAdminBundle:TeacherSchedule:pagesearch',  '_route' => 'teacherschedule_pagesearch',);
                }
                not_teacherschedule_pagesearch:

                // teacherschedule_search
                if (rtrim($pathinfo, '/') === '/admin/teachers/schedule/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_teacherschedule_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'teacherschedule_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'teacherschedule_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'BoAdminBundle:TeacherSchedule:search',  '_route' => 'teacherschedule_search',);
                }
                not_teacherschedule_search:

            }

            if (0 === strpos($pathinfo, '/admin/mails')) {
                // mails_index
                if (rtrim($pathinfo, '/') === '/admin/mails') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_mails_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'mails_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'mails_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MailsController::indexAction',  '_route' => 'mails_index',);
                }
                not_mails_index:

                // mails_show
                if (preg_match('#^/admin/mails/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_mails_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'mails_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'mails_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MailsController::showAction',));
                }
                not_mails_show:

                // mails_new
                if ($pathinfo === '/admin/mails/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_mails_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'mails_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MailsController::newAction',  '_route' => 'mails_new',);
                }
                not_mails_new:

                // mails_edit
                if (preg_match('#^/admin/mails/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_mails_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'mails_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'mails_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MailsController::editAction',));
                }
                not_mails_edit:

                // mails_delete
                if (preg_match('#^/admin/mails/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_mails_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'mails_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'mails_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MailsController::deleteAction',));
                }
                not_mails_delete:

            }

            if (0 === strpos($pathinfo, '/admin/language')) {
                // language_index
                if (rtrim($pathinfo, '/') === '/admin/language') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_language_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'language_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'language_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LanguageController::indexAction',  '_route' => 'language_index',);
                }
                not_language_index:

                // language_show
                if (preg_match('#^/admin/language/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_language_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'language_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'language_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LanguageController::showAction',));
                }
                not_language_show:

                // language_new
                if ($pathinfo === '/admin/language/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_language_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'language_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LanguageController::newAction',  '_route' => 'language_new',);
                }
                not_language_new:

                // language_edit
                if (preg_match('#^/admin/language/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_language_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'language_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'language_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LanguageController::editAction',));
                }
                not_language_edit:

                // language_delete
                if (preg_match('#^/admin/language/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_language_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'language_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'language_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\LanguageController::deleteAction',));
                }
                not_language_delete:

            }

            if (0 === strpos($pathinfo, '/admin/tickets')) {
                // tickets_index
                if (rtrim($pathinfo, '/') === '/admin/tickets') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_tickets_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tickets_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tickets_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TicketsController::indexAction',  '_route' => 'tickets_index',);
                }
                not_tickets_index:

                // tickets_list
                if (rtrim($pathinfo, '/') === '/admin/tickets/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_tickets_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tickets_list');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tickets_list', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TicketsController::listAction',  '_route' => 'tickets_list',);
                }
                not_tickets_list:

                // tickets_page
                if (0 === strpos($pathinfo, '/admin/tickets/page') && preg_match('#^/admin/tickets/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tickets_page', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tickets_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TicketsController::pageAction',));
                }

                // tickets_show
                if (preg_match('#^/admin/tickets/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_tickets_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tickets_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tickets_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TicketsController::showAction',));
                }
                not_tickets_show:

                // tickets_new
                if ($pathinfo === '/admin/tickets/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tickets_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tickets_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TicketsController::newAction',  '_route' => 'tickets_new',);
                }
                not_tickets_new:

                // tickets_edit
                if (preg_match('#^/admin/tickets/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tickets_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tickets_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tickets_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TicketsController::editAction',));
                }
                not_tickets_edit:

                // tickets_delete
                if (preg_match('#^/admin/tickets/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_tickets_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tickets_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tickets_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TicketsController::deleteAction',));
                }
                not_tickets_delete:

                // tickets_back
                if (rtrim($pathinfo, '/') === '/admin/tickets/back') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_tickets_back;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tickets_back');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tickets_back', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TicketsController::backAction',  '_route' => 'tickets_back',);
                }
                not_tickets_back:

                // tickets_search
                if (rtrim($pathinfo, '/') === '/admin/tickets/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tickets_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tickets_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tickets_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TicketsController::searchAction',  '_route' => 'tickets_search',);
                }
                not_tickets_search:

                // tickets_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/tickets/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tickets_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tickets_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tickets_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TicketsController::pagesearchAction',  '_route' => 'tickets_pagesearch',);
                }
                not_tickets_pagesearch:

            }

            if (0 === strpos($pathinfo, '/admin/documents')) {
                // documents_index
                if (rtrim($pathinfo, '/') === '/admin/documents') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_documents_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'documents_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'documents_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DocumentsController::indexAction',  '_route' => 'documents_index',);
                }
                not_documents_index:

                // documents_show
                if (preg_match('#^/admin/documents/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_documents_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'documents_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'documents_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DocumentsController::showAction',));
                }
                not_documents_show:

                // documents_new
                if ($pathinfo === '/admin/documents/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_documents_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'documents_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DocumentsController::newAction',  '_route' => 'documents_new',);
                }
                not_documents_new:

                // documents_edit
                if (preg_match('#^/admin/documents/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_documents_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'documents_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'documents_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DocumentsController::editAction',));
                }
                not_documents_edit:

                // documents_delete
                if (preg_match('#^/admin/documents/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_documents_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'documents_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'documents_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DocumentsController::deleteAction',));
                }
                not_documents_delete:

            }

            if (0 === strpos($pathinfo, '/admin/tools')) {
                // tools_index
                if (rtrim($pathinfo, '/') === '/admin/tools') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_tools_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tools_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tools_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::indexAction',  '_route' => 'tools_index',);
                }
                not_tools_index:

                // tools_send
                if (rtrim($pathinfo, '/') === '/admin/tools/send') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_tools_send;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tools_send');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tools_send', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::sendAction',  '_route' => 'tools_send',);
                }
                not_tools_send:

                if (0 === strpos($pathinfo, '/admin/tools/remove')) {
                    // tools_remove_group
                    if (rtrim($pathinfo, '/') === '/admin/tools/remove/group') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_remove_group;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_remove_group');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_remove_group', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::removeofgroupAction',  '_route' => 'tools_remove_group',);
                    }
                    not_tools_remove_group:

                    // tools_remove_schedule
                    if (rtrim($pathinfo, '/') === '/admin/tools/remove/schedule') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_remove_schedule;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_remove_schedule');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_remove_schedule', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::removescheduleAction',  '_route' => 'tools_remove_schedule',);
                    }
                    not_tools_remove_schedule:

                }

                if (0 === strpos($pathinfo, '/admin/tools/display/schedule')) {
                    // tools_display_schedule
                    if (rtrim($pathinfo, '/') === '/admin/tools/display/schedule') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_display_schedule;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_display_schedule');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_display_schedule', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::displayscheduleAction',  '_route' => 'tools_display_schedule',);
                    }
                    not_tools_display_schedule:

                    if (0 === strpos($pathinfo, '/admin/tools/display/scheduleb')) {
                        // tools_display_schedulebis
                        if (rtrim($pathinfo, '/') === '/admin/tools/display/schedulebis') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_tools_display_schedulebis;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'tools_display_schedulebis');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'tools_display_schedulebis', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::displayschedulebisAction',  '_route' => 'tools_display_schedulebis',);
                        }
                        not_tools_display_schedulebis:

                        // tools_display_schedulebyid
                        if (rtrim($pathinfo, '/') === '/admin/tools/display/schedulebyid') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_tools_display_schedulebyid;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'tools_display_schedulebyid');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'tools_display_schedulebyid', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::displayschedulebyidAction',  '_route' => 'tools_display_schedulebyid',);
                        }
                        not_tools_display_schedulebyid:

                    }

                }

                if (0 === strpos($pathinfo, '/admin/tools/show')) {
                    // tools_show_schedule
                    if (rtrim($pathinfo, '/') === '/admin/tools/show/schedule') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_show_schedule;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_show_schedule');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_show_schedule', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::showscheduleAction',  '_route' => 'tools_show_schedule',);
                    }
                    not_tools_show_schedule:

                    // tools_show_missing
                    if (rtrim($pathinfo, '/') === '/admin/tools/show/missing') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_show_missing;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_show_missing');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_show_missing', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::missingAction',  '_route' => 'tools_show_missing',);
                    }
                    not_tools_show_missing:

                }

                // tools_add_localtogroup
                if (rtrim($pathinfo, '/') === '/admin/tools/addlocal/togroup') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tools_add_localtogroup;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tools_add_localtogroup');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tools_add_localtogroup', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::addlocaltogroupAction',  '_route' => 'tools_add_localtogroup',);
                }
                not_tools_add_localtogroup:

                if (0 === strpos($pathinfo, '/admin/tools/update')) {
                    // tools_add_teacheremail
                    if (rtrim($pathinfo, '/') === '/admin/tools/update/teacher/email') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_add_teacheremail;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_add_teacheremail');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_add_teacheremail', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::updateteacheremailAction',  '_route' => 'tools_add_teacheremail',);
                    }
                    not_tools_add_teacheremail:

                    // tools_add_updatelogin
                    if (rtrim($pathinfo, '/') === '/admin/tools/update/login') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_add_updatelogin;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_add_updatelogin');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_add_updatelogin', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::updateloginAction',  '_route' => 'tools_add_updatelogin',);
                    }
                    not_tools_add_updatelogin:

                }

                // tools_add_localtocontract
                if (rtrim($pathinfo, '/') === '/admin/tools/addlocal/tocontract') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tools_add_localtocontract;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tools_add_localtocontract');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tools_add_localtocontract', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::addlocaltocontractAction',  '_route' => 'tools_add_localtocontract',);
                }
                not_tools_add_localtocontract:

                // tools_remove_tbsgroup
                if (rtrim($pathinfo, '/') === '/admin/tools/remove/tbs/group') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tools_remove_tbsgroup;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tools_remove_tbsgroup');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tools_remove_tbsgroup', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::removeTbsGroupEmployeeAction',  '_route' => 'tools_remove_tbsgroup',);
                }
                not_tools_remove_tbsgroup:

                // tools_close_contracts
                if (rtrim($pathinfo, '/') === '/admin/tools/close/contrats') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tools_close_contracts;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tools_close_contracts');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tools_close_contracts', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::closecontractAction',  '_route' => 'tools_close_contracts',);
                }
                not_tools_close_contracts:

                if (0 === strpos($pathinfo, '/admin/tools/update')) {
                    // tools_update_tlgroup
                    if (rtrim($pathinfo, '/') === '/admin/tools/update/tlgroup') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_update_tlgroup;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_update_tlgroup');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_update_tlgroup', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::updatetlgroupAction',  '_route' => 'tools_update_tlgroup',);
                    }
                    not_tools_update_tlgroup:

                    // tools_update_statusofgroup
                    if (rtrim($pathinfo, '/') === '/admin/tools/update/statusofgroup') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_update_statusofgroup;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_update_statusofgroup');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_update_statusofgroup', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::statusofgroupAction',  '_route' => 'tools_update_statusofgroup',);
                    }
                    not_tools_update_statusofgroup:

                    // tools_update_amorpm
                    if (rtrim($pathinfo, '/') === '/admin/tools/update/amorpm') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_update_amorpm;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_update_amorpm');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_update_amorpm', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::updateamorpmAction',  '_route' => 'tools_update_amorpm',);
                    }
                    not_tools_update_amorpm:

                    // tools_update_localstatus
                    if (rtrim($pathinfo, '/') === '/admin/tools/update/releaseroom') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_update_localstatus;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_update_localstatus');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_update_localstatus', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::releaseroomAction',  '_route' => 'tools_update_localstatus',);
                    }
                    not_tools_update_localstatus:

                }

                // tools_free_allroom
                if (rtrim($pathinfo, '/') === '/admin/tools/free/allroom') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tools_free_allroom;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tools_free_allroom');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tools_free_allroom', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::freeroomAction',  '_route' => 'tools_free_allroom',);
                }
                not_tools_free_allroom:

                if (0 === strpos($pathinfo, '/admin/tools/remove')) {
                    if (0 === strpos($pathinfo, '/admin/tools/remove/teacher')) {
                        // tools_remove_ofcontract
                        if (rtrim($pathinfo, '/') === '/admin/tools/remove/teacher') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_tools_remove_ofcontract;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'tools_remove_ofcontract');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'tools_remove_ofcontract', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::teacherofcontractAction',  '_route' => 'tools_remove_ofcontract',);
                        }
                        not_tools_remove_ofcontract:

                        // tools_remove_ofcontract2
                        if (rtrim($pathinfo, '/') === '/admin/tools/remove/teacher2') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_tools_remove_ofcontract2;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'tools_remove_ofcontract2');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'tools_remove_ofcontract2', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::teacherofcontract2Action',  '_route' => 'tools_remove_ofcontract2',);
                        }
                        not_tools_remove_ofcontract2:

                        // tools_removeteacher_fromcontract
                        if (rtrim($pathinfo, '/') === '/admin/tools/remove/teacher/contract') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_tools_removeteacher_fromcontract;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'tools_removeteacher_fromcontract');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'tools_removeteacher_fromcontract', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::removefromcontractAction',  '_route' => 'tools_removeteacher_fromcontract',);
                        }
                        not_tools_removeteacher_fromcontract:

                    }

                    if (0 === strpos($pathinfo, '/admin/tools/remove/local')) {
                        // tools_removelocal_fromcontract
                        if (rtrim($pathinfo, '/') === '/admin/tools/remove/local/contract') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_tools_removelocal_fromcontract;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'tools_removelocal_fromcontract');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'tools_removelocal_fromcontract', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::remlocalfromcontractAction',  '_route' => 'tools_removelocal_fromcontract',);
                        }
                        not_tools_removelocal_fromcontract:

                        // tools_removelocal_fromgroup
                        if (rtrim($pathinfo, '/') === '/admin/tools/remove/local/group') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_tools_removelocal_fromgroup;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'tools_removelocal_fromgroup');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'tools_removelocal_fromgroup', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::remlocalfromgroupAction',  '_route' => 'tools_removelocal_fromgroup',);
                        }
                        not_tools_removelocal_fromgroup:

                    }

                }

                if (0 === strpos($pathinfo, '/admin/tools/update')) {
                    if (0 === strpos($pathinfo, '/admin/tools/update/t')) {
                        // tools_update_training
                        if (rtrim($pathinfo, '/') === '/admin/tools/update/training') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_tools_update_training;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'tools_update_training');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'tools_update_training', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::updatetrainingAction',  '_route' => 'tools_update_training',);
                        }
                        not_tools_update_training:

                        // tools_update_tcgroup
                        if (rtrim($pathinfo, '/') === '/admin/tools/update/tcgroup') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_tools_update_tcgroup;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'tools_update_tcgroup');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'tools_update_tcgroup', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::updatetcgroupAction',  '_route' => 'tools_update_tcgroup',);
                        }
                        not_tools_update_tcgroup:

                        // tools_update_training2
                        if (rtrim($pathinfo, '/') === '/admin/tools/update/training2') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_tools_update_training2;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'tools_update_training2');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'tools_update_training2', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::updatetraining2Action',  '_route' => 'tools_update_training2',);
                        }
                        not_tools_update_training2:

                    }

                    // tools_update_contract
                    if (rtrim($pathinfo, '/') === '/admin/tools/update/contract') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_update_contract;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_update_contract');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_update_contract', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::updatecontractAction',  '_route' => 'tools_update_contract',);
                    }
                    not_tools_update_contract:

                    // tools_update_allcontract
                    if (rtrim($pathinfo, '/') === '/admin/tools/update/allcontract') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_update_allcontract;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_update_allcontract');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_update_allcontract', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::updateallcontractAction',  '_route' => 'tools_update_allcontract',);
                    }
                    not_tools_update_allcontract:

                }

                // tools_update_contract2
                if (rtrim($pathinfo, '/') === '/admin/tools/2/update/contract') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tools_update_contract2;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tools_update_contract2');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tools_update_contract2', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::updatecontract2Action',  '_route' => 'tools_update_contract2',);
                }
                not_tools_update_contract2:

                if (0 === strpos($pathinfo, '/admin/tools/update/locals')) {
                    // tools_update_groupstatus
                    if (rtrim($pathinfo, '/') === '/admin/tools/update/localstatus') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_update_groupstatus;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_update_groupstatus');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_update_groupstatus', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::updatelocalstatusAction',  '_route' => 'tools_update_groupstatus',);
                    }
                    not_tools_update_groupstatus:

                    // tools_update_localsuite
                    if (rtrim($pathinfo, '/') === '/admin/tools/update/localsuite') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_update_localsuite;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_update_localsuite');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_update_localsuite', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::localsuiteAction',  '_route' => 'tools_update_localsuite',);
                    }
                    not_tools_update_localsuite:

                }

                // tools_disable_local
                if (rtrim($pathinfo, '/') === '/admin/tools/disable/suite') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tools_disable_local;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tools_disable_local');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tools_disable_local', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::disablesuiteAction',  '_route' => 'tools_disable_local',);
                }
                not_tools_disable_local:

                // tools_update_contract3
                if (rtrim($pathinfo, '/') === '/admin/tools/update/contractgroup') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tools_update_contract3;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tools_update_contract3');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tools_update_contract3', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::updatecontractgroupAction',  '_route' => 'tools_update_contract3',);
                }
                not_tools_update_contract3:

                // tools_addtype_togroup
                if (rtrim($pathinfo, '/') === '/admin/tools/add/type/togroup') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tools_addtype_togroup;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tools_addtype_togroup');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tools_addtype_togroup', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::addtypetogroupAction',  '_route' => 'tools_addtype_togroup',);
                }
                not_tools_addtype_togroup:

                // tools_update_mastercontract
                if (rtrim($pathinfo, '/') === '/admin/tools/master/contract') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tools_update_mastercontract;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tools_update_mastercontract');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tools_update_mastercontract', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::mastercontractAction',  '_route' => 'tools_update_mastercontract',);
                }
                not_tools_update_mastercontract:

                if (0 === strpos($pathinfo, '/admin/tools/c')) {
                    // tools_create_coordinator
                    if (rtrim($pathinfo, '/') === '/admin/tools/create/coordinator') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_tools_create_coordinator;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_create_coordinator');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_create_coordinator', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::updateUserAction',  '_route' => 'tools_create_coordinator',);
                    }
                    not_tools_create_coordinator:

                    // tools_connected
                    if (rtrim($pathinfo, '/') === '/admin/tools/connected') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_connected;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_connected');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_connected', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::connectedAction',  '_route' => 'tools_connected',);
                    }
                    not_tools_connected:

                }

                if (0 === strpos($pathinfo, '/admin/tools/update')) {
                    // tools_update_advisor
                    if (rtrim($pathinfo, '/') === '/admin/tools/update/advisor') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_update_advisor;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_update_advisor');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_update_advisor', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::updateadvisorAction',  '_route' => 'tools_update_advisor',);
                    }
                    not_tools_update_advisor:

                    if (0 === strpos($pathinfo, '/admin/tools/update/schedule')) {
                        // tools_update_schedule
                        if (rtrim($pathinfo, '/') === '/admin/tools/update/schedule') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_tools_update_schedule;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'tools_update_schedule');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'tools_update_schedule', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::updatescheduleAction',  '_route' => 'tools_update_schedule',);
                        }
                        not_tools_update_schedule:

                        // tools_update_schedule2
                        if (rtrim($pathinfo, '/') === '/admin/tools/update/schedule/2') {
                            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                                goto not_tools_update_schedule2;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'tools_update_schedule2');
                            }

                            $requiredSchemes = array (  'https' => 0,);
                            if (!isset($requiredSchemes[$this->context->getScheme()])) {
                                return $this->redirect($pathinfo, 'tools_update_schedule2', key($requiredSchemes));
                            }

                            return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::updateschedule2Action',  '_route' => 'tools_update_schedule2',);
                        }
                        not_tools_update_schedule2:

                    }

                }

                // tools_schedule_delete
                if (preg_match('#^/admin/tools/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_tools_schedule_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tools_schedule_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tools_schedule_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::deletescheduleAction',));
                }
                not_tools_schedule_delete:

                if (0 === strpos($pathinfo, '/admin/tools/generate')) {
                    // tools_generate_agenda
                    if (rtrim($pathinfo, '/') === '/admin/tools/generate/agenda') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_generate_agenda;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_generate_agenda');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_generate_agenda', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::generateagendaAction',  '_route' => 'tools_generate_agenda',);
                    }
                    not_tools_generate_agenda:

                    // tools_generate_event
                    if (rtrim($pathinfo, '/') === '/admin/tools/generate/event') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_generate_event;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_generate_event');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_generate_event', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::generateEventAction',  '_route' => 'tools_generate_event',);
                    }
                    not_tools_generate_event:

                }

                if (0 === strpos($pathinfo, '/admin/tools/update/a')) {
                    // tools_agenda_update
                    if (rtrim($pathinfo, '/') === '/admin/tools/update/agenda') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_agenda_update;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_agenda_update');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_agenda_update', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::updateagendaAction',  '_route' => 'tools_agenda_update',);
                    }
                    not_tools_agenda_update:

                    // tools_absence_update
                    if (rtrim($pathinfo, '/') === '/admin/tools/update/absence') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_absence_update;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_absence_update');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_absence_update', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::updateabsenceAction',  '_route' => 'tools_absence_update',);
                    }
                    not_tools_absence_update:

                }

                if (0 === strpos($pathinfo, '/admin/tools/check')) {
                    // tools_check
                    if (rtrim($pathinfo, '/') === '/admin/tools/check') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_check;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_check');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_check', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::checkAction',  '_route' => 'tools_check',);
                    }
                    not_tools_check:

                    // tools_checkbis
                    if (rtrim($pathinfo, '/') === '/admin/tools/checkbis') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_checkbis;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_checkbis');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_checkbis', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::checkbisAction',  '_route' => 'tools_checkbis',);
                    }
                    not_tools_checkbis:

                    // tools_checkcontract
                    if (rtrim($pathinfo, '/') === '/admin/tools/check/contract') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_checkcontract;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_checkcontract');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_checkcontract', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::checkcontractAction',  '_route' => 'tools_checkcontract',);
                    }
                    not_tools_checkcontract:

                }

                // tools_findsch
                if (rtrim($pathinfo, '/') === '/admin/tools/findsch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tools_findsch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tools_findsch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tools_findsch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::findschAction',  '_route' => 'tools_findsch',);
                }
                not_tools_findsch:

                if (0 === strpos($pathinfo, '/admin/tools/test')) {
                    // tools_test
                    if (rtrim($pathinfo, '/') === '/admin/tools/test') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_test;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_test');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_test', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::testAction',  '_route' => 'tools_test',);
                    }
                    not_tools_test:

                    // tools_test2
                    if (rtrim($pathinfo, '/') === '/admin/tools/test2') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_test2;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_test2');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_test2', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::test2Action',  '_route' => 'tools_test2',);
                    }
                    not_tools_test2:

                }

                // tools_employeelogin
                if (rtrim($pathinfo, '/') === '/admin/tools/employee/login') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tools_employeelogin;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tools_employeelogin');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tools_employeelogin', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::employeeloginAction',  '_route' => 'tools_employeelogin',);
                }
                not_tools_employeelogin:

                // tools_addagenda
                if (rtrim($pathinfo, '/') === '/admin/tools/add/agenda') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tools_addagenda;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tools_addagenda');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tools_addagenda', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::addagendaAction',  '_route' => 'tools_addagenda',);
                }
                not_tools_addagenda:

                if (0 === strpos($pathinfo, '/admin/tools/ge')) {
                    // tools_genagenda
                    if (rtrim($pathinfo, '/') === '/admin/tools/gen/agenda') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_genagenda;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_genagenda');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_genagenda', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::genagendaAction',  '_route' => 'tools_genagenda',);
                    }
                    not_tools_genagenda:

                    // tools_gethour
                    if (rtrim($pathinfo, '/') === '/admin/tools/get/hour') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_gethour;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_gethour');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_gethour', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::gethourAction',  '_route' => 'tools_gethour',);
                    }
                    not_tools_gethour:

                }

                // tools_disable_user
                if (rtrim($pathinfo, '/') === '/admin/tools/disable/user') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tools_disable_user;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tools_disable_user');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tools_disable_user', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::disableuserAction',  '_route' => 'tools_disable_user',);
                }
                not_tools_disable_user:

                if (0 === strpos($pathinfo, '/admin/tools/check')) {
                    // tools_check_ticket
                    if (rtrim($pathinfo, '/') === '/admin/tools/check/ticket') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_check_ticket;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_check_ticket');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_check_ticket', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::checkticketAction',  '_route' => 'tools_check_ticket',);
                    }
                    not_tools_check_ticket:

                    // tools_check_date
                    if (rtrim($pathinfo, '/') === '/admin/tools/check/date') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_tools_check_date;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'tools_check_date');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'tools_check_date', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ToolsController::checkdateAction',  '_route' => 'tools_check_date',);
                    }
                    not_tools_check_date:

                }

            }

            if (0 === strpos($pathinfo, '/admin/model')) {
                if (0 === strpos($pathinfo, '/admin/model/timesheet')) {
                    // modelts_index
                    if (rtrim($pathinfo, '/') === '/admin/model/timesheet') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_modelts_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'modelts_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'modelts_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ModelTsController::indexAction',  '_route' => 'modelts_index',);
                    }
                    not_modelts_index:

                    // modelts_show
                    if (preg_match('#^/admin/model/timesheet/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_modelts_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'modelts_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'modelts_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ModelTsController::showAction',));
                    }
                    not_modelts_show:

                    // modelts_new
                    if ($pathinfo === '/admin/model/timesheet/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_modelts_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'modelts_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ModelTsController::newAction',  '_route' => 'modelts_new',);
                    }
                    not_modelts_new:

                    // modelts_edit
                    if (preg_match('#^/admin/model/timesheet/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_modelts_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'modelts_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'modelts_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ModelTsController::editAction',));
                    }
                    not_modelts_edit:

                    // modelts_delete
                    if (preg_match('#^/admin/model/timesheet/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_modelts_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'modelts_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'modelts_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ModelTsController::deleteAction',));
                    }
                    not_modelts_delete:

                }

                if (0 === strpos($pathinfo, '/admin/model/usermessage')) {
                    // usermessage_index
                    if (rtrim($pathinfo, '/') === '/admin/model/usermessage') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_usermessage_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'usermessage_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'usermessage_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\UserMessageController::indexAction',  '_route' => 'usermessage_index',);
                    }
                    not_usermessage_index:

                    // usermessage_show
                    if (preg_match('#^/admin/model/usermessage/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_usermessage_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'usermessage_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'usermessage_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\UserMessageController::showAction',));
                    }
                    not_usermessage_show:

                    // usermessage_new
                    if ($pathinfo === '/admin/model/usermessage/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_usermessage_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'usermessage_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\UserMessageController::newAction',  '_route' => 'usermessage_new',);
                    }
                    not_usermessage_new:

                    // usermessage_edit
                    if (preg_match('#^/admin/model/usermessage/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_usermessage_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'usermessage_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'usermessage_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\UserMessageController::editAction',));
                    }
                    not_usermessage_edit:

                    // usermessage_delete
                    if (preg_match('#^/admin/model/usermessage/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_usermessage_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'usermessage_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'usermessage_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\UserMessageController::deleteAction',));
                    }
                    not_usermessage_delete:

                }

            }

            if (0 === strpos($pathinfo, '/admin/evaluation')) {
                // evaluation_index
                if (rtrim($pathinfo, '/') === '/admin/evaluation/index') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_evaluation_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'evaluation_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'evaluation_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EvaluationController::indexAction',  '_route' => 'evaluation_index',);
                }
                not_evaluation_index:

                // evaluation_back
                if (preg_match('#^/admin/evaluation/(?P<page>[^/]++)/back/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_evaluation_back;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'evaluation_back');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'evaluation_back', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'evaluation_back')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EvaluationController::backAction',));
                }
                not_evaluation_back:

                // evaluation_show
                if (preg_match('#^/admin/evaluation/(?P<id>[^/]++)/(?P<page>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_evaluation_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'evaluation_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'evaluation_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EvaluationController::showAction',));
                }
                not_evaluation_show:

                // evaluation_evalquiz
                if (preg_match('#^/admin/evaluation/(?P<id>[^/]++)/evalquiz$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_evaluation_evalquiz;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'evaluation_evalquiz', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'evaluation_evalquiz')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EvaluationController::evalquizAction',));
                }
                not_evaluation_evalquiz:

                // evaluation_resultsquiz
                if (preg_match('#^/admin/evaluation/(?P<id>[^/]++)/resultsquiz$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_evaluation_resultsquiz;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'evaluation_resultsquiz', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'evaluation_resultsquiz')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EvaluationController::resultsquizAction',));
                }
                not_evaluation_resultsquiz:

                // evaluation_new
                if ($pathinfo === '/admin/evaluation/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_evaluation_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'evaluation_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EvaluationController::newAction',  '_route' => 'evaluation_new',);
                }
                not_evaluation_new:

                // evaluation_edit
                if (preg_match('#^/admin/evaluation/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_evaluation_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'evaluation_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'evaluation_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EvaluationController::editAction',));
                }
                not_evaluation_edit:

                // evaluation_evaluate
                if (preg_match('#^/admin/evaluation/(?P<id>[^/]++)/evaluate/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_evaluation_evaluate;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'evaluation_evaluate');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'evaluation_evaluate', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'evaluation_evaluate')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EvaluationController::evaluateAction',));
                }
                not_evaluation_evaluate:

                // evaluation_pdf
                if (preg_match('#^/admin/evaluation/(?P<id>[^/]++)/pdf/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_evaluation_pdf;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'evaluation_pdf');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'evaluation_pdf', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'evaluation_pdf')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EvaluationController::pdfAction',));
                }
                not_evaluation_pdf:

                // evaluation_sendresult
                if (preg_match('#^/admin/evaluation/(?P<id>[^/]++)/send/result/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_evaluation_sendresult;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'evaluation_sendresult');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'evaluation_sendresult', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'evaluation_sendresult')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EvaluationController::sendresultAction',));
                }
                not_evaluation_sendresult:

                // evaluation_editfirst
                if (preg_match('#^/admin/evaluation/(?P<id>[^/]++)/edit/first/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_evaluation_editfirst;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'evaluation_editfirst');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'evaluation_editfirst', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'evaluation_editfirst')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EvaluationController::editfirstAction',));
                }
                not_evaluation_editfirst:

                // evaluation_delete
                if (preg_match('#^/admin/evaluation/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_evaluation_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'evaluation_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'evaluation_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EvaluationController::deleteAction',));
                }
                not_evaluation_delete:

                // evaluation_remove
                if (preg_match('#^/admin/evaluation/(?P<id>[^/]++)/remove$#s', $pathinfo, $matches)) {
                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'evaluation_remove', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'evaluation_remove')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EvaluationController::removeAction',));
                }

                // evaluation_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/evaluation/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_evaluation_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'evaluation_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'evaluation_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EvaluationController::pagesearchAction',  '_route' => 'evaluation_pagesearch',);
                }
                not_evaluation_pagesearch:

                // evaluation_search
                if (rtrim($pathinfo, '/') === '/admin/evaluation/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_evaluation_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'evaluation_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'evaluation_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EvaluationController::searchAction',  '_route' => 'evaluation_search',);
                }
                not_evaluation_search:

                // evaluation_confirmation
                if (preg_match('#^/admin/evaluation/(?P<id>[^/]++)/confirmation/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_evaluation_confirmation;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'evaluation_confirmation');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'evaluation_confirmation', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'evaluation_confirmation')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\EvaluationController::confirmationAction',));
                }
                not_evaluation_confirmation:

            }

            if (0 === strpos($pathinfo, '/admin/tickets/contacts')) {
                // ticketcontacts_index
                if (rtrim($pathinfo, '/') === '/admin/tickets/contacts') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_ticketcontacts_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'ticketcontacts_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'ticketcontacts_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TicketContactsController::indexAction',  '_route' => 'ticketcontacts_index',);
                }
                not_ticketcontacts_index:

                // ticketcontacts_back
                if (rtrim($pathinfo, '/') === '/admin/tickets/contacts/back') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_ticketcontacts_back;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'ticketcontacts_back');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'ticketcontacts_back', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TicketContactsController::backAction',  '_route' => 'ticketcontacts_back',);
                }
                not_ticketcontacts_back:

                // ticketcontacts_psearch
                if (rtrim($pathinfo, '/') === '/admin/tickets/contacts/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_ticketcontacts_psearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'ticketcontacts_psearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'ticketcontacts_psearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TicketContactsController::pagesearchAction',  '_route' => 'ticketcontacts_psearch',);
                }
                not_ticketcontacts_psearch:

                // ticketcontacts_search
                if (rtrim($pathinfo, '/') === '/admin/tickets/contacts/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_ticketcontacts_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'ticketcontacts_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'ticketcontacts_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TicketContactsController::searchAction',  '_route' => 'ticketcontacts_search',);
                }
                not_ticketcontacts_search:

                // ticketcontacts_show
                if (preg_match('#^/admin/tickets/contacts/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_ticketcontacts_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'ticketcontacts_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'ticketcontacts_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TicketContactsController::showAction',));
                }
                not_ticketcontacts_show:

                // ticketcontacts_new
                if ($pathinfo === '/admin/tickets/contacts/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_ticketcontacts_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'ticketcontacts_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TicketContactsController::newAction',  '_route' => 'ticketcontacts_new',);
                }
                not_ticketcontacts_new:

                // ticketcontacts_edit
                if (preg_match('#^/admin/tickets/contacts/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_ticketcontacts_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'ticketcontacts_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'ticketcontacts_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TicketContactsController::editAction',));
                }
                not_ticketcontacts_edit:

                // ticketcontacts_delete
                if (preg_match('#^/admin/tickets/contacts/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_ticketcontacts_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'ticketcontacts_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'ticketcontacts_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TicketContactsController::deleteAction',));
                }
                not_ticketcontacts_delete:

                // ticketcontacts_employee_remove
                if (preg_match('#^/admin/tickets/contacts/(?P<id>[^/]++)/(?P<idemployee>[^/]++)/employee/remove/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_ticketcontacts_employee_remove;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'ticketcontacts_employee_remove');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'ticketcontacts_employee_remove', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'ticketcontacts_employee_remove')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TicketContactsController::removeEmployeeAction',));
                }
                not_ticketcontacts_employee_remove:

                // ticketcontacts_add_employee
                if (preg_match('#^/admin/tickets/contacts/(?P<id>[^/]++)/add/employee/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_ticketcontacts_add_employee;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'ticketcontacts_add_employee');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'ticketcontacts_add_employee', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'ticketcontacts_add_employee')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TicketContactsController::addEmployeeAction',));
                }
                not_ticketcontacts_add_employee:

            }

            if (0 === strpos($pathinfo, '/admin/prices')) {
                // pricesreference_index
                if (rtrim($pathinfo, '/') === '/admin/prices') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_pricesreference_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'pricesreference_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'pricesreference_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PricesreferenceController::indexAction',  '_route' => 'pricesreference_index',);
                }
                not_pricesreference_index:

                // pricesreference_show
                if (preg_match('#^/admin/prices/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_pricesreference_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'pricesreference_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'pricesreference_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PricesreferenceController::showAction',));
                }
                not_pricesreference_show:

                // pricesreference_new
                if ($pathinfo === '/admin/prices/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_pricesreference_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'pricesreference_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PricesreferenceController::newAction',  '_route' => 'pricesreference_new',);
                }
                not_pricesreference_new:

                // pricesreference_price_new
                if (preg_match('#^/admin/prices/(?P<id>[^/]++)/price/new$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_pricesreference_price_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'pricesreference_price_new', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'pricesreference_price_new')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PricesreferenceController::pricenewAction',));
                }
                not_pricesreference_price_new:

                // pricesreference_price_edit
                if (preg_match('#^/admin/prices/(?P<id>[^/]++)/price/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_pricesreference_price_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'pricesreference_price_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'pricesreference_price_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PricesreferenceController::editpriceAction',));
                }
                not_pricesreference_price_edit:

                // pricesreference_edit
                if (preg_match('#^/admin/prices/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_pricesreference_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'pricesreference_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'pricesreference_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PricesreferenceController::editAction',));
                }
                not_pricesreference_edit:

                // pricesreference_delete
                if (preg_match('#^/admin/prices/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_pricesreference_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'pricesreference_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'pricesreference_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PricesreferenceController::deleteAction',));
                }
                not_pricesreference_delete:

                // pricesreference_search
                if (rtrim($pathinfo, '/') === '/admin/prices/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_pricesreference_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'pricesreference_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'pricesreference_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PricesreferenceController::searchAction',  '_route' => 'pricesreference_search',);
                }
                not_pricesreference_search:

                // pricesreference_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/prices/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_pricesreference_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'pricesreference_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'pricesreference_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\PricesreferenceController::pagesearchAction',  '_route' => 'pricesreference_pagesearch',);
                }
                not_pricesreference_pagesearch:

                if (0 === strpos($pathinfo, '/admin/prices/others')) {
                    // otherprices_index
                    if (rtrim($pathinfo, '/') === '/admin/prices/others') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_otherprices_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'otherprices_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'otherprices_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\OtherpricesController::indexAction',  '_route' => 'otherprices_index',);
                    }
                    not_otherprices_index:

                    // otherprices_show
                    if (preg_match('#^/admin/prices/others/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_otherprices_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'otherprices_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'otherprices_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\OtherpricesController::showAction',));
                    }
                    not_otherprices_show:

                    // otherprices_new
                    if ($pathinfo === '/admin/prices/others/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_otherprices_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'otherprices_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\OtherpricesController::newAction',  '_route' => 'otherprices_new',);
                    }
                    not_otherprices_new:

                    // otherprices_edit
                    if (preg_match('#^/admin/prices/others/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_otherprices_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'otherprices_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'otherprices_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\OtherpricesController::editAction',));
                    }
                    not_otherprices_edit:

                    // otherprices_delete
                    if (preg_match('#^/admin/prices/others/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_otherprices_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'otherprices_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'otherprices_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\OtherpricesController::deleteAction',));
                    }
                    not_otherprices_delete:

                }

            }

            if (0 === strpos($pathinfo, '/admin/orderform')) {
                // orderform_index
                if (rtrim($pathinfo, '/') === '/admin/orderform') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_orderform_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'orderform_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'orderform_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\OrderformController::indexAction',  '_route' => 'orderform_index',);
                }
                not_orderform_index:

                // orderform_show
                if (preg_match('#^/admin/orderform/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_orderform_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'orderform_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'orderform_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\OrderformController::showAction',));
                }
                not_orderform_show:

                // orderform_new
                if ($pathinfo === '/admin/orderform/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_orderform_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'orderform_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\OrderformController::newAction',  '_route' => 'orderform_new',);
                }
                not_orderform_new:

                // orderform_edit
                if (preg_match('#^/admin/orderform/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_orderform_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'orderform_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'orderform_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\OrderformController::editAction',));
                }
                not_orderform_edit:

                // orderform_delete
                if (preg_match('#^/admin/orderform/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_orderform_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'orderform_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'orderform_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\OrderformController::deleteAction',));
                }
                not_orderform_delete:

            }

            if (0 === strpos($pathinfo, '/admin/s')) {
                if (0 === strpos($pathinfo, '/admin/steps')) {
                    // steps_index
                    if (rtrim($pathinfo, '/') === '/admin/steps') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_steps_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'steps_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'steps_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StepsController::indexAction',  '_route' => 'steps_index',);
                    }
                    not_steps_index:

                    // steps_show
                    if (preg_match('#^/admin/steps/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_steps_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'steps_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'steps_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StepsController::showAction',));
                    }
                    not_steps_show:

                    // steps_new
                    if ($pathinfo === '/admin/steps/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_steps_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'steps_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StepsController::newAction',  '_route' => 'steps_new',);
                    }
                    not_steps_new:

                    // steps_edit
                    if (preg_match('#^/admin/steps/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_steps_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'steps_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'steps_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StepsController::editAction',));
                    }
                    not_steps_edit:

                    // steps_delete
                    if (preg_match('#^/admin/steps/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_steps_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'steps_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'steps_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\StepsController::deleteAction',));
                    }
                    not_steps_delete:

                }

                if (0 === strpos($pathinfo, '/admin/specification')) {
                    // specification_index
                    if (rtrim($pathinfo, '/') === '/admin/specification') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_specification_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'specification_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'specification_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SpecificationController::indexAction',  '_route' => 'specification_index',);
                    }
                    not_specification_index:

                    // specification_show
                    if (preg_match('#^/admin/specification/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_specification_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'specification_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'specification_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SpecificationController::showAction',));
                    }
                    not_specification_show:

                    // specification_new
                    if ($pathinfo === '/admin/specification/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_specification_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'specification_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SpecificationController::newAction',  '_route' => 'specification_new',);
                    }
                    not_specification_new:

                    // specification_edit
                    if (preg_match('#^/admin/specification/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_specification_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'specification_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'specification_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SpecificationController::editAction',));
                    }
                    not_specification_edit:

                    // specification_delete
                    if (preg_match('#^/admin/specification/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_specification_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'specification_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'specification_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\SpecificationController::deleteAction',));
                    }
                    not_specification_delete:

                }

            }

            if (0 === strpos($pathinfo, '/admin/tadmin')) {
                // tadmin_index
                if (rtrim($pathinfo, '/') === '/admin/tadmin') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_tadmin_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tadmin_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tadmin_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TadminController::indexAction',  '_route' => 'tadmin_index',);
                }
                not_tadmin_index:

                // tadmin_show
                if (preg_match('#^/admin/tadmin/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_tadmin_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tadmin_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tadmin_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TadminController::showAction',));
                }
                not_tadmin_show:

                // tadmin_new
                if (preg_match('#^/admin/tadmin/(?P<id>[^/]++)/new$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tadmin_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tadmin_new', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tadmin_new')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TadminController::newAction',));
                }
                not_tadmin_new:

                // tadmin_edit
                if (preg_match('#^/admin/tadmin/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tadmin_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tadmin_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tadmin_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TadminController::editAction',));
                }
                not_tadmin_edit:

                // tadmin_delete
                if (preg_match('#^/admin/tadmin/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_tadmin_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tadmin_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tadmin_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TadminController::deleteAction',));
                }
                not_tadmin_delete:

            }

            if (0 === strpos($pathinfo, '/admin/color')) {
                // color_index
                if (rtrim($pathinfo, '/') === '/admin/color') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_color_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'color_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'color_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ColorController::indexAction',  '_route' => 'color_index',);
                }
                not_color_index:

                // color_show
                if (preg_match('#^/admin/color/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_color_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'color_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'color_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ColorController::showAction',));
                }
                not_color_show:

                // color_all_enable
                if (preg_match('#^/admin/color/(?P<id>[^/]++)/(?P<action>[^/]++)/allenable$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_color_all_enable;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'color_all_enable', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'color_all_enable')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ColorController::allenableAction',));
                }
                not_color_all_enable:

                // color_enableall
                if (preg_match('#^/admin/color/(?P<id>[^/]++)/enable/all$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_color_enableall;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'color_enableall', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'color_enableall')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ColorController::enableallAction',));
                }
                not_color_enableall:

                // color_new
                if ($pathinfo === '/admin/color/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_color_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'color_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ColorController::newAction',  '_route' => 'color_new',);
                }
                not_color_new:

                // color_edit
                if (preg_match('#^/admin/color/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_color_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'color_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'color_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ColorController::editAction',));
                }
                not_color_edit:

                // color_delete
                if (preg_match('#^/admin/color/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_color_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'color_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'color_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ColorController::deleteAction',));
                }
                not_color_delete:

                // color_srubric_load
                if (rtrim($pathinfo, '/') === '/admin/color/rubric/reload') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_color_srubric_load;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'color_srubric_load');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'color_srubric_load', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\ColorController::srubricAction',  '_route' => 'color_srubric_load',);
                }
                not_color_srubric_load:

            }

            if (0 === strpos($pathinfo, '/admin/agenda')) {
                // agenda_index
                if (rtrim($pathinfo, '/') === '/admin/agenda/index') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_agenda_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'agenda_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'agenda_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AgendaController::indexAction',  '_route' => 'agenda_index',);
                }
                not_agenda_index:

                // agenda_closed
                if (rtrim($pathinfo, '/') === '/admin/agenda/closed') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_agenda_closed;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'agenda_closed');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'agenda_closed', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AgendaController::closedAction',  '_route' => 'agenda_closed',);
                }
                not_agenda_closed:

                // agenda_general
                if (rtrim($pathinfo, '/') === '/admin/agenda/general') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_agenda_general;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'agenda_general');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'agenda_general', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AgendaController::generalAction',  '_route' => 'agenda_general',);
                }
                not_agenda_general:

                // agenda_show
                if (preg_match('#^/admin/agenda/(?P<id>[^/]++)/show/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_agenda_show;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'agenda_show');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'agenda_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'agenda_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AgendaController::showAction',));
                }
                not_agenda_show:

                // agenda_active
                if (preg_match('#^/admin/agenda/(?P<id>[^/]++)/active/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_agenda_active;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'agenda_active');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'agenda_active', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'agenda_active')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AgendaController::activeAction',));
                }
                not_agenda_active:

                // agenda_new
                if (preg_match('#^/admin/agenda/(?P<idcontract>[^/]++)/new/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_agenda_new;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'agenda_new');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'agenda_new', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'agenda_new')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AgendaController::newAction',));
                }
                not_agenda_new:

                // agenda_edit
                if (preg_match('#^/admin/agenda/(?P<id>[^/]++)/edit/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_agenda_edit;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'agenda_edit');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'agenda_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'agenda_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AgendaController::editAction',));
                }
                not_agenda_edit:

                // agenda_delete
                if (preg_match('#^/admin/agenda/(?P<id>[^/]++)/delete/$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_agenda_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'agenda_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'agenda_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AgendaController::deleteAction',));
                }
                not_agenda_delete:

                // agenda_employee
                if (preg_match('#^/admin/agenda/(?P<id>[^/]++)/employee/agenda/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_agenda_employee;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'agenda_employee');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'agenda_employee', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'agenda_employee')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AgendaController::employeeAction',));
                }
                not_agenda_employee:

                if (0 === strpos($pathinfo, '/admin/agenda/search')) {
                    // agenda_search
                    if (rtrim($pathinfo, '/') === '/admin/agenda/search') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_agenda_search;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'agenda_search');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'agenda_search', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AgendaController::searchAction',  '_route' => 'agenda_search',);
                    }
                    not_agenda_search:

                    // agenda_search2
                    if (rtrim($pathinfo, '/') === '/admin/agenda/search2') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_agenda_search2;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'agenda_search2');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'agenda_search2', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AgendaController::search2Action',  '_route' => 'agenda_search2',);
                    }
                    not_agenda_search2:

                }

                // agenda_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/agenda/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_agenda_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'agenda_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'agenda_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AgendaController::pagesearchAction',  '_route' => 'agenda_pagesearch',);
                }
                not_agenda_pagesearch:

                // agenda_remove
                if (preg_match('#^/admin/agenda/(?P<id>[^/]++)/remove$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_agenda_remove;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'agenda_remove', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'agenda_remove')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AgendaController::removeAction',));
                }
                not_agenda_remove:

                // agenda_check
                if (rtrim($pathinfo, '/') === '/admin/agenda/check') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_agenda_check;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'agenda_check');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'agenda_check', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AgendaController::checkAction',  '_route' => 'agenda_check',);
                }
                not_agenda_check:

                // agenda_advanced_search
                if ($pathinfo === '/admin/agenda/advanced/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_agenda_advanced_search;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'agenda_advanced_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AgendaController::advancedsearchAction',  '_route' => 'agenda_advanced_search',);
                }
                not_agenda_advanced_search:

                // agenda_add_cancel
                if (preg_match('#^/admin/agenda/(?P<id>[^/]++)/add/cancel/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_agenda_add_cancel;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'agenda_add_cancel');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'agenda_add_cancel', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'agenda_add_cancel')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AgendaController::addcancelAction',));
                }
                not_agenda_add_cancel:

                // agenda_edit_cancel
                if (preg_match('#^/admin/agenda/(?P<id>[^/]++)/edit/cancel/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_agenda_edit_cancel;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'agenda_edit_cancel');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'agenda_edit_cancel', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'agenda_edit_cancel')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AgendaController::editcancelAction',));
                }
                not_agenda_edit_cancel:

                // agenda_delete_cancel
                if (preg_match('#^/admin/agenda/(?P<id>[^/]++)/delete/cancel/$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_agenda_delete_cancel;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'agenda_delete_cancel', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'agenda_delete_cancel')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AgendaController::deletecancelAction',));
                }
                not_agenda_delete_cancel:

                // agenda_substitution_new
                if (preg_match('#^/admin/agenda/(?P<idagenda>[^/]++)/substitution/new$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_agenda_substitution_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'agenda_substitution_new', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'agenda_substitution_new')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\AgendaController::substituteAction',));
                }
                not_agenda_substitution_new:

            }

            if (0 === strpos($pathinfo, '/admin/quiz')) {
                // quiz_index
                if (rtrim($pathinfo, '/') === '/admin/quiz') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_quiz_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'quiz_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'quiz_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\QuizBundle\\Controller\\QuizController::indexAction',  '_route' => 'quiz_index',);
                }
                not_quiz_index:

                // quiz_show
                if (preg_match('#^/admin/quiz/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_quiz_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'quiz_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'quiz_show')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\QuizController::showAction',));
                }
                not_quiz_show:

                // quiz_new
                if ($pathinfo === '/admin/quiz/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_quiz_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'quiz_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\QuizBundle\\Controller\\QuizController::newAction',  '_route' => 'quiz_new',);
                }
                not_quiz_new:

                // quiz_update
                if (preg_match('#^/admin/quiz/(?P<id>[^/]++)/update/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_quiz_update;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'quiz_update');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'quiz_update', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'quiz_update')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\QuizController::updateAction',));
                }
                not_quiz_update:

                // quiz_addquestion
                if (preg_match('#^/admin/quiz/(?P<idquiz>[^/]++)/new$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_quiz_addquestion;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'quiz_addquestion', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'quiz_addquestion')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\QuizController::addquestionAction',));
                }
                not_quiz_addquestion:

                // quiz_edit
                if (preg_match('#^/admin/quiz/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_quiz_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'quiz_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'quiz_edit')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\QuizController::editAction',));
                }
                not_quiz_edit:

                // quiz_delete
                if (preg_match('#^/admin/quiz/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_quiz_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'quiz_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'quiz_delete')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\QuizController::deleteAction',));
                }
                not_quiz_delete:

                if (0 === strpos($pathinfo, '/admin/quiz/question')) {
                    // question_index
                    if (rtrim($pathinfo, '/') === '/admin/quiz/question') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_question_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'question_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'question_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\QuizBundle\\Controller\\QuestionController::indexAction',  '_route' => 'question_index',);
                    }
                    not_question_index:

                    // question_show
                    if (preg_match('#^/admin/quiz/question/(?P<idquiz>[^/]++)/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_question_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'question_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'question_show')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\QuestionController::showAction',));
                    }
                    not_question_show:

                    // question_previous
                    if (preg_match('#^/admin/quiz/question/(?P<idquiz>[^/]++)/(?P<id>[^/]++)/previous/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_question_previous;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'question_previous');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'question_previous', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'question_previous')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\QuestionController::previousAction',));
                    }
                    not_question_previous:

                    // question_next
                    if (preg_match('#^/admin/quiz/question/(?P<idquiz>[^/]++)/(?P<id>[^/]++)/next/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_question_next;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'question_next');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'question_next', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'question_next')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\QuestionController::nextAction',));
                    }
                    not_question_next:

                    // question_new
                    if (preg_match('#^/admin/quiz/question/(?P<idquiz>[^/]++)/new$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_question_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'question_new', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'question_new')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\QuestionController::newAction',));
                    }
                    not_question_new:

                    // question_duplicate
                    if (preg_match('#^/admin/quiz/question/(?P<id>[^/]++)/(?P<idquiz>[^/]++)/duplicate$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_question_duplicate;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'question_duplicate', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'question_duplicate')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\QuestionController::duplicateAction',));
                    }
                    not_question_duplicate:

                    // question_addanswer
                    if (preg_match('#^/admin/quiz/question/(?P<idquestion>[^/]++)/(?P<idquiz>[^/]++)/add/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_question_addanswer;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'question_addanswer');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'question_addanswer', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'question_addanswer')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\QuestionController::addAnswerAction',));
                    }
                    not_question_addanswer:

                    // question_edit
                    if (preg_match('#^/admin/quiz/question/(?P<idquiz>[^/]++)/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_question_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'question_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'question_edit')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\QuestionController::editAction',));
                    }
                    not_question_edit:

                    // question_editanswer
                    if (preg_match('#^/admin/quiz/question/(?P<id>[^/]++)/editanswer$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_question_editanswer;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'question_editanswer', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'question_editanswer')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\QuestionController::editanswerAction',));
                    }
                    not_question_editanswer:

                    // question_delete
                    if (preg_match('#^/admin/quiz/question/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_question_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'question_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'question_delete')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\QuestionController::deleteAction',));
                    }
                    not_question_delete:

                }

                if (0 === strpos($pathinfo, '/admin/quiz/answer')) {
                    // answer_index
                    if (rtrim($pathinfo, '/') === '/admin/quiz/answer') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_answer_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'answer_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'answer_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\QuizBundle\\Controller\\AnswerController::indexAction',  '_route' => 'answer_index',);
                    }
                    not_answer_index:

                    // answer_show
                    if (preg_match('#^/admin/quiz/answer/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_answer_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'answer_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'answer_show')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\AnswerController::showAction',));
                    }
                    not_answer_show:

                    // answer_new
                    if (preg_match('#^/admin/quiz/answer/(?P<idquestion>[^/]++)/(?P<idquiz>[^/]++)/new$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_answer_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'answer_new', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'answer_new')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\AnswerController::newAction',));
                    }
                    not_answer_new:

                    // answer_edit
                    if (preg_match('#^/admin/quiz/answer/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_answer_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'answer_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'answer_edit')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\AnswerController::editAction',));
                    }
                    not_answer_edit:

                    // answer_delete
                    if (preg_match('#^/admin/quiz/answer/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_answer_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'answer_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'answer_delete')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\AnswerController::deleteAction',));
                    }
                    not_answer_delete:

                }

                if (0 === strpos($pathinfo, '/admin/quiz/category')) {
                    // category_index
                    if (rtrim($pathinfo, '/') === '/admin/quiz/category') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_category_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'category_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'category_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\QuizBundle\\Controller\\CategoryController::indexAction',  '_route' => 'category_index',);
                    }
                    not_category_index:

                    // category_show
                    if (preg_match('#^/admin/quiz/category/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_category_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'category_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'category_show')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\CategoryController::showAction',));
                    }
                    not_category_show:

                    // category_add_quiz
                    if (preg_match('#^/admin/quiz/category/(?P<id>[^/]++)/add/quiz/?$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_category_add_quiz;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'category_add_quiz');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'category_add_quiz', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'category_add_quiz')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\CategoryController::addquizAction',));
                    }
                    not_category_add_quiz:

                    // category_quiz_show
                    if (preg_match('#^/admin/quiz/category/(?P<idquiz>[^/]++)/quiz/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_category_quiz_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'category_quiz_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'category_quiz_show')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\CategoryController::showquizAction',));
                    }
                    not_category_quiz_show:

                    // category_new
                    if (preg_match('#^/admin/quiz/category/(?P<idquiz>[^/]++)/new$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_category_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'category_new', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'category_new')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\CategoryController::newAction',));
                    }
                    not_category_new:

                    // category_create
                    if ($pathinfo === '/admin/quiz/category/create') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_category_create;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'category_create', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\QuizBundle\\Controller\\CategoryController::createAction',  '_route' => 'category_create',);
                    }
                    not_category_create:

                    // category_edit
                    if (preg_match('#^/admin/quiz/category/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_category_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'category_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'category_edit')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\CategoryController::editAction',));
                    }
                    not_category_edit:

                    // category_delete
                    if (preg_match('#^/admin/quiz/category/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_category_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'category_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'category_delete')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\CategoryController::deleteAction',));
                    }
                    not_category_delete:

                    // category_remove_quiz
                    if (preg_match('#^/admin/quiz/category/(?P<id>[^/]++)/(?P<idquiz>[^/]++)/remove/$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_category_remove_quiz;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'category_remove_quiz', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'category_remove_quiz')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\CategoryController::removequizAction',));
                    }
                    not_category_remove_quiz:

                }

                if (0 === strpos($pathinfo, '/admin/quiz/evaluation')) {
                    // evalquiz_index
                    if (rtrim($pathinfo, '/') === '/admin/quiz/evaluation') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_evalquiz_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'evalquiz_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'evalquiz_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\QuizBundle\\Controller\\EvalquizController::indexAction',  '_route' => 'evalquiz_index',);
                    }
                    not_evalquiz_index:

                    // evalquiz_show
                    if (preg_match('#^/admin/quiz/evaluation/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_evalquiz_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'evalquiz_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'evalquiz_show')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\EvalquizController::showAction',));
                    }
                    not_evalquiz_show:

                    // evalquiz_confirmation
                    if (preg_match('#^/admin/quiz/evaluation/(?P<id>[^/]++)/confirmation$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_evalquiz_confirmation;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'evalquiz_confirmation', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'evalquiz_confirmation')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\EvalquizController::confirmationAction',));
                    }
                    not_evalquiz_confirmation:

                    // evalquiz_new
                    if ($pathinfo === '/admin/quiz/evaluation/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_evalquiz_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'evalquiz_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\QuizBundle\\Controller\\EvalquizController::newAction',  '_route' => 'evalquiz_new',);
                    }
                    not_evalquiz_new:

                    // evalquiz_edit
                    if (preg_match('#^/admin/quiz/evaluation/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_evalquiz_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'evalquiz_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'evalquiz_edit')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\EvalquizController::editAction',));
                    }
                    not_evalquiz_edit:

                    // evalquiz_delete
                    if (preg_match('#^/admin/quiz/evaluation/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_evalquiz_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'evalquiz_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'evalquiz_delete')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\EvalquizController::deleteAction',));
                    }
                    not_evalquiz_delete:

                }

                if (0 === strpos($pathinfo, '/admin/quiz/user')) {
                    // userqz_index
                    if (rtrim($pathinfo, '/') === '/admin/quiz/user') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_userqz_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'userqz_index');
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'userqz_index', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\QuizBundle\\Controller\\UserController::indexAction',  '_route' => 'userqz_index',);
                    }
                    not_userqz_index:

                    // userqz_show
                    if (preg_match('#^/admin/quiz/user/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_userqz_show;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'userqz_show', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'userqz_show')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\UserController::showAction',));
                    }
                    not_userqz_show:

                    // userqz_new
                    if ($pathinfo === '/admin/quiz/user/new') {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_userqz_new;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'userqz_new', key($requiredSchemes));
                        }

                        return array (  '_controller' => 'Bo\\QuizBundle\\Controller\\UserController::newAction',  '_route' => 'userqz_new',);
                    }
                    not_userqz_new:

                    // userqz_edit
                    if (preg_match('#^/admin/quiz/user/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                            goto not_userqz_edit;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'userqz_edit', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'userqz_edit')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\UserController::editAction',));
                    }
                    not_userqz_edit:

                    // userqz_delete
                    if (preg_match('#^/admin/quiz/user/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ($this->context->getMethod() != 'DELETE') {
                            $allow[] = 'DELETE';
                            goto not_userqz_delete;
                        }

                        $requiredSchemes = array (  'https' => 0,);
                        if (!isset($requiredSchemes[$this->context->getScheme()])) {
                            return $this->redirect($pathinfo, 'userqz_delete', key($requiredSchemes));
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'userqz_delete')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\UserController::deleteAction',));
                    }
                    not_userqz_delete:

                }

            }

            if (0 === strpos($pathinfo, '/admin/typequiz')) {
                // typequiz_index
                if (rtrim($pathinfo, '/') === '/admin/typequiz') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_typequiz_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'typequiz_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'typequiz_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\QuizBundle\\Controller\\TypequizController::indexAction',  '_route' => 'typequiz_index',);
                }
                not_typequiz_index:

                // typequiz_show
                if (preg_match('#^/admin/typequiz/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_typequiz_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'typequiz_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'typequiz_show')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\TypequizController::showAction',));
                }
                not_typequiz_show:

                // typequiz_new
                if (preg_match('#^/admin/typequiz/(?P<idquiz>[^/]++)/new$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_typequiz_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'typequiz_new', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'typequiz_new')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\TypequizController::newAction',));
                }
                not_typequiz_new:

                // typequiz_edit
                if (preg_match('#^/admin/typequiz/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_typequiz_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'typequiz_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'typequiz_edit')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\TypequizController::editAction',));
                }
                not_typequiz_edit:

                // typequiz_delete
                if (preg_match('#^/admin/typequiz/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_typequiz_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'typequiz_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'typequiz_delete')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\TypequizController::deleteAction',));
                }
                not_typequiz_delete:

            }

            if (0 === strpos($pathinfo, '/admin/resultsquiz')) {
                // resultsquiz_index
                if (rtrim($pathinfo, '/') === '/admin/resultsquiz') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_resultsquiz_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'resultsquiz_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'resultsquiz_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\QuizBundle\\Controller\\ResultsquizController::indexAction',  '_route' => 'resultsquiz_index',);
                }
                not_resultsquiz_index:

                // resultsquiz_show
                if (preg_match('#^/admin/resultsquiz/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_resultsquiz_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'resultsquiz_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'resultsquiz_show')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\ResultsquizController::showAction',));
                }
                not_resultsquiz_show:

                // resultsquiz_new
                if ($pathinfo === '/admin/resultsquiz/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_resultsquiz_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'resultsquiz_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\QuizBundle\\Controller\\ResultsquizController::newAction',  '_route' => 'resultsquiz_new',);
                }
                not_resultsquiz_new:

                // resultsquiz_edit
                if (preg_match('#^/admin/resultsquiz/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_resultsquiz_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'resultsquiz_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'resultsquiz_edit')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\ResultsquizController::editAction',));
                }
                not_resultsquiz_edit:

                // resultsquiz_delete
                if (preg_match('#^/admin/resultsquiz/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_resultsquiz_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'resultsquiz_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'resultsquiz_delete')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\ResultsquizController::deleteAction',));
                }
                not_resultsquiz_delete:

            }

            if (0 === strpos($pathinfo, '/admin/scoring')) {
                // scoring_index
                if (rtrim($pathinfo, '/') === '/admin/scoring') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_scoring_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'scoring_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'scoring_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\QuizBundle\\Controller\\ScoringController::indexAction',  '_route' => 'scoring_index',);
                }
                not_scoring_index:

                // scoring_show
                if (preg_match('#^/admin/scoring/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_scoring_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'scoring_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scoring_show')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\ScoringController::showAction',));
                }
                not_scoring_show:

                // scoring_new
                if ($pathinfo === '/admin/scoring/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_scoring_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'scoring_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\QuizBundle\\Controller\\ScoringController::newAction',  '_route' => 'scoring_new',);
                }
                not_scoring_new:

                // scoring_edit
                if (preg_match('#^/admin/scoring/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_scoring_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'scoring_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scoring_edit')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\ScoringController::editAction',));
                }
                not_scoring_edit:

                // scoring_delete
                if (preg_match('#^/admin/scoring/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_scoring_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'scoring_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scoring_delete')), array (  '_controller' => 'Bo\\QuizBundle\\Controller\\ScoringController::deleteAction',));
                }
                not_scoring_delete:

            }

            if (0 === strpos($pathinfo, '/admin/diary')) {
                // diary_index
                if (rtrim($pathinfo, '/') === '/admin/diary') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_diary_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'diary_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'diary_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DiaryController::indexAction',  '_route' => 'diary_index',);
                }
                not_diary_index:

                // diary_show
                if (preg_match('#^/admin/diary/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_diary_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'diary_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'diary_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DiaryController::showAction',));
                }
                not_diary_show:

                // diary_new
                if ($pathinfo === '/admin/diary/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_diary_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'diary_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DiaryController::newAction',  '_route' => 'diary_new',);
                }
                not_diary_new:

                // diary_edit
                if (preg_match('#^/admin/diary/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_diary_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'diary_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'diary_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DiaryController::editAction',));
                }
                not_diary_edit:

                // diary_delete
                if (preg_match('#^/admin/diary/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_diary_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'diary_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'diary_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DiaryController::deleteAction',));
                }
                not_diary_delete:

                // diary_search
                if (rtrim($pathinfo, '/') === '/admin/diary/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_diary_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'diary_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'diary_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DiaryController::searchAction',  '_route' => 'diary_search',);
                }
                not_diary_search:

                // diary_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/diary/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_diary_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'diary_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'diary_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\DiaryController::pagesearchAction',  '_route' => 'diary_pagesearch',);
                }
                not_diary_pagesearch:

            }

            if (0 === strpos($pathinfo, '/admin/motifabsence')) {
                // motifabsence_index
                if (rtrim($pathinfo, '/') === '/admin/motifabsence') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_motifabsence_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'motifabsence_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'motifabsence_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MotifAbsenceController::indexAction',  '_route' => 'motifabsence_index',);
                }
                not_motifabsence_index:

                // motifabsence_list
                if (rtrim($pathinfo, '/') === '/admin/motifabsence/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_motifabsence_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'motifabsence_list');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'motifabsence_list', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MotifAbsenceController::listAction',  '_route' => 'motifabsence_list',);
                }
                not_motifabsence_list:

                // motifabsence_page
                if (0 === strpos($pathinfo, '/admin/motifabsence/page') && preg_match('#^/admin/motifabsence/page/(?P<option>[^/]++)$#s', $pathinfo, $matches)) {
                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'motifabsence_page', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'motifabsence_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MotifAbsenceController::pageAction',));
                }

                // motifabsence_show
                if (preg_match('#^/admin/motifabsence/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_motifabsence_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'motifabsence_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'motifabsence_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MotifAbsenceController::showAction',));
                }
                not_motifabsence_show:

                // motifabsence_new
                if ($pathinfo === '/admin/motifabsence/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_motifabsence_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'motifabsence_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MotifAbsenceController::newAction',  '_route' => 'motifabsence_new',);
                }
                not_motifabsence_new:

                // motifabsence_edit
                if (preg_match('#^/admin/motifabsence/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_motifabsence_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'motifabsence_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'motifabsence_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MotifAbsenceController::editAction',));
                }
                not_motifabsence_edit:

                // motifabsence_delete
                if (preg_match('#^/admin/motifabsence/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_motifabsence_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'motifabsence_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'motifabsence_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MotifAbsenceController::deleteAction',));
                }
                not_motifabsence_delete:

                // motifabsence_search
                if (rtrim($pathinfo, '/') === '/admin/motifabsence/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_motifabsence_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'motifabsence_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'motifabsence_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MotifAbsenceController::searchAction',  '_route' => 'motifabsence_search',);
                }
                not_motifabsence_search:

                // motifabsence_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/motifabsence/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_motifabsence_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'motifabsence_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'motifabsence_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\MotifAbsenceController::pagesearchAction',  '_route' => 'motifabsence_pagesearch',);
                }
                not_motifabsence_pagesearch:

            }

            if (0 === strpos($pathinfo, '/admin/tsdoc')) {
                // tsdoc_index
                if (preg_match('#^/admin/tsdoc/(?P<idemployee>[^/]++)/index/?$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_tsdoc_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tsdoc_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tsdoc_index', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tsdoc_index')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TsdocController::indexAction',));
                }
                not_tsdoc_index:

                // tsdoc_page
                if (preg_match('#^/admin/tsdoc/(?P<option>[^/]++)/(?P<idemployee>[^/]++)/page/?$#s', $pathinfo, $matches)) {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tsdoc_page');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tsdoc_page', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tsdoc_page')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TsdocController::pageAction',));
                }

                // tsdoc_show
                if (preg_match('#^/admin/tsdoc/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_tsdoc_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tsdoc_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tsdoc_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TsdocController::showAction',));
                }
                not_tsdoc_show:

                // tsdoc_new
                if ($pathinfo === '/admin/tsdoc/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tsdoc_new;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tsdoc_new', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TsdocController::newAction',  '_route' => 'tsdoc_new',);
                }
                not_tsdoc_new:

                // tsdoc_edit
                if (preg_match('#^/admin/tsdoc/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tsdoc_edit;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tsdoc_edit', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tsdoc_edit')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TsdocController::editAction',));
                }
                not_tsdoc_edit:

                // tsdoc_search
                if (rtrim($pathinfo, '/') === '/admin/tsdoc/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tsdoc_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tsdoc_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tsdoc_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TsdocController::searchAction',  '_route' => 'tsdoc_search',);
                }
                not_tsdoc_search:

                // tsdoc_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/tsdoc/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_tsdoc_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tsdoc_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tsdoc_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TsdocController::pagesearchAction',  '_route' => 'tsdoc_pagesearch',);
                }
                not_tsdoc_pagesearch:

                // tsdoc_delete
                if (preg_match('#^/admin/tsdoc/(?P<id>[^/]++)/(?P<idemployee>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_tsdoc_delete;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'tsdoc_delete', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tsdoc_delete')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\TsdocController::deleteAction',));
                }
                not_tsdoc_delete:

            }

            if (0 === strpos($pathinfo, '/admin/robot')) {
                // robot_index
                if (rtrim($pathinfo, '/') === '/admin/robot') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_robot_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'robot_index');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'robot_index', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\RobotController::indexAction',  '_route' => 'robot_index',);
                }
                not_robot_index:

                // robot_list
                if (rtrim($pathinfo, '/') === '/admin/robot/list') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_robot_list;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'robot_list');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'robot_list', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\RobotController::listAction',  '_route' => 'robot_list',);
                }
                not_robot_list:

                // robot_show
                if (preg_match('#^/admin/robot/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_robot_show;
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'robot_show', key($requiredSchemes));
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'robot_show')), array (  '_controller' => 'Bo\\AdminBundle\\Controller\\RobotController::showAction',));
                }
                not_robot_show:

                // robot_work
                if (rtrim($pathinfo, '/') === '/admin/robot/work') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_robot_work;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'robot_work');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'robot_work', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\RobotController::workAction',  '_route' => 'robot_work',);
                }
                not_robot_work:

                // robot_search
                if (rtrim($pathinfo, '/') === '/admin/robot/search') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_robot_search;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'robot_search');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'robot_search', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\RobotController::searchAction',  '_route' => 'robot_search',);
                }
                not_robot_search:

                // robot_pagesearch
                if (rtrim($pathinfo, '/') === '/admin/robot/pagesearch') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_robot_pagesearch;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'robot_pagesearch');
                    }

                    $requiredSchemes = array (  'https' => 0,);
                    if (!isset($requiredSchemes[$this->context->getScheme()])) {
                        return $this->redirect($pathinfo, 'robot_pagesearch', key($requiredSchemes));
                    }

                    return array (  '_controller' => 'Bo\\AdminBundle\\Controller\\RobotController::pagesearchAction',  '_route' => 'robot_pagesearch',);
                }
                not_robot_pagesearch:

            }

        }

        // homepage
        if (rtrim($pathinfo, '/') === '') {
            if (substr($pathinfo, -1) !== '/') {
                return $this->redirect($pathinfo.'/', 'homepage');
            }

            return array (  '_controller' => 'AppBundle\\Controller\\DefaultController::indexAction',  '_route' => 'homepage',);
        }

        // app_lucky_number
        if ($pathinfo === '/lucky/number') {
            return array (  '_controller' => 'AppBundle\\Controller\\LuckyController::numberAction',  '_route' => 'app_lucky_number',);
        }

        throw 0 < count($allow) ? new MethodNotAllowedException(array_unique($allow)) : new ResourceNotFoundException();
    }
}
