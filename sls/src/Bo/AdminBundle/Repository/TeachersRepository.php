<?php

namespace Bo\AdminBundle\Repository;
/**
 * EmployeeRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TeachersRepository extends \Doctrine\ORM\EntityRepository
{
	public function getTotal(){
		$query = $this->_em->createQuery('SELECT COUNT(a) From BoAdminBundle:Employee a JOIN a.status b WHERE b.id =:1 or b.id =:3');
		return (int) $query->getSingleScalarResult();
	}
	public function search($sTexte){
		$sSelect = "SELECT v FROM Bo\AdminBundle\Entity\Employee v  JOIN v.status u WHERE (v.name like :motcle or v.email like :motcle or v.firstname like :motcle or v.homenumber like :motcle or v.address1 like :motcle) and (u.id =:status1 or u.id =:status2)";
		$oQuery =  $this->_em->createQuery($sSelect);	
		$oQuery->setParameters(array(
			'motcle' => "%".$sTexte."%",'status1'=>1,'status2'=>3,
		));	
		$aResult = $oQuery->getResult();
		return $aResult;
	}
	public function getAvailableForSchedule($oContract){
		if(!$oContract) return false;
		$aEmployee = $this->getQualifiedEmployee($oContract);
		$aResult = array();
		foreach($aEmployee as $oEmployee){
			$aResult[] = array($oEmployee->getId(),$oEmployee->getFirstname()." ".$oEmployee->getname()." (".$this->formatCollection($oEmployee->getTypecontract()).")"); 
		}
		return $aResult;
	}
	public function getAvailableBis($oContract,$aHolders){
		$aIds = $this->getIdHolder($aHolders);
		if(!$oContract) return false;
		$aEmployee = $this->getQualifiedEmployee($oContract);
		$aResult = array();
		foreach($aEmployee as $oEmployee){
			//if((isset($aIds[0]) and $aIds[0]==$oEmployee->getId()) || (isset($aIds[1]) and $aIds[1]==$oEmployee->getId())) continue;
			//Check teacher availability : 1 when teacher available 0 else
			$bAvailability = $this->isAvailable($oEmployee,$oContract);
			$aResult[] = array($oEmployee->getId(),$oEmployee->getFirstname()." ".$oEmployee->getname()." (".$this->formatCollection($oEmployee->getTypecontract()).")"); 
		}
		return $aResult;
	}
	public function getAvailable($oContract,$aHolders){
		$aIds = $this->getIdHolder($aHolders);
		if(!$oContract) return false;
		$aEmployee = $this->getQualifiedEmployee($oContract);
		$aResult = array();
		foreach($aEmployee as $oEmployee){
			//if((isset($aIds[0]) and $aIds[0]==$oEmployee->getId()) || (isset($aIds[1]) and $aIds[1]==$oEmployee->getId())) continue;
			$aResult[] = array($oEmployee->getId(),$oEmployee->getFirstname()." ".$oEmployee->getname()." (".$this->formatCollection($oEmployee->getTypecontract()).")"); 
		}
		return $aResult;
	}
	public function getAvailableByGroup($oGroup,$aHolders){
		$aIds = $this->getIdHolder($aHolders);
		if(!$oGroup) return false;
		$aEmployee = $this->getEmployeeByGroup($oGroup);
		$aResult = array();
		foreach($aEmployee as $oEmployee){
			//if((isset($aIds[0]) and $aIds[0]==$oEmployee->getId()) || (isset($aIds[1]) and $aIds[1]==$oEmployee->getId())) continue;
			$aResult[] = array($oEmployee->getId(),$oEmployee->getFirstname()." ".$oEmployee->getname()." (".$this->formatCollection($oEmployee->getTypecontract()).")"); 
		}
		return $aResult;
	}
	private function getEmployeeByGroup($oGroup){
		$aContract = $oGroup->getContracts();
		if(isset($aContract[0]) and $oContract=$aContract[0]) return $this->getQualifiedEmployee($oContract);
		$aStudent = $oGroup->getStudents();
		if(isset($aStudent[0]) and $oStudent=$aStudent[0]){
			$aContract = $oStudent->getContracts();
			if(isset($aContract[0]) and $oContract=$aContract[0]) return $this->getQualifiedEmployee($oContract);
		}
		return $this->getQualifiedEmployeeByGroup($oGroup);		
	}
	public function getAvailableForGroup($oGroup,$aHolders){
		//Obtenir les ids des professeurs titulaires du group
		$aIds = $this->getIdHolderBis($aHolders);
		if(!$oGroup) return false;
		$aEmployee = $this->getQualifiedEmployeeByGroup($oGroup);
		$aResult = array();
		foreach($aEmployee as $oEmployee){
			//Remove the holder of the qualified teachers list.
			//if((isset($aIds[0]) and $aIds[0]==$oEmployee->getId()) || (isset($aIds[1]) and $aIds[1]==$oEmployee->getId())) continue;
			$aResult[] = array($oEmployee->getId(),$oEmployee->getFirstname()." ".$oEmployee->getname()." (".$this->formatCollection($oEmployee->getTypecontract()).")"); 
		}
		return $aResult;
	}
	public function getAllWithout($aHolders){
		$aIds = $this->getIdHolder($aHolders);
		$aEmployee = $this->_em->getRepository('BoAdminBundle:Employee')->findBy(array('active'=>1),array('name' => 'asc'));
		$aResult = array();
		foreach($aEmployee as $oEmployee){
			if((isset($aIds[0]) and $aIds[0]==$oEmployee->getId()) || (isset($aIds[1]) and $aIds[1]==$oEmployee->getId())) continue;
			$aResult[] = array($oEmployee->getId(),$oEmployee->getFirstname()." ".$oEmployee->getname()." (".$this->formatCollection($oEmployee->getTypecontract()).")"); 
		}
		return $aResult;
	}
	private function getIdHolder($aHolders){
		$aIds=array();
		foreach($aHolders as $aTab){
			$aIds[]=$aTab[0];
		}
		return $aIds;
	}
	private function getIdHolderBis($aHolders){
		$aIds=array();
		foreach($aHolders as $oEmployee){
			$aIds[]=$oEmployee->getId();
		}
		return $aIds;
	}
	private function formatCollection($aCollection){
		if(!$aCollection) return null;
		$array=array();
		foreach($aCollection as $oCollection){
			$array[]=$oCollection->getReference();
		}
		return join("-",$array);
	}
	public function getQualifiedEmployee($oContract){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Employee', 'a')
			->join('a.typecontract', 'b')
			->join('a.langage', 'c')
			->where("b.id =:typecontract and c.name like :language and a.active=:active" )
			->orderBy("a.firstname","ASC")	
			->setParameters(array(
			'typecontract' => $oContract->getTypecontract()->getId(),
			'language' => "%".$oContract->getLanguage()."%",
			'active' => 1,
		));	
		$oQuery = $qb->getQuery();
		$aResult = $oQuery->getResult();
		return $aResult;
	}
	public function getQualifiedEmployeeByGroup($oGroup){
		if(!$oGroup) return null;
		$aContract = $this->_em->getRepository('BoAdminBundle:Contracts')->findBy(array('group'=>$oGroup));
		if(isset($aContract[0])) return $this->getQualifiedEmployee($aContract[0]);
		return null;
	}
	public function getTeacherList($status,$first=null,$max=null){
		$qb = $this->_em->createQueryBuilder();
		if($first==null and $max==null){
			$qb->select('a')
			->from('BoAdminBundle:Employee', 'a')
			->join('a.status', 'b')
			->where("b.statusname =:status" )
			->setParameters(array('status'=>$status));
		}else{
			$qb->select('a')
			->from('BoAdminBundle:Employee', 'a')
			->join('a.status', 'b')
			->where("b.statusname =:status" )
			->setMaxResults($max)
			->setFirstResult($first)
			->setParameters(array('status'=>$status));
		}
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getAllActiveTeacher(){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Employee', 'a')
			->join('a.status', 'b')
			->where("(b.id =:status1 or b.id =:status2 or b.id =:status3) and a.active=:active" )
			->orderBy("a.firstname","ASC")
			->setParameters(array('status1'=>1,'status2'=>3,'status3'=>5,'active' => 1));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getAllTeacher(){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Employee', 'a')
			->join('a.status', 'b')
			->where("b.id =:status1 or b.id =:status2 or b.id =:status3" )
			->orderBy("a.firstname","ASC")
			->setParameters(array('status1'=>1,'status2'=>3,'status3'=>5));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function findAllTeacher(){
		$aResult=array();
		$aTeacher = $this->getAllActiveTeacher();
		foreach($aTeacher as $oTeacher){
			 $aResult[$oTeacher->getId()]=$oTeacher;
		}
		return $aResult;
	}
	public function findAllTeacherBis(){
		$aResult=array();
		$aTeacher = $this->getAllTeacher();
		foreach($aTeacher as $oTeacher){
			 $aResult[$oTeacher->getId()]=$oTeacher;
		}
		return $aResult;
	}
	public function getSelectList(){
		$aResult=array();
		$aTeacher = $this->getAllActiveTeacher();
		foreach($aTeacher as $oTeacher){
			 $aResult[$oTeacher->getId()]=array($oTeacher->getId(),$oTeacher->getFirstname()." ".$oTeacher->getName());
		}
		return $aResult;		
	}
}
