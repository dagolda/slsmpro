<?php

namespace Bo\AdminBundle\Repository;
use Bo\AdminBundle\Entity\Criteria;
/**
 * SubstitutionRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SubstitutionRepository extends \Doctrine\ORM\EntityRepository
{
	public function getTotal(){
		$query = $this->_em->createQuery('SELECT COUNT(a) From BoAdminBundle:Substitution a');
		return (int) $query->getSingleScalarResult();
	}
	public function getTotalByEmployee($employee){
		if(!$employee) return 0;
		$query = $this->_em->createQuery('SELECT COUNT(a) From BoAdminBundle:Substitution a WHERE a.idsubstitute=:idemployee');
		$query->setParameters(array(
			'idemployee' => $employee->getId(),
		));	
		return (int) $query->getSingleScalarResult();
	}
	public function search($motcle){
		$date = $this->getDateByTexte($motcle);
		if($date!=null){
			$aResult = $this->getByDate($date);
			if(count($aResult)>0) return $aResult;
		}
		$oRep = $this->_em->getRepository('BoAdminBundle:Employee');
		$aResult = $oRep->search($motcle);
		if(count($aResult)==1){
			$idemployee=$aResult[0]->getId();
			$aResult = $this->getByHolderAndSubstitute($idemployee);
			if(count($aResult)>0) return $aResult;
		}
		$aResult = array();
		foreach($aResult as $oEmployee){
			$aSubs = $this->getByHolderAndSubstitute($oEmployee);
			$aResult = $this->mergeSubstitution($aSubs,$aResult);			
		}
		return $aResult;	
	}
	private function mergeSubstitution($aSubs,$aResult){
		foreach($aSubs as $oSubs){
			if(isset($aResult[$oSubs->getId()])) continue;
			$aResult[$oSubs->getId()] = $oSubs;
		}
		return $aResult;
	}
	public function getByHolderAndSubstitute($idemployee){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a') 
 			->from('BoAdminBundle:Substitution', 'a')
			->where("a.idholder=:idemployee or a.idsubstitute=:idemployee" )
			->setParameters(array(
				'idemployee'=>$idemployee,
			));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getByDate($date){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a') 
 			->from('BoAdminBundle:Substitution', 'a')
			->where("a.startdate <=:date and a.enddate>=:date" )
			->setParameters(array(
				'date'=>$date,
			));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function searchByHolder($idholder,$startdate,$enddate){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a') 
 			->from('BoAdminBundle:Substitution', 'a')
			->where("a.idholder=:idholder and a.startdate >=:startdate and a.startdate<=:enddate" )
			->orderBy('a.id','desc')
			->setParameters(array(
				'idholder'=>$idholder,
				'startdate'=>$startdate,
				'enddate'=>$enddate,
		));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getDayList(){
		$ddate=new \DateTime(date("d-m-Y"));;
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a') 
 			->from('BoAdminBundle:Substitution', 'a')
			->where("a.startdate <=:ddate and a.enddate >=:ddate" )
			->setParameters(array(
				'ddate'=>$ddate,
			));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getByHolderAndDate($idsubstitute,$ddate){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a') 
 			->from('BoAdminBundle:Substitution', 'a')
			->where("a.idsubstitute=:idsubstitute and a.startdate <=:ddate and a.enddate >=:ddate" )
			->setParameters(array(
				'idsubstitute'=>$idsubstitute,
				'ddate'=>$ddate,
			));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getBySubstituteAndDate($idsubstitute,$ddate){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a') 
 			->from('BoAdminBundle:Substitution', 'a')
			->where("a.idsubstitute=:idsubstitute and a.startdate <=:ddate and a.enddate >=:ddate" )
			->setParameters(array(
				'idsubstitute'=>$idsubstitute,
				'ddate'=>$ddate,
			));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	//Get substitution by contract id and by date
	public function getBySubsByContract($idcontract,$ddate){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a') 
 			->from('BoAdminBundle:Substitution', 'a')
			->where("a.idcontract=:idcontract and a.startdate <=:ddate and a.enddate >=:ddate" )
			->setParameters(array(
				'idcontract'=>$idcontract,
				'ddate'=>$ddate,
			));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	//Get substitution by group id and by date
	public function getBySubsByGroup($idgroup,$ddate){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a') 
 			->from('BoAdminBundle:Substitution', 'a')
			->where("a.idgroup=:idgroup and a.startdate <=:ddate and a.enddate >=:ddate" )
			->setParameters(array(
				'idgroup'=>$idgroup,
				'ddate'=>$ddate,
			));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getBySubsAndCont($idsubstitute,$idcontract,$ddate){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a') 
 			->from('BoAdminBundle:Substitution', 'a')
			->where("a.idcontract=:idcontract and a.startdate <=:ddate and a.enddate >=:ddate" )
			->setParameters(array(
				'idcontract'=>$idcontract,
				'ddate'=>$ddate,
			));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	private function getBySubsAndContBis($idsubstitute,$idcontract,$ddate){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a') 
 			->from('BoAdminBundle:Substitution', 'a')
			->where("a.idsubstitute=:idsubstitute and a.idcontract=:idcontract and a.startdate <=:ddate and a.enddate >=:ddate" )
			->setParameters(array(
				'idsubstitute'=>$idsubstitute,
				'idcontract'=>$idcontract,
				'ddate'=>$ddate,
			));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	private function getBySubsAndGroup($idsubstitute,$idgroup,$ddate){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a') 
 			->from('BoAdminBundle:Substitution', 'a')
			->where("a.idsubstitute=:idsubstitute and a.idgroup=:idgroup and a.startdate <=:ddate and a.enddate >=:ddate" )
			->setParameters(array(
				'idsubstitute'=>$idsubstitute,
				'idgroup'=>$idgroup,
				'ddate'=>$ddate,
			));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function searchBySubstitute($idsubstitute,$startdate,$enddate){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a') 
 			->from('BoAdminBundle:Substitution', 'a')
			->where("a.idsubstitute=:idsubstitute and a.startdate >=:startdate and a.startdate <=:enddate" )
			->orderBy('a.id',"desc")
			->setParameters(array(
				'idsubstitute'=>$idsubstitute,
				'startdate'=>$startdate,
				'enddate'=>$enddate,
			));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getBySubstitute($oEmployee){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a') 
 			->from('BoAdminBundle:Substitution', 'a')
			->where("a.idsubstitute=:idsubstitute")
			->orderBy('a.creationdate','DESC')
			->setParameters(array(
				'idsubstitute'=>$oEmployee->getId(),
			));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getByAgendaAndDate($oAgenda,$oDate){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a') 
 			->from('BoAdminBundle:Substitution', 'a')
			->join('a.agenda', 'b')
			->where("b.id =:idagenda and a.startdate<=:ddate and a.enddate>=:ddate" )
			->setParameters(array('idagenda'=>$oAgenda->getId(),'ddate'=>$oDate));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getBySchedules($oAgenda,$oSchedule){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a') 
 			->from('BoAdminBundle:Substitution', 'a')
			->join('a.agenda', 'b')
			->where("b.id =:idagenda and a.startdate<=:startdate and a.enddate>=:enddate" )
			->setParameters(array('idagenda'=>$oAgenda->getId(),'startdate'=>$oSchedule->getStartdate(),'enddate'=>$oSchedule->getEnddate()));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function existSubstitutionTS($substitution){
		$oDate=new \DateTime(date("d-m-Y"));
		$idemployee = $substitution->getIdsubstitute();
		$idcontract = $substitution->getIdcontract();
		//if($idcontract>0) echo "contract id:".$idcontract."<br>"; else echo "contract id:null<br>";
		$idgroup = $substitution->getIdgroup();
		//if($idgroup>0) echo  "group id:".$idgroup."<br>"; else echo "group id:null<br>";
		$qb = $this->_em->createQueryBuilder();
		if($idcontract>0){
			$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.employee', 'b')
			->join('a.contract', 'c')
			->where("b.id=:idemployee and c.id=:idcontract and a.startdate<=:ddate" )
			->setParameters(array('idemployee'=>$idemployee,'ddate'=>$oDate,'idcontract'=>$idcontract));
		}elseif($idgroup>0){
			$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.employee', 'b')
			->join('a.contract', 'c')
			->where("b.id=:idemployee and c.id=:idcontract and a.startdate<=:ddate" )
			->setParameters(array('idemployee'=>$idemployee,'startdate'=>$oDate,'idcontract'=>$idcontract));
		}
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		if(isset($aResult[0])) return 1;
		return 0;
	}
	public function existContSubs($absence,$idcontract){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Substitution', 'a')
			->where("a.idholder=:idemployee and a.startdate=:startdate and a.enddate=:enddate and a.idcontract=:idcontract" )
			->setParameters(array('idemployee'=>$absence->getEmployee()->getId(),'startdate'=>$absence->getStartdate(),'enddate'=>$absence->getEnddate(),'idcontract'=>$idcontract));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		if(isset($aResult[0])) return 1;
		return 0;
	}
	public function existGroupSubs($absence,$idgroup){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Substitution', 'a')
			->where("a.idholder=:idemployee and a.startdate=:startdate and a.enddate=:enddate and a.idgroup=:idgroup" )
			->setParameters(array('idemployee'=>$absence->getEmployee()->getId(),'startdate'=>$absence->getStartdate(),'enddate'=>$absence->getEnddate(),'idgroup'=>$idgroup));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		if(!isset($aResult[0])) return 0;
		return 1;
	}
	public function getTeachers($aSubstitution){
		$aResult=array();
		$oRep = $this->_em->getRepository('BoAdminBundle:Employee');
		foreach($aSubstitution as $oSubstitution){
			$oEmployee = $oRep->find($oSubstitution->getidholder());
			if($oEmployee) $aResult[$oEmployee->getId()] = $oEmployee;
		}
		return $aResult;
	}
	public function getByContracts($aContract,$employee,$ddate=null){
		if($aContract==null) return array();
		if($ddate==null) $ddate=new \DateTime(date("Y-m-d"));
		$aResult = array();
		foreach($aContract as $oContract){
			$aSubstitution = $this->_em->getRepository('BoAdminBundle:Substitution')->findby(array('idcontract'=>$oContract->getId(),'idholder'=>$employee->getId(),'startdate'=>$ddate));
			if(isset($aSubstitution[0]) and $oSubstitution = $aSubstitution[0]) $aResult[$oContract->getId()] = $oSubstitution;
		}
		return $aResult;
	}
	public function getByGroups($aGroup,$employee,$ddate=null){
		if($aGroup==null) return array();
		if($ddate==null) $ddate=date("Y-m-d");
		$aResult = array();
		foreach($aGroup as $oGroup){
			$aSubstitution = $this->_em->getRepository('BoAdminBundle:Substitution')->findby(array('idgroup'=>$oGroup->getId(),'idholder'=>$employee->getId(),'startdate'=>$ddate));
			if(isset($aSubstitution[0]) and $oSubstitution = $aSubstitution[0]) $aResult[$oContract->getId()] = $oSubstitution;
		}
		return $aResult;
	}
	public function getContracts($aSubstitution){
		$aResult=array();
		$oRep = $this->_em->getRepository('BoAdminBundle:Contracts');
		foreach($aSubstitution as $oSubstitution){
			if($oSubstitution->getidcontract()){
				$oContract = $oRep->find($oSubstitution->getidcontract());
				if($oContract) $aResult[$oContract->getId()] = $oContract;
			}
		}
		return $aResult;
	}
	public function getGroup($aSubstitution){
		$aResult=array();
		$oRep = $this->_em->getRepository('BoAdminBundle:Group');
		foreach($aSubstitution as $oSubstitution){
			if($oSubstitution->getidgroup()){
				$oGroup = $oRep->find($oSubstitution->getidgroup());
				if($oGroup) $aResult[$oGroup->getId()] = $oGroup;
			}
		}
		return $aResult;
	}
	public function getExistsTs($employee){
		$aResult=array();
		$oRepSub=$this->_em->getRepository('BoAdminBundle:Substitution');
		$aSubstitution=$this->getTodaySubstitution($employee);
		foreach($aSubstitution as $oSubstitution){
			if($this->existSubstitutionTS($oSubstitution)==0) $aResult[$oSubstitution->getId()] = $oSubstitution->getId();
		}
//exit(0);
		return $aResult;
	}
	public function getSubstitution($employee,$oDate1=null,$oDate2=null){
		$idemployee = $employee->getId();
		$oCriteria = new Criteria();
		if($oDate1==null) $oDate1 = new \DateTime(date("Y-m-d",mktime(0, 0, 0, date("m"), date("d")-7, date("Y"))));
		if($oDate2==null) $oDate2 = new \DateTime(date("d-m-Y"));
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Substitution', 'a')
			->where("a.idsubstitute=:idemployee and a.startdate>:date1 and a.startdate<:date2" )
			->setParameters(array('idemployee'=>$idemployee,'date1'=>$oDate1,'date2'=>$oDate2));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getTodaySubstitution($employee){
		$idemployee = $employee->getId();
		$oCriteria = new Criteria();
		$oDate = new \DateTime(date("d-m-Y"));
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Substitution', 'a')
			->where("a.idsubstitute=:idemployee and a.startdate<=:date and a.enddate>=:date" )
			->setParameters(array('idemployee'=>$idemployee,'date'=>$oDate));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getDaySubstitution($employee){
		$idemployee = $employee->getId();
		$oCriteria = new Criteria();
		$oToday = new \DateTime(date("d-m-Y"));
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Substitution', 'a')
			->where("a.idsubstitute=:idemployee and a.startdate<:today and a.enddate>:today" )
			->setParameters(array('idemployee'=>$idemployee,'today'=>$oToday));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function existSubstittution($substitution){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Substitution', 'a')
			->where("a.idholder=:idholder and a.idcontract=:idcontract and a.startdate=:startdate and a.enddate=:enddate and a.startam=:startam and a.endam=:endam and a.startpm=:startpm and a.endpm=:endpm" )
			->setParameters(array('idholder'=>$substitution->getIdholder(),'idcontract'=>$substitution->getIdcontract(),'startdate'=>$substitution->getStartdate(),'enddate'=>$substitution->getEnddate(),'startam'=>$substitution->getStartam(),'endam'=>$substitution->getEndam(),'startpm'=>$substitution->getStartpm(),'endpm'=>$substitution->getEndpm()));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;		
	}
	//Get substitution for today by employee and contract parameters given
	public function getContractSubstittution($oEmployee,$oContract){
		$today = new \DateTime(date("d-m-Y"));
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Substitution', 'a')
			->where("a.idholder=:idholder and a.idcontract=:idcontract and a.startdate<=:today and a.enddate>=:today" )
			->setParameters(array('idholder'=>$oEmployee->getId(),'idcontract'=>$oContract->getId(),'today'=>$today));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;		
	}
	//Get substitution for today by employee and group parameters given
	public function getGroupSubstittution($oEmployee,$oGroup){
		$today = new \DateTime(date("d-m-Y"));
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Substitution', 'a')
			->where("a.idholder=:idholder and a.idgroup=:idgroup and a.startdate<=:today and a.enddate>=:today" )
			->setParameters(array('idholder'=>$oEmployee->getId(),'idgroup'=>$oGroup->getId(),'today'=>$today));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;		
	}
	public function searchEmployee($aSubstitution){
		$aResult=array();
		$oRep = $this->_em->getRepository('BoAdminBundle:Contracts');
		foreach($aSubstitution as $oSubstitution){
			if($oSubstitution->getidcontract()){
				$oContract = $oRep->find($oSubstitution->getidcontract());
				if($oContract) $aResult[$oContract->getId()] = $oContract;
			}
		}
		return $aResult;
	}
	private function getDateByTexte($texte){
		$aTexte = explode("-",$texte);
		if(count($aTexte)<3) return null;
		//Check the date validity before
		return new \DateTime($texte);
	}
}
