<?php

namespace Bo\AdminBundle\Repository;

/**
 * AbsencesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AbsencesRepository extends \Doctrine\ORM\EntityRepository
{
	public function search($sTexte){
		$atexte = explode("-",trim($sTexte));
		if(count($atexte)==3 and is_numeric($atexte[0]) and is_numeric($atexte[1]) and is_numeric($atexte[2])){
			$oDate = new \DateTime($sTexte);
			$aResult = $this->getEmployeeByDay($oDate);
			if(count($aResult)>0) return $aResult; 
		}
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Absences', 'a')
			->join('a.employee', 'b')
			->join('a.students', 'c')
			->join('a.group', 'd')
			->join('a.contracts', 'e')
			->where("a.motif like :motcle or a.startdate like :motcle  or a.enddate like :motcle  or b.firstname like :motcle or b.name like :motcle or c.firstname like :motcle or c.name like :motcle or d.name like :motcle or e.contractnumber like :motcle")
			->setParameters(array('motcle' => "%".$sTexte."%",));
		$query = $qb->getQuery();
		$aResult = $query->getResult();
		return $aResult;	
	}
	public function searchEmployee($sTexte){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Absences', 'a')
			->join('a.employee', 'b')
			->where("b.id is not null and a.motif like :motcle or a.startdate like :motcle  or a.enddate like :motcle" )
			->setParameters(array('motcle' => "%".$sTexte."%",));
		$query = $qb->getQuery();
		$aResult = $query->getResult();
		return $aResult;	
	}
	public function searchStudent($sTexte){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Absences', 'a')
			->join('a.students', 'b')
			->where("b.id is not null and (a.motif like :motcle or a.startdate like :motcle  or a.enddate like :motcle or b.firstname like :motcle or b.name like :motcle)")
			->setParameters(array('motcle' => "%".$sTexte."%",));
		$query = $qb->getQuery();
		$aResult = $query->getResult();
		return $aResult;	
	}
	public function searchStudentAbs($sTexte){
		$atexte = explode("-",trim($sTexte));
		if(count($atexte)==3 and is_numeric($atexte[0]) and is_numeric($atexte[1]) and is_numeric($atexte[2])){
			$oDate = new \DateTime($sTexte);
			$aResult = $this->getStudentsByDay($oDate);
			if(count($aResult)>0) return $aResult; 
		}
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Absences', 'a')
			->join('a.students', 'b')
			->where("b.id is not null and (a.motif like :motcle or a.startdate like :motcle  or a.enddate like :motcle or b.firstname like :motcle or b.name like :motcle)")
			->setParameters(array('motcle' => "%".$sTexte."%",));
		$query = $qb->getQuery();
		$aResult = $query->getResult();
		return $aResult;	
	}
	//Get all absences for a students
	public function getByStudents($oStudent,$option=null){
		if($option==null or $option==0)
			return $this->_em->getRepository('BoAdminBundle:Absences')->findBy(array('students'=>$oStudent),array('id' => 'desc'));
		elseif($option>0)
			return $this->_em->getRepository('BoAdminBundle:Absences')->findBy(array('students'=>$oStudent),array('id' => 'desc'),$option,0);
		return array();
	}
	public function getEmployeeTotal(){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Absences', 'a')
			->join('a.employee', 'b')
			->where("b.id >:zero" )
			->setParameters(array('zero'=>0));
		$query = $qb->getQuery();
		$aResult = $query->getResult();
		return count($aResult);		
	}
	public function getStudentsTotal(){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Absences', 'a')
			->join('a.students', 'b')
			->where("b.id >:zero" )
			->setParameters(array('zero'=>0));
		$query = $qb->getQuery();
		$aResult = $query->getResult();
		return count($aResult);	
	}
	//Verify if the student filled a form for a date given
	public function existSudentsAbsence($student,$date){
		$aResult= $this->getStudentsAbsencesByDate($student,$date);		
		if(isset($aResult[0])) return true;
		return false;
	}
	//Verify if the employee filled a form for a date given
	public function existEmployeeAbsence($oEmployee,$date){
		$aResult= $this->getEmployeeAbsencesByDate($oEmployee,$date);
		if(isset($aResult[0])) return true;
		return false;	
	}
	//Get all absence for employees
	public function getEmployeeDayAbsence(){
		$today = date("Y-m-d");
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Absences', 'a')
			->join('a.employee', 'b')
			->orderBy('a.id', 'desc')
			->where("b.id >:zero and a.startdate<=:ddate and a.enddate>=:ddate" )
			->setParameters(array('zero'=>0,'ddate'=>$today));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getStudentsDayAbsence(){
		$today = date("Y-m-d");
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Absences', 'a')
			->join('a.students', 'b')
			->where("b.id >:zero and a.startdate<=:ddate and a.enddate>=:ddate" )
			->setParameters(array('zero'=>0,'ddate'=>$today));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;		
	}
	public function getEmployeeByDay($oDate){
		$today = date("Y-m-d");
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Absences', 'a')
			->join('a.employee', 'b')
			->where("b.id >:zero and a.startdate<=:ddate and a.enddate>=:ddate" )
			->setParameters(array('zero'=>0,'ddate'=>$oDate));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;		
	}
	public function getStudentsByDay($oDate){
		$today = date("Y-m-d");
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Absences', 'a')
			->join('a.students', 'b')
			->where("b.id >:zero and a.startdate<=:ddate and a.enddate>=:ddate" )
			->setParameters(array('zero'=>0,'ddate'=>$oDate));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;		
	}
	public function getEmployeeAbsencesByDate($oEmployee,$date){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Absences', 'a')
			->join('a.employee', 'b')
			->where("b.id =:idemployee and a.startdate<=:ddate and a.enddate>=:ddate" )
			->setParameters(array('idemployee'=>$oEmployee->getId(),'ddate'=>$date));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getStudentAbsencesByDate($oStudent,$date){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Absences', 'a')
			->join('a.students', 'b')
			->where("b.id =:idstudent and a.startdate<=:ddate and a.enddate>=:ddate" )
			->setParameters(array('idstudent'=>$oStudent->getId(),'ddate'=>$date));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getByAgendaAndDate($oAgenda,$date){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Absences', 'a')
			->join('a.agenda', 'b')
			->where("b.id =:idagenda and a.startdate<=:ddate and a.enddate>=:ddate" )
			->setParameters(array('idagenda'=>$oAgenda->getId(),'ddate'=>$date));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getAbsencesByContract($idcontract,$date){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Absences', 'a')
			->join('a.contracts', 'b')
			->where("b.id =:idcontract and a.startdate<=:ddate and a.enddate>=:ddate" )
			->setParameters(array('idcontract'=>$idcontract,'ddate'=>$date));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getStudentsAbsencesBySchedule($oStudent,$oSchedule){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Absences', 'a')
			->join('a.students', 'b')
			->where("b.id =:idstudent and a.startdate<=:startdate and a.enddate>=:enddate" )
			->setParameters(array('idstudent'=>$oStudent->getId(),'startdate'=>$oSchedule->getStartdate(),'enddate'=>$oSchedule->getEnddate()));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;	
	}
	public function getStudentsAbsencesByDate($oStudent,$date){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Absences', 'a')
			->join('a.students', 'b')
			->where("b.id =:idstudent and a.startdate<=:ddate and a.enddate>=:ddate" )
			->setParameters(array('idstudent'=>$oStudent->getId(),'ddate'=>$date));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;	
	}
	public function getStudentsAbsencesByDates($oStudent,$date1,$date2){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Absences', 'a')
			->join('a.students', 'b')
			->where("b.id =:idstudent and ((a.startdate>=:ddate1 and a.startdate<=:ddate2) or (a.enddate>=:ddate1 and a.enddate<=:ddate2))" )
			->setParameters(array('idstudent'=>$oStudent->getId(),'ddate1'=>$date1,'ddate2'=>$date2));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;	
	}
	public function getEmployeeAbsencesByDates($oEmployee,$date1,$date2){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Absences', 'a')
			->join('a.employee', 'b')
			->where("b.id =:idemployee and ((a.startdate>=:ddate1 and a.startdate<=:ddate2) or (a.enddate>=:ddate1 and a.enddate<=:ddate2))" )
			->setParameters(array('idemployee'=>$oEmployee->getId(),'ddate1'=>$date1,'ddate2'=>$date2));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;	
	}
	public function getEmployeeAbsencesByNew($oEmployee,$new){
		$startdate = $new->getStartdate();
		$enddate = $new->getEnddate();
		return $this->getEmployeeAbsencesByDates($oEmployee,$startdate,$enddate);
	}
}
