<?php

namespace Bo\AdminBundle\Repository;
use Bo\AdminBundle\Entity\Contracts;
use Bo\AdminBundle\Entity\Group;
/**
* ContractsRepository
* This class was generated by the Doctrine ORM. Add your own custom
* repository methods below.
*/
class ContractsRepository extends \Doctrine\ORM\EntityRepository
{
	public function getAllTotal(){
		$query = $this->_em->createQuery('SELECT COUNT(a) From BoAdminBundle:Contracts a');
		return (int) $query->getSingleScalarResult();
	}
	public function getAllTotalByType($idtype,$status){
		$query = $this->_em->createQuery('SELECT COUNT(a) From BoAdminBundle:Contracts a JOIN a.typecontract b WHERE  a.status=:status and b.id=:idtype');
		$query->setParameters(array(
			'status'=>$status,
			'idtype'=>$idtype,
		));
		return (int) $query->getSingleScalarResult();
	}
	public function updateUpcomingContracts(){
		$q = $this->_em->createQueryBuilder()
			->update('BoAdminBundle:Contracts', 'u')
			->set('u.status', 2)
			->where('u.startdate >=:now')
			->setParameters(array('now'=>new \DateTime()))
			->getQuery();
		return $q->execute();		
	}
	public function getInprogressTotal(){
		$query = $this->_em->createQuery('SELECT COUNT(a) From BoAdminBundle:Contracts a WHERE a.status=:status');
		$query->setParameters(array(
			'status'=>1,
		));
		return (int) $query->getSingleScalarResult();
	}
	public function getTotalByField($idfield,$status){
		$aResult=array();	
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.workfields', 'b')
			->where("b.id =:idfield and a.status=:status" )
			->setParameters(array(
				'idfield'=>$idfield,
				'status'=>$status,
			));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return count($aResult);
	}
	public function getContractAdvisorTotal($status,$employee){
		$query = $this->_em->createQuery('SELECT COUNT(a) From BoAdminBundle:Contracts a JOIN a.advisor b WHERE a.status=:status and b.id=:idemployee');
		$query->setParameters(array(
			'status'=>$status,
			'idemployee'=>$employee->getId(),
		));
		return (int) $query->getSingleScalarResult();
	}
	
	public function getContractAdvisor($employee){
		$query = $this->_em->createQuery('SELECT COUNT(a) From BoAdminBundle:Contracts a JOIN a.advisor b WHERE a.status=:status and b.id=:idemployee');
		$query->setParameters(array(
			'status'=>$status,
			'idemployee'=>$employee->getId(),
		));
		return $query->getResult();
	}
	public function getBothContractAdvisor($employee){
		$aResult=array();	
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.advisor', 'b')
			->where("b.id=:idemployee and (a.status=:status1 or a.status=:status2)" )
			->setParameters(array(
				'idemployee'=>$employee->getId(),
				'status1'=>1,
				'status2'=>2,
			));

/*
		$query = $this->_em->createQuery('SELECT COUNT(a) From BoAdminBundle:Contracts a JOIN a.advisor b WHERE b.id=:idemployee');
		$query->setParameters(array(
			'idemployee'=>$employee->getId(),
		));
*/
		$query = $qb->getQuery();
		return $query->getResult();
	}
	public function getContractCordinatorTotal($status,$coordinator){
		if($coordinator->getMaster()==false){
			$query = $this->_em->createQuery('SELECT COUNT(a) From BoAdminBundle:Contracts a WHERE a.status=:status and a.coordinator=:coordinator');
			$query->setParameters(array(
				'status'=>$status,
				'coordinator'=>$coordinator,
			));			
		}else{
			$query = $this->_em->createQuery('SELECT COUNT(a) From BoAdminBundle:Contracts a WHERE a.status=:status and a.client=:client');
			$query->setParameters(array(
				'status'=>$status,
				'client'=>$coordinator->getClient(),
			));				
		}
		return (int) $query->getSingleScalarResult();
	}
	public function getArchivedTotal(){
		$query = $this->_em->createQuery('SELECT COUNT(a) From BoAdminBundle:Contracts a WHERE a.status=:status');
		$query->setParameters(array(
			'status'=>0,
		));
		return (int) $query->getSingleScalarResult();
	}
	public function createReference(Contracts $oContract){
		if($oContract){
			$type=trim($oContract->getTypecontract());
			$date=trim($oContract->getCreationdate()->format("Ymdhis"));
			$wf = trim($oContract->getWorkfields());
			return $date.$type.$wf;
		}
		return null;
	}
	private function getByNumberDay($idays){
		$startdate=new \DateTime();
		$enddate=new \DateTime(date("Y-m-d",mktime(0,0,0,date("m"),date("d")+$idays,date("Y"))));
		return $this->findByPeriod($startdate,$enddate);
	}
	private function getByNumberMonth($imonth){
		$startdate=new \DateTime();
		$enddate=new \DateTime(date("Y-m-d",mktime(0,0,0,date("m")+$imonth,31,date("Y"))));
		return $this->findByPeriod($startdate,$enddate);
	}
	private function getByNumberYear($iyear){
		$startdate=new \DateTime();
		$enddate=new \DateTime(date("Y-m-d",mktime(0,0,0,12,date("d"),date("Y")+$iyear)));
		return $this->findByPeriod($startdate,$enddate);
	}
	public function search($sTexte){
		$oEmExp = $this->_em->getRepository('BoAdminBundle:Contracts');
		$aResult=array();			
		$sTexte=trim($sTexte);
		$aTexte = explode('+',$sTexte);
		if(count($aTexte)>1){
			$aResult = $this->getAllById($aTexte[0]);
			if(count($aResult)>0) return $aResult;
		}
		//search by local
		$aResult = $this->getByLocalName($sTexte);
		if(count($aResult)>0) return $aResult;
		$oResult = $oEmExp->find($sTexte);
		//search by id
		if($oResult) return array($oResult);
		$aTexte = explode(' ',$sTexte);
		if(count($aTexte)>3){
			if($aTexte[0]=="finished" and $aTexte[1]=="in"){
				$inumber=intval($aTexte[2]);
				if($inumber>0 and $fword=$aTexte[3][0]){
					if($fword=="d"){
						return $this->getByNumberDay($inumber);
					}elseif($fword=="m"){
						return $this->getByNumberMonth($inumber);
					}elseif($fword=="y"){
						return $this->getByNumberYear($inumber);
					}					
				}
			}
		}elseif(count($aTexte)==2){
			$aResult = $this->getByFNStudents($aTexte[0],$aTexte[1]);
			if(count($aResult)>0) return $aResult;
			$aResult = $this->getByFNStudents($aTexte[1],$aTexte[0]);
			if(count($aResult)>0) return $aResult;
			if($aTexte[0]=="field" or $aTexte[0]=="Field"){
				return $this->findByField($sTexte);
			}elseif($aTexte[0]=="field" and $aTexte[1]=="all"){
				return $this->findOtherByType($aTexte[0],"all");
			}elseif($aTexte[0]=="field" and $aTexte[1]=="inprogress" or $aTexte[1]=="inp"){
				return $this->findOtherByType($aTexte[0],"1");
			}elseif($aTexte[0]=="field" and $aTexte[1]=="finished" or $aTexte[1]=="fin"){
				return $this->findOtherByType($aTexte[0],"0");				
			}else{
				return $this->findByFullName(trim($aTexte[0]),trim($aTexte[1]));	
			}
		}
		if($sTexte=="archived" or $sTexte=="fini" or $sTexte=="finished" or $sTexte=="finish" or $sTexte=="completed"){
			$aResult = $oEmExp->findBy(array('status'=>0),array('id' => 'desc'));
			if(isset($aResult[0])) return $aResult;
		}
		if($sTexte=="en cours" or $sTexte=="in progress" or $sTexte=="progress" or $sTexte=="cours" or $sTexte=="pending"){
			$aResult = $oEmExp->findBy(array('status'=>1),array('id' => 'desc'));
			if(isset($aResult[0])) return $aResult;
		}
		$aResult=$this->findByType($sTexte);
		if(isset($aResult[0])) return $aResult;	
		$aResult=$this->findByEmployee($sTexte);
		if(isset($aResult[0]))return $aResult;
		$aResult=$this->findByStudents($sTexte);
		if(isset($aResult[0]))return $aResult;
		$aResult=$this->findByGroup($sTexte);
		if(isset($aResult[0]))return $aResult;
		$aResult=$this->findByAdvisors($sTexte);
		if(isset($aResult[0]))return $aResult;
		return null;	
	}
	//Search contrats for creating timesheet 
	//Call by BoHomeBundle:Timesheet
	public function searchContract($sTexte){
		$aResult=$this->findByGroup($sTexte);
		if(isset($aResult[0])) return $aResult;	
		$aResult=$this->findByEmployee($sTexte);
		if(isset($aResult[0]))return $aResult;
		$aResult=$this->findByStudents($sTexte);
		if(isset($aResult[0]))return $aResult;
		return null;
	}
	private function findByType($sTexte){
		$aResult=array();	
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.typecontract', 'b')
			->where("a.startdate like :motcle or a.enddate like :motcle or a.typeoftraining like :motcle or a.ordernumber like :motcle or a.contractnumber like :motcle or a.hourlyrate like :motcle or a.language like :motcle or a.typetime like :motcle or b.reference like :motcle" )
			->setParameter('motcle', "%".$sTexte."%");
		$query = $qb->getQuery();
		return $query->getResult();			
	}
	private function findByField($sTexte){
		$aResult=array();	
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.workfields', 'b')
			->where("b.wfname like :motcle and a.status=:status" )
			->setParameters(array(
				'motcle'=>"%".$sTexte."%",
				'status'=>1,
			));
		$query = $qb->getQuery();
		return $query->getResult();			
	}
	private function findByFieldid($idfield,$status){
		$aResult=array();	
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.workfields', 'b')
			->where("b.id =:idfield and a.status=:status" )
			->setParameters(array(
				'motcle'=>"%".$sTexte."%",
				'status'=>$status,
			));
		$query = $qb->getQuery();
		return $query->getResult();			
	}
	private function getByField($sTexte){
		$aResult=array();	
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.workfields', 'b')
			->where("b.id =:idwfield and a.status=:status" )
			->setParameters(array(
				'idwf'=>$idwfield,
				'status'=>$status,
			));
		$query = $qb->getQuery();
		return $query->getResult();			
	}
	private function findOtherByType($sType,$status="all"){
		$where="b.reference like :motcle and a.status=:status";
		$array=array('motcle'=>"%".$sType."%");
		if($status!="all"){
			$where=$where." and a.status=:status";
			$array['status']=$status;
		} 
		$aResult=array();	
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.typecontract', 'b')
			->where($where)
			->setParameters($array);
		$query = $qb->getQuery();
		return $query->getResult();		
	}
	public function findByPeriod($startdate,$enddate){
		$aResult=array();	
		$qb = $this->_em->createQueryBuilder();
		if($startdate!=null){
			$qb->select('a')
				->from('BoAdminBundle:Contracts', 'a')
				->where("a.startdate>=:startdate and a.enddate <=:enddate" )
				->setParameters(array(
					'startdate'=>$startdate,
					'enddate'=>$enddate,
				));			
		}else{
			$qb->select('a')
				->from('BoAdminBundle:Contracts', 'a')
				->where("a.status=:status and a.enddate <=:enddate" )
				->setParameters(array(
					'status'=>1,
					'enddate'=>$enddate,
				));
		}
		$query = $qb->getQuery();
		return $query->getResult();			
	}
	public function getAllByLocal($local){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.local', 'b')
			->where("b.id like :idlocal and a.status=:status" )
			->setParameters(array('status'=>1,'idlocal'=>$local->getId()));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getByLocalName($reference){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.local', 'b')
			->where("b.reference like :reference and a.status=:status" )
			->setParameters(array('status'=>1,'reference'=>$reference."%"));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function findByAdvisors($sTexte){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.employee', 'b')
			->where("b.name like :motcle or b.firstname like :motcle" )
			->setParameter('motcle', "%".trim($sTexte)."%");
		$query = $qb->getQuery();
		return $query->getResult();
	}
	public function getElapsedContract(){
		$enddate=new \DateTime(date("Y-m-d",mktime(0,0,0,date("m"),date("d")-15,date("Y"))));
		return $this->findByPeriod(null,$enddate);
	}
	private function findByGroup($sTexte){
		$aResult=array();	
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.group', 'b')
			->where("a.ordernumber like :motcle or a.contractnumber like :motcle or b.name like :motcle" )
			->setParameter('motcle', "%".$sTexte."%");
		$query = $qb->getQuery();
		return $query->getResult();			
	}
	public function getAllByGroup($group){
		$aResult=array();	
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.group', 'b')
			->where("b.id =:idgroup")
			->setParameter('idgroup',$group->getId());
		$query = $qb->getQuery();
		return $query->getResult();			
	}
	public function getAllById($id){
		$aResult=array();	
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->where("a.id >:id")
			->setParameter('id',$id);
		$query = $qb->getQuery();
		return $query->getResult();			
	}
	private function findByEmployee($sTexte){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.employee', 'b')
			->where("b.name like :motcle or b.firstname like :motcle" )
			->setParameter('motcle', "%".trim($sTexte)."%");
		$query = $qb->getQuery();
		$aResult1 = $query->getResult();
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.group', 'b')
			->join('b.employee', 'c')
			->where("c.name like :motcle or c.firstname like :motcle" )
			->setParameter('motcle', "%".trim($sTexte)."%");
		$query = $qb->getQuery();
		$aResult2 = $query->getResult();
		return array_unique(array_merge($aResult1,$aResult2));
	}
	private function findByFullName($sTexte1,$sTexte2){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.employee', 'b')
			->where("b.name like :texte2 and b.firstname like :texte1" )
			->setParameters(array('texte1'=> "%".trim($sTexte1)."%",'texte2'=> "%".trim($sTexte2)."%"));
		$query = $qb->getQuery();
		$aResult1 = $query->getResult();
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.group', 'b')
			->join('b.employee', 'c')
			->where("c.name like :texte2 and c.firstname like :texte1" )
			->setParameters(array('texte1'=> "%".trim($sTexte1)."%",'texte2'=> "%".trim($sTexte2)."%"));
		$query = $qb->getQuery();
		$aResult2 = $query->getResult();
		return array_unique(array_merge($aResult1,$aResult2));
	}
	private function findByEmployee2($employee){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.employee', 'b')
			->where("b.id =:idemployee" )
			->setParameter('idemployee', $employee->getId());
		$query = $qb->getQuery();
		return $query->getResult();
	}
	public function getActiveByEmployee($employee){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.employee', 'b')
			->where("b.id =:idemployee and a.status =:status")
			->setParameters(array('idemployee'=>$employee->getId(),'status'=>1));
		$query = $qb->getQuery();
		return $query->getResult();
	}
	private function findByStudents($sTexte){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.students', 'b')
			->where("b.name like :motcle or b.firstname like :motcle" )
			->setParameter('motcle', "%".$sTexte."%");
		$query = $qb->getQuery();
		return $query->getResult();
	}
	public function getByFNStudents($firstname,$name){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.students', 'b')
			->where("b.name like :name and b.firstname like :firstname" )
			->setParameters(array('firstname'=>"%".$firstname."%",'name'=>"%".$name."%"));
		$query = $qb->getQuery();
		return $query->getResult();
	}
	public function getContractByStudents($idstudent){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.students', 'b')
			->where("b.id =:idstudent and a.status =:status" )
			->setParameters(array(
				'idstudent'=>$idstudent,
				'status'=>1,
			));
		$query = $qb->getQuery();
		return $query->getResult();
	}
	public function getTeacherContracts($employee){
		$now = new \DateTime();
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.employee', 'b')
			->where("b.id =:idemployee and a.status=:status and a.startdate<:startdate" )
			->setParameters(array('idemployee'=>$employee->getId(),'status'=>1,'startdate'=>$now));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getUpcomingContracts(){
		$now = new \DateTime();
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->where("(a.status=1 or a.status=2) and a.startdate>:now" )
			->setParameters(array('now'=>$now));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getEmployeeGroup($employee){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Group', 'a')
			->join('a.employee', 'b')
			->where("b.id =:idemployee and a.status=:status" )
			->setParameters(array('idemployee'=>$employee->getId(),'status'=>1));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getGroupContracts($employee){
		$aGroup = $this->getEmployeeGroup($employee);
		if(isset($aGroup[0])) return $this->getGroupContract($aGroup[0]->getId());
	}
	public function getStudentContracts($student){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.students', 'b')
			->where("b.id =:idstudent" )
			->setParameter('idstudent', $student->getId());
		$query = $qb->getQuery();
		return $query->getResult();	
	}
	public function getCurrentStudentContract($student){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.students', 'b')
			->where("b.id =:idstudent and a.status=:status and a.enddate >=:now and a.startdate <=:now" )
			->setParameters(array('idstudent'=>$student->getId(),'status'=>1,'now'=>new \DateTime(date("d-m-Y"))));
		$query = $qb->getQuery();
		return $query->getResult();	
	}
	public function getActiveContracts(){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.workfields', 'b')
			->where("a.status=:status and a.enddate >=:now and a.startdate <=:now and (b.id!=:field1 or b.id!=:field1)" )
			->setParameters(array('status'=>1,'now'=>new \DateTime(date("d-m-Y")),'field1'=>1,'field2'=>2));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getCurrentStudentGroup($student){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.students', 'b')
			->join('a.group', 'c')
			->where("b.id =:idstudent and a.status=:status and a.enddate >=:now and a.startdate <=:now and c.id>0" )
			->setParameters(array('idstudent'=>$student->getId(),'status'=>1,'now'=>new \DateTime()));
		$query = $qb->getQuery();
		return $query->getResult();	
	}
	public function getInprogressContracts($employee){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.employee', 'b')
			->where("b.id =:idemployee and a.status=:status" )
			->setParameters(array('idemployee'=>$employee->getId(),'status'=>1));
		$query = $qb->getQuery();
		return $query->getResult();	
	}
	public function getEmployeeContracts($employee){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.employee', 'b')
			->where("b.id =:idemployee and a.enddate>:olddate" )
			->setParameters(array('idemployee'=>$employee->getId(),'olddate'=>$this->getOldDate()));
		$query = $qb->getQuery();
		return $query->getResult();	
	}
	//return string
	private function getDayDate($date,$lang){
		$weekdays = $this->getWeekdays($date,$lang);
		list($year, $month, $day) = explode ("-", $date);
		$timestamp = mktime(0,0,0, date($month), date($day), date($year));
		$nday = date("N",$timestamp);
		return $weekdays[$nday];	 
	}
	//return array
	private function getArrayNdays($day1,$day2) {
		return array($this->getDayNumber($day1),$this->getDayNumber($day2));
	}
	private function getWeekdays($date,$lang){
		$weekdays = $lang=="fr"?array(1=>"Lundi", 2=>"Mardi", 3=>"Mercredi", 4=>"Jeudi", 5=>"Vendredi", 6=>"Samedi", 7=>"Dimanche"):array(1=>"Monday", 2=>"Tuesday", 3=>"Wednesday", 4=>"Thursday", 5=>"Friday", 6=>"Saturday", 7=>"Sunday");
		return $weekdays;
	}
	private function getDayNumber($day){
		$aFrDays = array("Lundi"=>1,"Mardi"=>2,"Mercredi"=>3,"Jeudi"=>4,"Vendredi"=>5,"Samedi"=>6,"Dimanche"=>7);
		$aEnDays = array("Monday"=>1, "Tuesday"=>2,"Wednesday"=>3, "Thursday"=>4, "Friday"=>5, "Saturday"=>6, "Sunday"=>7);
		if(isset($aFrDays[$day])) return $aFrDays[$day];
		if(isset($aFrDays[ucfirst($day)])) return $aFrDays[ucfirst($day)];
		if(isset($aEnDays[$day])) return $aEnDays[$day];
		if(isset($aEnDays[ucfirst($day)])) return $aEnDays[ucfirst($day)];
		return null;
	}
	//Entry : array of contarcts entity
	//return array of string
	public function getStatus($aContracts){
		if(!isset($aContracts[0])) return null;
		$aStatus = array();
		foreach($aContracts as $oContract){
			$aStatus[$oContract->getId()] = $oContract->getStringStatus();
		}
		return $aStatus;		
	}
	public function getListContracts($employee){
		$aContracts = array();
		$InprogressContract = $this->getInprogressContracts($employee);
		foreach($InprogressContract as $oContract){
			if($oContract->getGroup() and !isset($aContracts[$oContract->getGroup()->getId()])){
				$aContracts[$oContract->getGroup()->getId()]=$oContract;
			}
		}
		return $aContracts;
	}	
	public function getListGroup($employee){
		$aGroups = array();
		$InprogressContract = $this->getEmployeeContracts($employee);
		foreach($InprogressContract as $oContract){
			if($oContract->getGroup() and !isset($aGroups[$oContract->getGroup()->getId()])){
				$aGroups[$oContract->getGroup()->getId()]=$oContract->getGroup();
			}
		}
		return $aGroups;
	}
	//return array	
	public function getListStudent($employee){
		$aListStudents = array();
		$InprogressContract = $this->getEmployeeContracts($employee);
		foreach($InprogressContract as $oContract){
			$aStudents = $oContract->getStudents();
			foreach($aStudents as $oStudent){
				if(!isset($aListStudents[$oStudent->getId()])){
					$aListStudents[$oStudent->getId()]=$oStudent;
				}				
			}
		}
		return $aListStudents;
	}
	public function getAllInprogress(){
		$this->updateStatus();
		return $this->_em->getRepository('BoAdminBundle:Contracts')->findBy(array('archived'=>0,'status'=>1),array('id' => 'desc'));
	}
	public function getAllCompleted(){
		return $this->_em->getRepository('BoAdminBundle:Contracts')->findBy(array('status'=>0),array('id' => 'desc'));
	}
	public function findByPage($nb_cpp,$offset){	
		return $this->_em->getRepository('BoAdminBundle:Contracts')->findBy(array('status'=>1),array('id' => 'desc'),$nb_cpp,$offset);
	}
	public function getStudentContract($idstudent){
		$oStudent = $this->_em->getRepository('BoAdminBundle:Students')->find($idstudent);
		if($oStudent){
			return $this->_em->getRepository('BoAdminBundle:Contracts')->find($oStudent->getIdcontracts());
		}
		return null;
	}
	public function  getGroupContract($idgroup){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.group', 'b')
			->where("b.id =:idgroup and a.status=:status" )
			->setParameters(array('idgroup'=>$idgroup,'status'=>1));
		$query = $qb->getQuery();
		return $query->getResult();	
	}
	private function updateStatus(){
		$aContract = $this->_em->getRepository('BoAdminBundle:Contracts')->findBy(array('status'=>0),array('id' => 'desc'));
		foreach($aContract as $oContract){
			$oContract->updateStatus();
			$this->_em->flush();
		}
	}
	public function getListSelect(){
		$aResult=array();
		$aContracts = $this->getAllInprogress();	
		foreach($aContracts as $oContract){
			$aResult[]=array($oContract->getId(),$oContract->getContractnumber());
		}
		return $aResult;
	}
	public function getOldDate(){
		$leastmonth = date("Y-m-d",mktime(0, 0, 0, date("n"), date("j")-30, date("Y")));
		return new \DateTime($leastmonth);
	}
	public function getContractType(){
		return $this->_em->getRepository('BoAdminBundle:Typecontract')->getAllType();
	}
	public function getWorkFields(){
		return $this->_em->getRepository('BoAdminBundle:Workfields')->getAllField();
	}
	public function getDataPeriod($idtype,$idstatus,$idfield,$startdate=null,$enddate=null){
		if($idstatus==2) return $this->getUpcomingData($idtype,$idfield);
		elseif($idfield==0) return $this->getDataPeriodType($idtype,$idstatus,$startdate,$enddate);
		else return $this->getDataPeriodField($idfield,$idstatus,$startdate,$enddate);
		return null;
	}
	public function getUpcomingData($idtype,$idfield){		
		$now = new \DateTime();
		$qb = $this->_em->createQueryBuilder();
		if($idtype==0 and $idfield==0){
			return $this->getUpcomingContracts();
		}elseif($idtype==0){
			$qb->select('a')
				->from('BoAdminBundle:Contracts', 'a')
				->join('a.workfields', 'b')
				->where("(a.status=1 or a.status=2) and a.startdate>:now and b.id =:idfield" )
				->setParameters(array('now'=>$now,'idfield'=>$idfield));
		}elseif($idfield==0){
			$qb->select('a')
				->from('BoAdminBundle:Contracts', 'a')
				->join('a.typecontract', 'b')
				->where("(a.status=1 or a.status=2) and a.startdate>:now and b.id =:idtype" )
				->setParameters(array('now'=>$now,'idtype'=>$idtype));						
		}else{
			$qb->select('a')
				->from('BoAdminBundle:Contracts', 'a')
				->join('a.typecontract', 'b')
				->join('a.workfields', 'c')
				->where("(a.status=1 or a.status=2) and a.startdate>:now and b.id =:idtype and c.id =:idfield" )
				->setParameters(array('now'=>$now,'idfield'=>$idfield,'idtype'=>$idtype));					
		}
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getDataPeriodType($idtype,$idstatus,$startdate,$enddate){
		if($startdate==null and $enddate==null){
			$where = "b.id =:idtype";
			$aArray = array('idtype'=>$idtype);
		}else{
			$where = "b.id =:idtype and a.startdate >=:startdate and a.enddate <=:enddate";
			$aArray = array('idtype'=>$idtype,'startdate'=>$startdate,'enddate'=>$enddate);
		} 
		$aResult=array();	
		$qb = $this->_em->createQueryBuilder();
		if($idstatus==3){
			$qb->select('a')
				->from('BoAdminBundle:Contracts', 'a')
				->join('a.typecontract', 'b')
				->where($where)
				->setParameters($aArray);	
		}else{
			$where = $where." and a.status =:status";
			$aArray['status'] = $idstatus;
			$qb->select('a')
				->from('BoAdminBundle:Contracts', 'a')
				->join('a.typecontract', 'b')
				->where($where)
				->setParameters($aArray);			
		}
		$query = $qb->getQuery();
		return $query->getResult();			
	}
	public function getDataPeriodField($idfield,$idstatus,$startdate,$enddate){
		if($startdate==null and $enddate==null){
			$where = "b.id =:idfield";
			$aArray = array('idfield'=>$idfield);
		}else{
			$where = "b.id =:idfield and a.startdate >=:startdate and a.enddate <=:enddate";
			$aArray = array('idfield'=>$idfield,'startdate'=>$startdate,'enddate'=>$enddate);
		} 
		$aResult=array();	
		$qb = $this->_em->createQueryBuilder();
		if($idstatus==3){
			$qb->select('a')
				->from('BoAdminBundle:Contracts', 'a')
				->join('a.workfields', 'b')
				->where($where)
				->setParameters($aArray);			
		}else{
			$where = $where." and a.status =:status";
			$aArray['status'] = $idstatus;
			$qb->select('a')
				->from('BoAdminBundle:Contracts', 'a')
				->join('a.workfields', 'b')
				->where($where)
				->setParameters($aArray);			
		}
		$query = $qb->getQuery();
		return $query->getResult();			
	}
	public function getExtractData($idtype,$idstatus,$idfield,$startdate=null,$enddate=null){
		$aContract = $this->getDataPeriod($idtype,$idstatus,$idfield,$startdate,$enddate);
		return $this->formatData($aContract);
	}
	public function formatData($aContract){
		$aResult=array();
		foreach($aContract as $oContract){
			$aTeacher = $oContract->getEmployee();
			$oLocal = $oContract->getLocal();
			$aResult[]=array($this->getStudentBy($oContract),$oContract->getTypecontract()?$oContract->getTypecontract()->getReference():"",$oContract->getMethodofsupply()?$oContract->getMethodofsupply():"",$oContract->getClient()?$oContract->getClient()->getReference():"",$oContract->getDepartment(),$oContract->getReceivedate()?$oContract->getReceivedate()->format('Y-m-d'):"",$oContract->getOrdernumber(),$oContract->getContractnumber(),$oContract->getContractdate()?$oContract->getContractdate()->format('Y-m-d'):"",$oContract->getClicsignaturedate()?$oContract->getClicsignaturedate()->format('Y-m-d'):"",$oContract->getClientsignaturedate()?$oContract->getClientsignaturedate()->format('Y-m-d'):"",$oContract->getStartdate()?$oContract->getStartdate()->format('Y-m-d'):"",$oContract->getEnddate()?$oContract->getEnddate()->format('Y-m-d'):"",$oContract->getCoordinator()?$oContract->getCoordinator()->getEmail():"",$oContract->getBillingcontact()?$oContract->getBillingcontact()->getEmail():"",$oContract->getAdvisor()?$oContract->getAdvisor()->getFullname():"",$oContract->getLocation(),$oContract->getLanguage(),$oContract->getTypeoftraining(),$oContract->getTypetime(),$oContract->getHoursnumber(),$oContract->getSchedule(),$oContract->getPlanreceived(),$oContract->getLearningplan(),$oContract->getTargetlevel(),$oContract->getEstimatedcost(),$oContract->getInitialhours(),$oContract->getHourlyrate(),$oContract->getWorkfields()?$oContract->getWorkfields()->getWfname():"",$oContract->getSession(),$oContract->getProgram());		
		}
		return $aResult;				
	}
	private function getStudentBy($contract){
		$aStudent=$contract->getStudents();
		if(count($aStudent)==1 and $oStudent=$aStudent[0]) return $oStudent->getFirstname()." ".$oStudent->getName();
		$oGroup = $contract->getGroup();
		if($oGroup and $oGroup->getName()) return $oGroup->getName();
		return null;
	}
	private function getListByEntity($aEntity){
		if(!$aEntity) return "";
		$aResult=array();
		foreach($aEntity as $oEntity){
			$aResult[]= $oEntity->getFirstname()." ".$oEntity->getName();
		}
		return join(", ",$aResult);
	}
	public function findByLocal($texte){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.local', 'b')
			->where("b.reference like :motcle and a.status=:status" )
			->setParameters(array('status'=>1,'motcle'=>$texte));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getTodayContracts(){
		$today = new \DateTime(date("d-m-Y"));
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.local', 'b')
			->join('a.employee', 'c')
			->where("a.status=:status and a.startdate <=:today and a.enddate >=:today" )
			->setParameters(array('status'=>1,'today'=>$today));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $this->_em->getRepository('BoAdminBundle:Timesheet')->getContractsWithoutTs($aResult,new \DateTime(date("Y-m-d")));				
	}
	protected function getContractByGroup(Group $group){
		if($group==null) return $group;
		return $this->_em->getRepository('BoAdminBundle:Contracts')->getAllByGroup($group);
	}
}
