<?php

namespace Bo\AdminBundle\Repository;
use Bo\AdminBundle\Entity\Agenda;

/**
 * LocalRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LocalRepository extends \Doctrine\ORM\EntityRepository
{
	public function getTotal(){
		$query = $this->_em->createQuery('SELECT COUNT(a) From BoAdminBundle:Local a');
		return (int) $query->getSingleScalarResult();
	}
	public function search($sTexte){
		$oEmExp = $this->_em->getRepository('BoAdminBundle:Local');
		$aResult = $oEmExp->findBy(array('reference'=>$sTexte),array('id' => 'desc'));
		if(isset($aResult[0])) return $aResult;
		$aResult = $oEmExp->findBy(array('dimension'=>$sTexte),array('id' => 'desc'));
		if(isset($aResult[0])) return $aResult;
		$sSelect = "SELECT v FROM Bo\AdminBundle\Entity\Local v JOIN v.campus u WHERE v.reference like :motcle or v.designation like :motcle or v.dimension like :motcle or v.details like :motcle or u.designation like :motcle";
		$oQuery =  $this->_em->createQuery($sSelect);	
		$oQuery->setParameters(array(
			'motcle' => "%".$sTexte."%",
		));	
		$aResult = $oQuery->getResult();
		if(isset($aResult[0])) return $aResult;
		return $this->searchByTypecontract($sTexte);
	}
	public function getLocalList($campus){
		$sSelect = "SELECT v FROM Bo\AdminBundle\Entity\Local v  JOIN v.campus u WHERE u.designation like :campus";
		$oQuery =  $this->_em->createQuery($sSelect);	
		$oQuery->setParameters(array(
			'campus' => "%".$campus."%",
		));	
		$aResult = $oQuery->getResult();
		return $aResult;
	}
	public function getAvailable($oContract){
		$oCampus = $oContract->getCampus();
		if(!$oCampus) return false;
		$aLocal = $this->getLocalList($oCampus->getDesignation());
		$aResult = array();
		foreach($aLocal as $oLocal){
			if($this->existTraining($oContract) and $this->isOccupied($oLocal,$oContract)==true) continue;
			$aResult[] = array($oLocal->getId(), $oCampus->getDesignation()."- Local ".$oLocal->getReference()); 	
		}
		return $aResult;
	}
	//return true when the room is occupied else false
	public function isOccupied($oLocal,$oContract){
		$oSchedule1 = $this->getContractSchedule($oContract);
		if($oLocal->getAvailable()==0 or $oLocal->getAvailable()==false) return true;
		if($oLocal->getStatus()==0) return false;
		$aContract = $this->getContractInRoom($oLocal);
		if(count($aContract)==1){
			$oContractInLoc = $aContract[0];
			$oSchedule2 = $this->getContractSchedule($oContractInLoc);
			if($oSchedule1!=null and $oSchedule2!=null) return $this->isOverlap($oSchedule1,$oSchedule2);	
			return false;
		}else{
			$aGroup = $this->getGroupInRoom($oLocal);
			if(isset($aGroup[0])){
				$oGroup = $aGroup[0];
				$oSchedule2 = $this->getGroupSchedule($oGroup);
				if($oSchedule1!=null and $oSchedule2!=null) return $this->isOverlap($oSchedule1,$oSchedule2);	
				return false;
			}
		}
		return false;
	}
	private function getOccupation($aContract){
		$res='';
		foreach($aContract as $oContract){
			if($oContract->getGroup() and $oContract->getGroup()->getStartdate()){
				$startdate=$oContract->getGroup()->getStartdate()->format("Y-m-d");
			}else{
				$startdate=$oContract->getStartdate()->format("Y-m-d");
			} 
			if($oContract->getGroup() and $oContract->getGroup()->getEnddate()){
				$enddate=$oContract->getGroup()->getEnddate()->format("Y-m-d");
			}else{
				$enddate=$oContract->getEnddate()->format("Y-m-d");		
			} 	
			$sDate = $startdate."->".$enddate;
			if($oContract->getGroup() and $oContract->getGroup()->getName()){
				$sGroupname = $oContract->getGroup()->getName();
				$res=$res." -".$sGroupname."(".$sDate.")";
			}elseif(count($oContract->getStudents())==1){
				$aStudent = $oContract->getStudents();
				if(isset($aStudent[0])) $student = $aStudent[0]->getFirstname()." ".$aStudent[0]->getName();
				$res=$res." -".$student."(".$sDate.")";
			}
		}
		return $res;
	}	
	public function getContractBy($local){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.local', 'b')
			->where("b.id =:idlocal and a.status=:status" )
			->setParameters(array('status'=>1,'idlocal'=>$local->getId()));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getGroupBy($local){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Group', 'a')
			->join('a.local', 'b')
			->where("b.id =:idlocal and a.status=:status" )
			->setParameters(array('status'=>1,'idlocal'=>$local->getId()));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getContractInRoom($local){
		$now = new \DateTime();
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.local', 'b')
			->where("b.id =:idlocal and ((a.status=:status and a.startdate<=:now and a.enddate>=:now) or a.startdate>=:now)")
			->setParameters(array('status'=>1,'idlocal'=>$local->getId(),'now'=>$now));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getGroupInRoom($local){
		$now = new \DateTime();
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Group', 'a')
			->join('a.local', 'b')
			->where("b.id =:idlocal and ((a.status=:status and a.startdate<=:now and a.enddate>=:now) or a.startdate>=:now)")
			->setParameters(array('status'=>1,'idlocal'=>$local->getId(),'now'=>$now));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getAvailableByStatus(){
		$now = new \DateTime();
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Local', 'a')
			->where("(a.status=1 or a.status=2) and a.available=:available")
			->setParameters(array('available'=>1));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;		
	}
	public function getUpcomingBugContract(){
		$now = new \DateTime();
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Local', 'a')
			->join('a.contracts', 'b')
			->where("a.status=:status and b.startdate<=:now and b.enddate>=:now")
			->setParameters(array('status'=>2,'now'=>$now));
		$query = $qb->getQuery();
		return $query->getResult();	
	}
	public function getUpcomingBugGroup(){
		$now = new \DateTime();
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Local', 'a')
			->join('a.group', 'b')
			->where("a.status=:status and b.startdate<=:now and b.enddate>=:now")
			->setParameters(array('status'=>2,'now'=>$now));
		$query = $qb->getQuery();
		return $query->getResult();	
	}
	public function getUpcomingBug(){
		$aUBC = $this->getUpcomingBugContract();
		$aUBG = $this->getUpcomingBugGroup();
		$aResult = array();
		foreach($aUBC as $oUBC){
			$aResult[$oUBC->getId()] = $oUBC;
		}
		foreach($aUBG as $oUBG){
			if(isset($aResult[$oUBG->getId()])) continue;
			$aResult[$oUBG->getId()] = $oUBG;
		}
		return $aResult;
	}
	public function getNumberContractInRoom($local){
		return count($this->getContractInRoom($local));
	}
	public function getNumberGroupInRoom($local){
		return count($this->getGroupInRoom($local));
	}
	public function searchByTypecontract($sTexte){
		$sSelect = "SELECT v FROM Bo\AdminBundle\Entity\Local v  JOIN v.typecontract u WHERE u.reference like :typecontract";
		$oQuery =  $this->_em->createQuery($sSelect);	
		$oQuery->setParameters(array(
			'typecontract' => "%".$sTexte."%",
		));	
		$aResult = $oQuery->getResult();
		return $aResult;
	}
	public function getContracts($local){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.local', 'b')
			->where("b.id like :idlocal and a.status=:status" )
			->setParameters(array('status'=>1,'idlocal'=>$local->getId()));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getExtraData($idcampus,$idstatus){
		if($idstatus==0) return $this->getWithoutStatus($idcampus);
		else return $this->getWithStatus($idcampus,$idstatus);
		
	}
	public function getWithoutStatus($idcampus){
		if($idcampus>0) return $this->findByCampus($idcampus);
		if($idcampus==0 and $idtype>0) return $this->findByType($idtype);
		if($idcampus>0 and $idtype>0) return $this->findByTypeAndCampus($idtype,$idcampus);
	}
	public function getWithStatus($idcampus,$idstatus){
		$aLocals = $this->findByCampus($idcampus);
		if($idcampus>0){
			return $this->findWithContract($aLocals,$idstatus);
		}
		return $aLocals;		
	}
	public function findWithContract($aLocals,$idstatus){
		$aResult = array();
		foreach($aLocals as $oLocal){
			$aContracts = $oLocal->getContracts();
			$aGroup = $oLocal->getGroup();
			$now = new \DateTime();
			if($idstatus==2){
				if(count($oLocal->getContracts())>0 or count($oLocal->getGroup())>0) $aResult[]=$oLocal;
			}else{
				if(count($oLocal->getContracts())==0 and count($oLocal->getGroup())==0) $aResult[]=$oLocal;
			}				
		}
		return $aResult;
	}
	public function findByCampus($idcampus){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Local', 'a')
			->join('a.campus', 'b')	
			->where("b.id =:idcampus" )
			->setParameters(array('idcampus'=>$idcampus));	
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function findByType($idtype){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Local', 'a')
			->join('a.typecontract', 'b')
			->where("b.id =:idtype" )
			->setParameters(array('idtype'=>$idtype));	
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function findByTypeAndCampus($idtype,$idcampus){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Local', 'a')
			->join('a.typecontract', 'b')
			->join('a.campus', 'c')	
			->where("b.id =:idtype and c.id =:idcampus" )
			->setParameters(array('idtype'=>$idtype,'idcampus'=>$idcampus));	
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getByContract($oContract){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Local', 'a')
			->join('a.contracts', 'b')
			->where("b.id =:idcontract" )
			->setParameters(array('idcontract'=>$oContract->getId()));	
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getByGroup($oGroup){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Local', 'a')
			->join('a.group', 'b')
			->where("b.id =:idgroup" )
			->setParameters(array('idgroup'=>$oGroup->getId()));	
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	private function getContractSchedule($oContract){
		$oSchedule = new Agenda();
		$aTraining = $this->getContractTraining($oContract);
		$oSchedule->setStartdate($oContract->getStartdate());
		$oSchedule->setEnddate($oContract->getEnddate());
		if(count($aTraining)==1){
			return $this->setTrainingIn($oSchedule,$aTraining);
		} 
		return null;
	}
	private function getGroupSchedule($oGroup){
		$oSchedule = new Agenda();
		$aTraining = $this->getTrainingByGroup($oGroup);
		$oSchedule->setStartdate($oGroup->getStartdate());
		$oSchedule->setEnddate($oGroup->getEnddate());			
		if(count($aTraining)==1){
			return $this->setTrainingIn($oSchedule,$aTraining);
		} 
		return null;
	}
	private function setTrainingIn($oSchedule,$aTraining){
		$oTraining = $aTraining[0];
		$oSchedule->setStartam($oTraining->getStartam());
		$oSchedule->setEndam($oTraining->getEndam());
		$oSchedule->setStartpm($oTraining->getStartpm());
		$oSchedule->setEndpm($oTraining->getEndpm());
		$oSchedule->setMonday($oTraining->getMonday());
		$oSchedule->setTuesday($oTraining->getTuesday());
		$oSchedule->setWednesday($oTraining->getWednesday());
		$oSchedule->setThursday($oTraining->getThursday());
		$oSchedule->setFriday($oTraining->getFriday());
		return $oSchedule;
	}
	private function existTraining($oContract){
		$aTraining = $this->getContractTraining($oContract);
		if(isset($aTraining[0])) return true;
		else return false;
	}
	//Check if there are overlap on the two schedule
	//return true if there is overlap on the schedule else false
	private function isOverlap($oSchedule1,$oSchedule2){
		if($this->overlapDate($oSchedule1,$oSchedule2)==false) return false;
		if($this->overlapTime($oSchedule1,$oSchedule2)==false)	return false;
		if($this->overlapDay($oSchedule1,$oSchedule2)==false) return false;
		return true;			 
	}
	//return true if there is overlap and false else
	private function overlapDate($oSchedule1,$oSchedule2){
		if($oSchedule1->getEnddate()<$oSchedule2->getStartdate() or $oSchedule2->getEnddate()<$oSchedule1->getStartdate()) return false;
		return true;
	}
	//Si le endam du schedule 1 finit avant le startam du schedule 2 ou bien le startam du schedule 1 commence apres le endam du  schedule 2 (endam2<startam ) alors il n'y a pas de chevauchelent en AM, dans tous les autre cas il y a de chevauchement 
	private function overlapAm($oSchedule1,$oSchedule2){
		$startam1 = $oSchedule1->getStartam()!=null?$oSchedule1->getStartam():$this->getTime();
		$startam2 = $oSchedule2->getStartam()!=null?$oSchedule2->getStartam():$this->getTime();
		$Endam1 = $oSchedule1->getEndam()!=null?$oSchedule1->getEndam():$this->getTime();
		$Endam2 = $oSchedule2->getEndam()!=null?$oSchedule2->getEndam():$this->getTime();
		if($this->getRealHour($Endam1->format("H:i"))==0 and $this->getRealHour($startam2->format("H:i"))==0 and  $this->getRealHour($Endam2->format("H:i"))==0 and $this->getRealHour($startam1->format("H:i"))==0) return false;	
		if($this->getRealHour($Endam1->format("H:i"))<$this->getRealHour($startam2->format("H:i")) or $this->getRealHour($Endam2->format("H:i"))<$this->getRealHour($startam1->format("H:i"))) return false;	
		else return true;	
	}

	//Si le endpm du schedule 1 finit avant le startpm du schedule 2 ou bien le startpm du schedule 1 commence apres le endpm du  schedule 2 (endpm2<startpm ) alors il n'y a pas de chevauchelent en PM, dans tous les autre cas il y a de chevauchement 
	private function overlapPm($oSchedule1,$oSchedule2){
		$startpm1 = $oSchedule1->getStartpm()!=null?$oSchedule1->getStartpm():$this->getTime();
		$startpm2 = $oSchedule2->getStartpm()!=null?$oSchedule2->getStartpm():$this->getTime();
		$Endpm1 = $oSchedule1->getEndpm()!=null?$oSchedule1->getEndpm():$this->getTime();
		$Endpm2 = $oSchedule2->getEndpm()!=null?$oSchedule2->getEndpm():$this->getTime();
		if($this->getRealHour($Endpm1->format("H:i"))==0 and $this->getRealHour($startpm2->format("H:i"))==0 and  $this->getRealHour($Endpm2->format("H:i"))==0 and $this->getRealHour($startpm1->format("H:i"))==0) return false;
		if($this->getRealHour($Endpm1->format("H:i"))<$this->getRealHour($startpm2->format("H:i")) or $this->getRealHour($Endpm2->format("H:i"))<$this->getRealHour($startpm1->format("H:i"))) return false;	
		else return true;	
	}
	//return true if there is overlap and false else
	private function overlapTime($oSchedule1,$oSchedule2){
		if($this->overlapAm($oSchedule1,$oSchedule2)==false and $this->overlapPm($oSchedule1,$oSchedule2)==false) return false;
		return true;
	}
	//return true if there is overlap and false else
	private function overlapDay($oSchedule1,$oSchedule2){
		if(((intval($oSchedule1->getMonday())==0 and intval($oSchedule2->getMonday())==0) or $oSchedule1->getMonday()!=$oSchedule2->getMonday()) and ((intval($oSchedule1->getTuesday())==0 and intval($oSchedule2->getTuesday())==0) or $oSchedule1->getTuesday()!=$oSchedule2->getTuesday()) and ((intval($oSchedule1->getWednesday())==0 and intval($oSchedule2->getWednesday())==0) or $oSchedule1->getWednesday()!=$oSchedule2->getWednesday()) and ((intval($oSchedule1->getThursday())==0 and intval($oSchedule2->getThursday())==0) or $oSchedule1->getThursday()!=$oSchedule2->getThursday()) and ((intval($oSchedule1->getFriday())==0 and intval($oSchedule2->getFriday())==0) or $oSchedule1->getFriday()!=$oSchedule2->getFriday())) return false;
		return true;
	}
	protected function getContractTraining($oContract){
		$training=null;
		//Get contract training
		$training = $this->_em->getRepository('BoAdminBundle:Training')->findBy(array('contracts'=>$oContract));		
		if(!isset($training[0]) and $oContract->getWorkfields() and ($oContract->getWorkfields()->getId()==1 or $oContract->getWorkfields()->getId()==2)){
			$oGroup = $oContract->getGroup();
			//Get group training 
			if($oGroup) $training = $this->_em->getRepository('BoAdminBundle:Training')->findByIdgroup($oGroup->getId());
		}
		return $training;
	}
	protected function getTrainingByGroup($oGroup){
		$training = $this->_em->getRepository('BoAdminBundle:Training')->findBy(array('idgroup'=>$oGroup->getId()));
		if(count($training)==0){
			$aContract = $this->getContractByGroup($oGroup);
			foreach($aContract as $oContract){
				$training = $this->_em->getRepository('BoAdminBundle:Training')->findBy(array('contracts'=>$oContract));
				if(isset($training[0]) and $oTraining=$training[0]){
					$oTraining->setIdgroup($oGroup->getId());
					$this->_em->persist($oTraining);
					$this->_em->flush();
					return $this->getContractTraining($oContract);
				}
			}

		} 		
		return $training;
	}
	protected function isGroupContract($oContract){
		if($oContract->getWorkfields() and ($oContract->getWorkfields()->getId()==1 or $oContract->getWorkfields()->getId()==2)){
			return true;
		}
		return false;
	}
	protected function getRealHour($hour){
		$aHour = explode(':',$hour);
		if(count($aHour)==1){
			$hour = $aHour[0];
			if(strpos($hour,",")) $hour = str_replace(",",".",$hour);
			return floatval($hour);
		} 
		elseif(count($aHour)==2){
			if(intval($aHour[1])==0) return floatval($aHour[0]);
			$dec=(intval($aHour[1]))/60;
			return  floatval($aHour[0])+$dec;
		}
		return null;
	}
	protected function getTime($h=null,$i=null){
		if($h==null and $i==null)
			return new \DateTime(date("Y-m-d",mktime(0, 0, 0, 0, 0, 0)));
		else
			return new \DateTime(date("Y-m-d H:i",mktime($h, $i, 0, 0, 0, 0)));
	}
	//return array of all contract in a group
	//parameter entity Group
	protected function getContractByGroup($group){
		if($group==null) return $group;
		return $this->_em->getRepository('BoAdminBundle:Contracts')->getAllByGroup($group);
	}
}
