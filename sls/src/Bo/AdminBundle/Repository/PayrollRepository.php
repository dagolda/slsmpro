<?php
namespace Bo\AdminBundle\Repository;
use Bo\AdminBundle\Entity\Pay;
/**
 * PayrollRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PayrollRepository extends \Doctrine\ORM\EntityRepository
{
	public function findExistPayroll($oTS){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Payroll', 'a')
			->join('a.employee', 'b')
			->join('a.tsweek', 'c')
			->where("b.id =:idemployee and c.id =:idtsweek and a.typets=:typets" )
			->setParameters(array('idemployee'=> $oTS->getEmployee()->getId(),'idtsweek'=> $oTS->getTsweek()->getId(),'typets'=> $oTS->getTypets()));
		$query = $qb->getQuery();
		return $query->getResult();			
	}
	public function getPayrollByEmployee($idemployee,$idperiodpay,$type){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a.typets,a.hour,c.id')
		//$qb->select('a')
			->from('BoAdminBundle:Payroll', 'a')
			->join('a.employee', 'b')
			->join('a.tsweek', 'c')
			->where("b.id =:idemployee and a.idperiodpay=:idperiodpay and a.typets=:typets" )
			->setParameters(array('idemployee'=>$idemployee,'idperiodpay'=> $idperiodpay,'typets'=>$type));
		$query = $qb->getQuery();
		return $query->getResult();			
	}
	public function existPayrollWeek($sWeek){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Payroll', 'a')
			->join('a.tsweek', 'b')
			->where("b.id =:idtsweek" )
			->setParameters(array('idtsweek'=>$sWeek));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		if(isset($aResult[0])) return true;
		return false;
	}
	private function getDistinctEmployee($idperiodpay){
		$sSelect = "SELECT distinct u.id FROM Bo\AdminBundle\Entity\Payroll v JOIN v.employee u WHERE v.idperiodpay=:idperiodpay";
		$oQuery =  $this->_em->createQuery($sSelect);	
		$oQuery->setParameters(array('idperiodpay'=>$idperiodpay));
		$aResult = $oQuery->getResult();
		return $aResult;
	}
	private function getDistinctType($idperiodpay){
		$sSelect = "SELECT distinct v.typets FROM Bo\AdminBundle\Entity\Payroll v WHERE v.idperiodpay=:idperiodpay";
		$oQuery =  $this->_em->createQuery($sSelect);	
		$oQuery->setParameters(array('idperiodpay'=>$idperiodpay));
		$aResult = $oQuery->getResult();
		return $aResult;
	}
	public function createPayRoll($idperiodpay){
		$idemployees = $this->getDistinctEmployee($idperiodpay);
		foreach($idemployees as $aTab){
			$idemployee=$aTab['id'];
			$oEmployee = $this->getObjectEmployee($idemployee);
			$aType = $this->getDistinctType($idperiodpay);
			foreach($aType as $aTt){
				$aPayroll = $this->_em->getRepository('BoAdminBundle:Payroll')->findBy(array('idperiodpay'=>$idperiodpay,'typets'=>$aTt['typets'],'employee'=>$idemployee));
				//$aPayroll = $this->getPayrollByEmployee($idemployee,$idperiodpay,$aTt['typets']);
				if(isset($aPayroll[0])){
					$aHour = $this->getArrayHour($aPayroll);
					print_r($aHour);
					echo "<br>";
					$this->createPay($idperiodpay,$aHour,$oEmployee);					
				}				
			}
		}
exit(0);		
	}
	private function getArrayHour($aPayroll){
		$aResult=array();
		$sum=0;
		foreach($aPayroll as $oPayroll){
			$idtsweek = $oPayroll->getTsweek()->getId();
			$hour = $oPayroll->getHour();
			$aResult[$idtsweek]=$hour;
			//$aResult[$oPayroll->getTsweek()->getId()]=$oPayroll->getHour();
			$sum=$sum+$hour;				
		}
		$aResult['total']=$sum;
		return $aResult;
	}
	public function updateAll($aWeek,$idperiodpay,$status=null){
		$res="";
		if($status==null) $status=2;
		foreach($aWeek as $idtsweek=>$numberweek){
			$p = $this->updateEntities($idtsweek,$idperiodpay,$status);
			$res=$res+(int)$p;
		}
		return $res;
	}
	public function updateEntities($idtsweek,$idperiodpay,$status){
		$oTsweek = $this->_em->getRepository('BoAdminBundle:Tsweek')->find($idtsweek);
		$q = $this->_em->createQueryBuilder()
			->update('BoAdminBundle:Payroll', 'u')
			->set('u.idperiodpay', $idperiodpay)
			->set('u.status', $status)
			->where('u.tsweek =:tsweek and u.status =:status')
			->setParameters(array('tsweek'=>$oTsweek,'status'=>1))
			->getQuery();
		return $q->execute();		
	}
	public function updatePayroll($idperiodpay,$status){
		$oTsweek = $this->_em->getRepository('BoAdminBundle:Tsweek')->find($idtsweek);
		$q = $this->_em->createQueryBuilder()
			->update('BoAdminBundle:Payroll', 'u')
			->set('u.idperiodpay', $idperiodpay)
			->set('u.status', 2)
			->where('u.tsweek =:tsweek and u.status =:status')
			->setParameters(array('tsweek'=>$oTsweek,'status'=>1))
			->getQuery();
		return $q->execute();		
	}
	public function getPayList($idperiodpay){
		$aPayroll = $this->_em->getRepository('BoAdminBundle:Payroll')->findByIdperiodpay($idperiodpay);
		$aResult = array();
		foreach($aPayroll as $oPayroll){
			if(!isset($aResult[$oPayroll->getEmployee()->getId()])){
				$aResult[$oPayroll->getEmployee()->getId()]=$this->getArrayHour($oPayroll->getEmployee(),$aPayroll);
			}	
			else continue;
		}
		return $aResult;
	}
	/*
	public function createPayRow($idperiodpay){
		$aPaylist = $this->getPayList($idperiodpay);		
		$aPweek = $this->getPweek($idperiodpay);
		foreach($aPaylist as $aTab){
			$pay = new Pay();
			if(isset($aTab['employee'])) $pay->setEmployee($aTab['employee']);
			$pay->setIdperiodpay($idperiodpay);
			foreach($aPweek as $keys=>$val){
				if($keys==0 and isset($aTab[$val])) $pay->setHw0($aTab[$val]);
				if($keys==1 and isset($aTab[$val])) $pay->setHw1($aTab[$val]);
				if($keys==2 and isset($aTab[$val])) $pay->setHw2($aTab[$val]);
				if($keys==3 and isset($aTab[$val])) $pay->setHw3($aTab[$val]);
				if($keys==4 and isset($aTab[$val])) $pay->setHw4($aTab[$val]);
				if($keys==5 and isset($aTab[$val])) $pay->setHw5($aTab[$val]);				
			}
			if(isset($aTab['total'])) $pay->setTotal($aTab['total']);
			$this->_em->persist($pay);
			$this->_em->flush();
		}
		return;
	}*/
	public function createPay($idperiodpay,$aTab,$oEmployee){
		$aPaylist = $this->getPayList($idperiodpay);		
		$aPweek = $this->getPweek($idperiodpay);
		foreach($aPweek as $keys=>$val){
			if($keys==0 and isset($aTab[$val])) $pay->setHw0($aTab[$val]);
			if($keys==1 and isset($aTab[$val])) $pay->setHw1($aTab[$val]);
			if($keys==2 and isset($aTab[$val])) $pay->setHw2($aTab[$val]);
			if($keys==3 and isset($aTab[$val])) $pay->setHw3($aTab[$val]);
			if($keys==4 and isset($aTab[$val])) $pay->setHw4($aTab[$val]);
			if($keys==5 and isset($aTab[$val])) $pay->setHw5($aTab[$val]);				
		}
		$pay->setIdperiodpay($idperiodpay);
		$pay->setEmployee($oEmployee);
		$this->_em->persist($pay);
		$this->_em->flush();
		return;
	}
	private function getObjectEmployee($idemployee){
		return $this->_em->getRepository('BoAdminBundle:Employee')->find($idemployee);
	}
	private function getPweek($idperiodpay){
		$oPeriodpay = $this->_em->getRepository('BoAdminBundle:Periodpay')->find($idperiodpay);
		$pweek = $oPeriodpay->getPweek();
		return explode(',',$pweek);
	}
}
