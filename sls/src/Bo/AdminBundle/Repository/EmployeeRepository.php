<?php

namespace Bo\AdminBundle\Repository;

/**
 * EmployeeRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmployeeRepository extends \Doctrine\ORM\EntityRepository
{
	public function getTotal(){
		$query = $this->_em->createQuery('SELECT COUNT(a) From BoAdminBundle:Employee a WHERE a.active=true');
		return (int) $query->getSingleScalarResult();
	}
	private function findByFirstAndLastName($sTexte){
		$aTexte = explode(' ',$sTexte);
		//if user enters the firstname and name as criteria of search
		if(count($aTexte)>=2){
			$aResult = $this->searchByFN($aTexte[0],$aTexte[1]);
			if(count($aResult)>0) return $aResult;
			$aResult = $this->searchByFN($aTexte[1],$aTexte[0]);
			if(count($aResult)>0) return $aResult;
		}
		return array();
	}
	private function searchByStatus($sTexte){
		//If user search the employee who are the administrative profile : he can use the keywords adm, admin, Admin or administrative
		if(trim($sTexte)=="adm" or trim($sTexte)=="admin" or trim($sTexte)=="Admin" or trim($sTexte)=="administrative"){
			return $this->getByStatus("Administrative");
		}
		if(trim($sTexte)=="tea" or trim($sTexte)=="teacher" or trim($sTexte)=="Teacher"){
			return $this->getByStatus("Teacher");
		}
		if(trim($sTexte)=="APD"){
			return $this->getByStatus("Assistant Pedagogical Director");
		}
		if(trim($sTexte)=="PA"){
			return $this->getByStatus("Pedagogical Advisor");
		}
		return array();
	}
	public function search($sTexte){
		$oEmExp = $this->_em->getRepository('BoAdminBundle:Employee');
		$oResult = $oEmExp->find(trim($sTexte)); 
		if($oResult) return array($oResult);
		if($aResult=$this->findByFirstAndLastName($sTexte) and isset($aResult[0])){
			return $aResult;
		} 
		if($aResult=$this->searchByStatus($sTexte) and isset($aResult[0])){
			return $aResult;
		}
		$aResult = $this->searchByFirstOrLast($sTexte); 
		if(isset($aResult[0])) return $aResult;
		$aResult = $this->getByTypecontract(trim($sTexte));
		if(isset($aResult[0])) return $aResult;
		$aTexte = explode(" ",$sTexte);
		$aResult = $oEmExp->findBy(array('name'=>$sTexte,"remove"=>false),array('firstname' => 'asc'));		
		if(isset($aResult[0])) return $aResult;
		$aResult = $oEmExp->findBy(array('firstname'=>trim($sTexte),"remove"=>false),array('firstname' => 'asc'));
		if(isset($aResult[0])) return $aResult;
		$aResult = $oEmExp->findBy(array('email'=>$sTexte,"remove"=>false),array('id' => 'desc'));
		if(isset($aResult[0])) return $aResult;
		$sSelect = "SELECT v FROM Bo\AdminBundle\Entity\Employee v  JOIN v.status u WHERE (v.name like :motcle or v.email like :motcle or v.firstname like :motcle or v.homenumber like :motcle  or v.cellnumber like :motcle or v.address1 like :motcle or u.statusname like :motcle) and v.remove=:remove";
		$oQuery =  $this->_em->createQuery($sSelect);	
		$oQuery->setParameters(array(
			'motcle' => "%".$sTexte."%",
			'remove' => false,
		));	
		$aResult = $oQuery->getResult();
		return $aResult;
	}
	public function searchByFN($name,$firstname){
		$sSelect = "SELECT v FROM Bo\AdminBundle\Entity\Employee v  WHERE v.name like :name and v.firstname like :firstname and v.remove=:remove";
		$oQuery =  $this->_em->createQuery($sSelect);	
		$oQuery->setParameters(array(
			'name' => "%".$name."%",
			'firstname' => "%".$firstname."%",
			'remove' => false,
		));	
		$aResult = $oQuery->getResult();
		return $aResult;
	}
	public function searchByFirstOrLast($texte){
		$sSelect = "SELECT v FROM Bo\AdminBundle\Entity\Employee v  WHERE v.name like :texte or v.firstname like :texte and v.remove=:remove";
		$oQuery =  $this->_em->createQuery($sSelect);	
		$oQuery->setParameters(array(
			'texte' => "%".$texte."%",
			'remove' => false,
		));	
		$aResult = $oQuery->getResult();
		return $aResult;
	}
	public function getAllPA(){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Employee', 'a')
			->join('a.status', 'b')
			->where("b.id =:number and a.remove=:remove" )
			->setParameters(array('number'=>3,'remove'=>false))
				;
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		if(isset($aResult[0])){
			$aPA = array();
			foreach($aResult as $oPA){
				$aPA[$oPA->getId()] = $oPA->getName()." ".$oPA->getFirstname();		
			}
			return $aPA;
		}
		return null;
	}
	public function getByStatus($status){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Employee', 'a')
			->join('a.status', 'b')
			->where("b.statusname like :statusname and a.active=:active and a.remove=:remove" )
			->setParameters(array('statusname'=>"%".$status."%",'active'=>true,'remove'=>false));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getByIdStatus($idstatus){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Employee', 'a')
			->join('a.status', 'b')
			->where("b.id =:idstatus and a.active=:active and a.remove=:remove" )
			->setParameters(array('idstatus'=>$idstatus,'active'=>true,'remove'=>false));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getActive(){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Employee', 'a')
			->where("a.active=:active and a.remove=:remove and a.available=:available" )
			->setParameters(array('active'=>true,'available'=>true,'remove'=>false));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function findActive($nb_cpp=null,$offset=null){
		$oRepEmp = $this->_em->getRepository("BoAdminBundle:Employee");
		if($nb_cpp==null and $offset==null){
			$aEmployee = $oRepEmp->findBy(array('active'=>true,'available'=>true,'remove'=>false),array('firstname' => 'asc'),$nb_cpp,$offset);
		}else{
			$aEmployee = $oRepEmp->findBy(array('active'=>true,'available'=>true,'remove'=>false),array('firstname' => 'asc'));
		}
		$aResult = array();
		foreach($aEmployee as $oEmployee){
			$aSchedule = $this->getAgendaByEmployee($oEmployee);	
			if(count($aSchedule)>0){
				$aResult[] = $oEmployee;
			}
		}
		return $aResult;
	}
	//Check if a contract is closed or archived
	//With the id contract as a parameter 
	protected function isArchived($oContract){
		if($oContract and $oContract->getStatus()==0) return true;
		return false;
	}
	protected function getAgendaByEmployee($oEmployee){
		$aResult = array();
		$aSchedule = $this->_em->getRepository("BoAdminBundle:Agenda")->getByEmployee($oEmployee);	
		$today = new \DateTime(date("d-m-Y"));
		foreach($aSchedule as $oSchedule){
			if($this->isArchived($oSchedule->getContracts())==true) continue;
			if($oSchedule->getContracts()==null and $oSchedule->getGroup()==null) continue;
			if(($oSchedule->getStartdate()<=$today and $today<=$oSchedule->getEnddate()) or $oSchedule->getStartdate()>$today)
			$aResult[] = $oSchedule;
		}
		return $aResult;		
	}
	public function getByTypecontract($reference){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Employee', 'a')
			->join('a.typecontract', 'b')
			->where("a.remove=:remove and b.reference =:reference" )
			->setParameters(array('reference'=>$reference,'remove'=>false));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function searchByName($name,$firstname){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Employee', 'a')
			->where("a.remove=:remove and a.name like :name and a.firstname like :firstname" )
			->setParameters(array(
				'name'=>"%".trim($name)."%",
				'firstname'=>"%".trim($firstname)."%",
				'remove'=>false,
			));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
	}
	public function searchByNameandFirst($name,$firstname){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Employee', 'a')
			->where("a.remove=:remove and a.name like :name" )
			->andwhere("a.firstname like :firstname" )
			->setParameters(array(
				'name'=>"%".trim($name)."%",
				'firstname'=>"%".trim($firstname)."%",
				'remove'=>false,
			));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
	}	
	public function getQualifiedEmployee($oTypecontract){
		$sSelect = "SELECT v FROM Bo\AdminBundle\Entity\Employee v  JOIN v.typecontract u WHERE u.reference like :typecontract and v.reference=:remove";
		$oQuery =  $this->_em->createQuery($sSelect);	
		$oQuery->setParameters(array(
			'typecontract' => "%".$oTypecontract->getReference()."%",
			'remove'=>false,
		));	
		$aResult = $oQuery->getResult();
		return $aResult;
	}
	public function getAvailable($oTypecontract){
		if(!$oTypecontract) return false;
		$aEmployee = $this->getQualifiedEmployee($oTypecontract);
		$aResult = array();
		foreach($aEmployee as $oEmployee){
			$aResult[] = array($oEmployee->getId(),$oEmployee->getFirstname()." ".$oEmployee->getname()." (".$this->formatCollection($oEmployee->getTypecontract()).")"); 		
		}
		return $aResult;
	}
	private function formatCollection($aCollection){
		if(!$aCollection) return null;
		$array=array();
		foreach($aCollection as $oCollection){
			$array[]=$oCollection->getReference();
		}
		return join("-",$array);
	}
	public function getStatusEmployee(){
		return $this->_em->getRepository('BoAdminBundle:Status')->getAll();		
	}
	public function getDataPeriod($idtype,$idlanguage,$idsexe,$idstatus,$idavailability,$option){
		$aResult = $this->getDataPeriodAll($idtype,$idlanguage,$idsexe,$idstatus,$idavailability);
		if($option==0) return $aResult;
		else return $this->getDataWithOption($aResult,$option);
	}
	public function getDataWithOption($aResult,$option){
		$aEmployee = array();
		foreach($aResult as $oEmployee){
			if($option==1 and $this->hasContract($oEmployee)==true){
				$aEmployee[]=$oEmployee;
			}elseif($option==2 and $this->hasContract($oEmployee)==false){
				$aEmployee[]=$oEmployee;
			}				
		}
		return $aEmployee;
	}
	private function getAgendaContOrGroup($aAgenda){
		$aCount=array();
		foreach($aAgenda as $oAgenda){
			if($oAgenda->getStatus()==1 or $oAgenda->getStatus()==2){
				$contract = $oAgenda->getContracts(); 
				$group = $oAgenda->getGroup(); 
				if(($oAgenda->getGroup() and ($oAgenda->getGroup()->getStatus()==1 or $oAgenda->getGroup()->getStatus()==2)) or ($oAgenda->getContracts() and ($oAgenda->getContracts()->getStatus()==1 or $oAgenda->getContracts()->getStatus()==2))) $aCount[]=$oAgenda->getId();
			}
		}
		return $aCount;
	}
	public function getDataPeriodAll($idtype,$idlanguage,$idsexe,$idstatus,$idavailability){
		if($idtype==0 and $idlanguage==0 and $idsexe==0 and $idstatus!=0 and $idavailability!=0){
			$aResult = $this->getByIdStatus($idstatus);
			if(count($aResult)>0) return $aResult;
		}
		$aResult=array();	
		$aQuery = $this->buildQuery($idtype,$idlanguage,$idsexe,$idstatus,$idavailability);
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:employee', 'a')
			->join('a.typecontract', 'b')
			->join('a.status', 'c')
			->join('a.langage', 'd')	
			->where($aQuery['clause'])
			->setParameters($aQuery['setting']);	
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		if(count($aResult)>0) return $aResult;
		elseif($idstatus>0 and $idtype==0 and $idlanguage==0) return $this->findByStatus($idstatus,$idavailability,$idsexe);
	}
	public function getDataByStatus($idstatus,$idavailability){
		$aResult=array();	
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:employee', 'a')
			->join('a.status', 'c')
			->where("c.id =:idstatus and a.available =:idavailability" )
			->setParameters(array(
 				'idstatus' => $idstatus,
				'idavailability' => $idavailability,
			));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
	}
	public function getByAgendaStatus(){
		$aResult=array();	
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:employee', 'a')
			->join('a.agenda', 'b')
			->where("a.remove=:remove and a.active=:active and (b.status=:statusone) and (b.contracts IS NOT NULL or b.group IS NOT NULL)" )
			->setParameters(array(
				'statusone'=>1,
				'remove'=>false,
				'active'=>true,
			));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function hasContract($oEmployee){
		$aContract = $aGroup = array();
		$aAgenda = $this->_em->getRepository('BoAdminBundle:Agenda')->getActiveByEmployee($oEmployee);	
		if(count($aAgenda)==0) return false;
		//echo "count:".count($aAgenda)."<br>";
		foreach($aAgenda as $oAgenda){
			if($oAgenda->getStatus()==1 or $oAgenda->getStatus()==2){
				if($oAgenda->getGroup() and $oGroup=$oAgenda->getGroup() and ($oGroup->getStatus()==1 or $oGroup->getStatus()==2) and !isset($aGroup[$oGroup->getId()])){ 
					//echo "Group id:".$oGroup->getId()."<br>";
					$aGroup[$oGroup->getId()] = $oGroup->getId();
				}elseif($oAgenda->getContracts() and $oContract=$oAgenda->getContracts() and ($oContract->getStatus()==1 or $oContract->getStatus()==2) and !isset($aContract[$oContract->getId()])){ 
					//echo "contrat id:".$oContract->getId()."<br>";
					$aContract[$oContract->getId()] = $oContract->getId();
				}
			}			
		} 
		if(count($aContract)>0 or count($aGroup)>0){
			return true;
		}
		return false;	
	}
	public function getAdminTeam(){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Employee', 'a')
			->join('a.status', 'b')
			->where("(b.id =:idstatus1 or b.id=:idstatus2 or b.id =:idstatus3 or b.id =:idstatus4 or b.id =:idstatus5) and a.active=:active and a.remove=:remove" )
			->setParameters(array('idstatus1'=>2,'idstatus2'=>3,'idstatus3'=>5,'idstatus4'=>6,'idstatus5'=>7,'active'=>true,'remove'=>false));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}

	public function findByStatus($status,$idavailability,$idsexe){
		$aResult=array();	
		$aAvail = $this->getAvailability($idavailability);
		if(isset($aAvail['available']) and isset($aAvail['active'])){
			$sWhere = "c.id =:idstatus and a.available =:available and a.active =:active";
			$array = array( 'idstatus' => $status ,'available' => $aAvail['available'], 'active' => $aAvail['active']);				
		}elseif(isset($aAvail['available'])){
			$sWhere = "c.id =:idstatus and a.available =:available";
			$array = array( 'idstatus' => $status ,'available' => $aAvail['available']);			
		}else{
			$sWhere = "c.id =:idstatus and a.active =:active";
			$array = array( 'idstatus' => $status ,'active' => $aAvail['active']);			
		}
		if($idsexe>0){
			$sexe=$idsexe==1?"Male":"Female";
			$sWhere = $sWhere." and a.sexe =:sexe";
			$array['sexe']=$sexe;
		}
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:employee', 'a')
			->join('a.status', 'c')
			->where($sWhere)
			->setParameters($array);	
		$query = $qb->getQuery();
		return $query->getResult();				
	}
	private function buildQuery($idtype,$idlanguage,$idsexe,$idstatus,$idavailability){
		$sexe=$idsexe==1?"Male":"Female";
		$exp = null;
		$aParam = array();
		if($idtype>0){
			$exp="b.id =:idtype";
			$aParam['idtype']=$idtype;
		} 
		if($idlanguage>0){
			if($exp==null) $exp="d.id =:idlanguage";
			else $exp=$exp." and d.id =:idlanguage";
			$aParam['idlanguage']=$idlanguage;
		}
		if($idstatus>0){
			if($exp==null) $exp="c.id=:idstatus";
			else $exp=$exp." and c.id=:idstatus";
			$aParam['idstatus']=$idstatus;
		}
		if($idsexe>0){
			if($exp==null) $exp="a.sexe =:sexe";
			else $exp=$exp." and a.sexe =:sexe";
			$aParam['sexe']=$sexe;
		}
		$aAvail = $this->getAvailability($idavailability);		
		if(isset($aAvail['available'])){
			if($exp==null) $exp="a.available =:available";
			else $exp=$exp." and a.available =:available";
			$aParam['available']=$aAvail['available'];
		}
		if(isset($aAvail['active'])){
			if($exp==null) $exp="a.active =:active";
			else $exp=$exp." and a.active =:active";
			$aParam['active']=$aAvail['active'];
		}
		return array('clause'=>$exp,'setting'=>$aParam);
	}
	public function getExtractData($idtype,$startdate,$enddate,$idstatus,$idavailability,$option){
		$aEData = $this->getDataPeriod($idtype,$startdate,$enddate,$idstatus,$idavailability,$option);
		$aResult=array();
		foreach($aEData as $oEData){
			$aResult[]=array($oEData->getSexe(),$oEData->getName(),$oEData->getFirstname(),$oEData->getEmail(),$oEData->getHomenumber(),$oEData->getCellnumber(),$oEData->getAddress1(),$oEData->getAddress2(),$oEData->getBirthdate()?$oEData->getBirthdate()->format('Y-m-d'):"",$oEData->getStatus()->getStatusname(),$oEData->getHiringdate()?$oEData->getHiringdate()->format('Y-m-d'):"",$oEData->getLangage()->getName());		
		}
		return $aResult;
	}
	private function getAvailability($idavailability){
		if($idavailability==1) return array('available'=>true,'active'=>true);
		if($idavailability==2) return array('available'=>false,'active'=>true);
		if($idavailability==3) return array('active'=>true);
		if($idavailability==4) return array('active'=>false);
		if($idavailability==5) return array('available'=>true,'active'=>true);
	}
	public function getNumberContract(){
		$aResult = array();
		$aEmployee = $this->getActiveEmployee();
		foreach($aEmployee as $oEmployee){
			$aContract = $this->_em->getRepository('BoAdminBundle:Contracts')->getActiveByEmployee($oEmployee);
			if(isset($aContract[0])) $aResult[$oEmployee->getId()] = count($aContract);
		}
		return $aResult;
	}
	public function getEmployeeHours(){
		$aResult = array();
		$aEmployee = $this->getActiveEmployee();
		foreach($aEmployee as $oEmployee){
			$aContract = $this->_em->getRepository('BoAdminBundle:Contracts')->getActiveByEmployee($oEmployee);
			$aResult[$oEmployee->getId()] = $this->getNumberHours($oEmployee,$aContract);
		}
		return $aResult;
	}
	private function getNumberHours($oEmployee,$aContract){
		$hour = 0;
		foreach($aContract as $oContract){
			$now = new \DateTime();
			if($oContract->getStartdate()<$now){
				$aTSchedule = $this->_em->getRepository('BoAdminBundle:Agenda')->getSchedule($oContract,$oEmployee);
				foreach($aTSchedule as $oTSchedule){
					$hour=$hour+$oTSchedule->getHourperday();
				}
			}
			return $hour;
		}
		
	}
	public function getNumberGroup(){
		$aResult = array();
		$aEmployee = $this->getActiveEmployee();
		foreach($aEmployee as $oEmployee){
			$aGroup = $this->_em->getRepository('BoAdminBundle:Group')->getEmployeeGroup($oEmployee);
			if(isset($aGroup[0])) $aResult[$oEmployee->getId()] = count($aGroup);
		}
		return $aResult;
	}
	public function getActiveEmployee(){
		return $this->_em->getRepository('BoAdminBundle:Employee')->findBy(array('active'=>true),array('firstname' => 'asc'));
	}
	public function getEmployeeWithContract(){
		$today = date("Y-m-d");
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Employee', 'a')
			->join('a.contracts', 'b')
			->where("a.active=:active and b.status=:status and b.startdate<=:today and b.enddate >=:today" )
			->orderBy('a.firstname','ASC')
			->setParameters(array('active'=>true,'status'=>"1",'today'=>$today));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getContractsByDate($employee,$aDates){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Contracts', 'a')
			->join('a.employee', 'b')
			->where("b.id =:idemployee and a.enddate>=:startdate" )
			->setParameters(array('idemployee'=>$employee->getId(),'startdate'=>$aDates[0]));
		$query = $qb->getQuery();
		return $query->getResult();	
	}
}
