<?php

namespace Bo\AdminBundle\Repository;
/**
 * TimesheetRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TimesheetRepository extends \Doctrine\ORM\EntityRepository
{
	public function getTotal(){
		$query = $this->_em->createQuery('SELECT COUNT(a) From BoAdminBundle:Timesheet a WHERE a.status=:status');
		$query->setParameters(array(
			'status'=>1,
		));
		return (int) $query->getSingleScalarResult();
	}
	public function getPayrollTimesheet($nb_cpp,$offset){
		return $this->_em->getRepository('BoAdminBundle:Timesheet')->findBy(array('status'=>2),array('ddate' => 'desc'),$nb_cpp,$offset);
	}
	public function getTodayPayrollTs(){
		$today = new \DateTime(date("d-m-Y"));
		return $this->_em->getRepository('BoAdminBundle:Timesheet')->findBy(array('ddate'=>$today),array('ddate' => 'desc'));
	}
	public function getEmployeeTS($employee,$yearln,$imonth){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.employee', 'b')
			->join('a.tsweek', 'c')
			->join('c.tyear', 'd')
			->join('c.tmonth', 'e')
			->where("a.status != 1 and b.id=:idemployee and e.imonth=:imonth and d.yearln=:yearln" )
			->setParameters(array('idemployee'=>$employee->getId(),'imonth'=>$imonth,'yearln'=>$yearln));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getEmployeeTSByDate($employee,$start,$end,$status){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.employee', 'b')
			->where("a.status=:status and b.id=:idemployee and a.ddate>=:start and a.ddate<=:end" )
			->setParameters(array('idemployee'=>$employee->getId(),'start'=>$start,'end'=>$end,'status'=>$status));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getAllTSByDate($start,$end,$status){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->where("a.status=:status and a.ddate>=:start and a.ddate<=:end" )
			->setParameters(array('start'=>$start,'end'=>$end,'status'=>$status));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getExtractTsData($aDate,$start,$end,$status){
		$aEmployee = $this->getDistinctEmployee($start,$end,$status);
		$aResult = array();
		foreach($aEmployee as $oEmployee){
			$aData = array();
			$total = 0;
			$aData[] =  $oEmployee->getFirstname()." ".$oEmployee->getName();
			foreach($aDate as $oDate){
				$hour = $this->reckonHour($oEmployee,$oDate,$status);
				$aData[]=$hour;
				$total = $total+$hour;
			}
			$aData[]=$total;
			$aResult[] = $aData;
		}
		return $aResult;
	}
	private function getDistinctEmployee($start,$end,$status){
		$aTimesheet = $this->getAllTSByDate($start,$end,$status);
		$aEmployee = array();
		foreach($aTimesheet as $oTimesheet){
			$oEmployee = $oTimesheet->getEmployee();
			if($oEmployee and !isset($aEmployee[$oEmployee->getId()])) $aEmployee[$oEmployee->getId()] = $oEmployee;
		}
		return $aEmployee; 
	}
	public function getEmployeeDateTS($employee,$oDate,$status){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.employee', 'b')
			->where("b.id=:idemployee and a.status=:status and a.ddate=:ddate")
			->setParameters(array('idemployee'=>$employee->getId(),'ddate'=>$oDate,'status'=>$status));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	private function reckonHour($employee,$oDate,$status){
		$aTs = $this->getEmployeeDateTS($employee,$oDate,$status);
		$hour = 0;
		foreach($aTs as $oTs){
			$hour = $hour+$oTs->getHour();
		}
		return $hour;
	}
	public function getContractTSForMonth($contract,$yearln,$imonth){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.contract', 'c')
			->where("a.status > 1 and c.id=:idcontract and a.month=:imonth and a.year=:yearln" )
			->setParameters(array('idcontract'=>$contract->getId(),'imonth'=>$imonth,'yearln'=>$yearln));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getTSForMonth($contract,$yearln,$imonth){
		$aResult = $aEmployee = array();
		$aTimesheet = $this->getContractTSForMonth($contract,$yearln,$imonth);
		foreach($aTimesheet as $oTimesheet){
			if($oTimesheet->getEmployee()){
				$idemployee = $oTimesheet->getEmployee()->getId();
				if(!isset($aResult[$idemployee])) $aEmployee[]=$oTimesheet->getEmployee();
				$day = $oTimesheet->getDdate()->format("d");
				$aResult[$idemployee][$day] = $oTimesheet->getHour();
			}
		}
		return array($aResult,$aEmployee);
	}
	public function getPeriodTimesheet($employee,$oPP,$status,$idtype){
		$oStartdate = $oPP->getStartdate();
		$oEnddate = $oPP->getEnddate();
		if($employee==null) return $this->getPeriodTsBy($oStartdate,$oEnddate,$status,$idtype);
		$status = intval($status);
		$where = "b.id=:idemployee and c.id=:idtype and a.ddate>=:startdate and a.ddate<=:enddate";
		if($status<=4){
			$where = $where." and a.status =:status";
		}else{
			$status=4;
			$where = $where." and a.status >:status";
		} 
		
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.employee', 'b')
			->join('a.typets', 'c')
			->where($where)
			->setParameters(array('status'=>$status,'idemployee'=>$employee->getId(),'idtype'=>$idtype,'startdate'=>$oStartdate,'enddate'=>$oEnddate));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getPeriodTsBy($oStartdate,$oEnddate,$status,$idtype){
		$status = intval($status);
		$where = "c.id=:idtype and a.ddate>=:startdate and a.ddate<=:enddate";
		if($status<=4){
			$where = $where." and a.status =:status";
		}else{
			$status=4;
			$where = $where." and a.status >:status";
		} 
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.typets', 'c')
			->where($where)
			->setParameters(array('status'=>$status,'idtype'=>$idtype,'startdate'=>$oStartdate,'enddate'=>$oEnddate));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getPeriodPayrollTs($employee,$oCriteria,$status,$idtype){
		$where = "b.id=:idemployee and c.id=:idtype and a.ddate>=:startdate and a.ddate<=:enddate";
		if($status<=4){
			$where = $where." and a.sta
			$status=4;tus =:status";
		}else{
			$where = $where." and a.status >:status";
		} 
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.employee', 'b')
			->join('a.typets', 'c')
			->where($where)
			->setParameters(array('status'=>$status,'idemployee'=>$employee->getId(),'idtype'=>$idtype,'startdate'=>$oCriteria->getStartdate(),'enddate'=>$oCriteria->getEnddate()));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function search($aCriteria){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.employee', 'b')
			->join('a.tsweek', 'c')
			->join('c.tyear', 'd')
			->join('c.tmonth', 'e')
			->where("a.status != 1 and b.id=:idemployee and e.imonth=:imonth and d.yearln=:yearln" )
			->setParameters(array('idemployee'=>$employee->getId(),'imonth'=>$imonth,'yearln'=>$yearln));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	//Search timesheet by parameters array data
	public function searchdata($aData){
		if(count($aData)==0) return array();
		$employee = $aData[0];
		$month = $aData[1];
		$year = $aData[2];
		$status = $aData[3];
		$start = $this->formatDate($aData[4]);
		$end = $this->formatDate($aData[5]);
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.employee', 'b')
			->where("(b.firstname=:employee or b.name=:employee) and a.ddate>=:start and a.ddate<=:end" )
			->setParameters(array('employee'=>$employee,'start'=>$start,'end'=>$end));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	//Search timesheet by parameters date
	public function searchBydate($date){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->where("a.ddate=:ddate" )
			->setParameters(array('ddate'=>$date));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}	
	public function searchEmployeeTS($aData){
		$idemployee = $aData[0];
		$groupname = $aData[1];
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.employee', 'b')
			->join('a.group', 'c')
			->where("b.id=:idemployee and c.name=:groupname" )
			->setParameters(array('idemployee'=>$idemployee,'groupname'=>$groupname));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getTsStudent($student,$statut){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:TsStudent', 'a')
			->join('a.students', 'b')
			->where("a.status =:status and b.id=:idstudent" )
			->setParameters(array('idstudent'=>$student->getId(),'status'=>$statut));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getToValidateTS($employee,$first=null,$max=null){
		$qb = $this->_em->createQueryBuilder();
		if($first==null and $max==null){
			$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.employee', 'b')
			->where("a.status =:status and b.id=:idemployee" )
			->setParameters(array('idemployee'=>$employee->getId(),'status'=>2));
		}else{
			$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.employee', 'b')
			->where("a.status =:status and b.id=:idemployee" )
			->setMaxResults($max)
			->setFirstResult($first)
			->setParameters(array('idemployee'=>$employee->getId(),'status'=>2));
		}
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getListEmployee($aEmployee,$first=null,$max=null){
		$aResult=array();
		foreach($aEmployee as $oEmployee){
			$aTs = $this->getToValidateTS($oEmployee,$first,$max);
			if(isset($aTs[0])) $aResult[]=$oEmployee;
		}
		return $aResult;
	}
	public function getTsForAdvisor($advisor){
		
		$aResult=array();
		foreach($aEmployee as $oEmployee){
			$aTs = $this->getToValidateTS($oEmployee);
			if(isset($aTs[0])) $aResult[]=$oEmployee;
		}
		return $aResult;
	}	
	public function getEmployeeMonthTS($employee){
		return $this->getEmployeeTS($employee,date("Y"),date("m"));
	}
	public function getStudentTs($student,$status=null){
		if($status==null) $status=1;
		return $this->getTsByStudent($student,$status);
	}
	//Target to objet TsStudent which contents Group's timesheet
	public function getGroupTs($student,$status=null){
		$aTs = $this->getStudentTimesheet($student,$status);	
		if(isset($aTs[0])) return $aTs;
		return array();
	}
	public function getIndividualTs($student,$status=null){
		$aTs = $this->getTsByStudent($student,$status);
		if(isset($aTs[0])) return $aTs;
		$aTs = $this->getStudentTimesheet($student,$status);	
		if(isset($aTs[0])) return $aTs;
		return array();
	}
	public function getTsByStudent($student,$status=null){
		if($student==null) return $student;
		if($status!=null)
			return $this->_em->getRepository('BoAdminBundle:Timesheet')->findBy(array('students'=>$student,'status'=>$status),array('ddate' => 'desc'));
		else 
			return $this->_em->getRepository('BoAdminBundle:Timesheet')->findBy(array('students'=>$student),array('ddate' => 'desc'));
	}
	public function getTsByTeacher($teacher){
		return $this->_em->getRepository('BoAdminBundle:Timesheet')->findBy(array('employee'=>$teacher,'status'=>1),array('ddate' => 'desc'));
	}
	public function getTsByEmployee($employee,$status=null){
		if($status!=null)
			return $this->_em->getRepository('BoAdminBundle:Timesheet')->findBy(array('employee'=>$employee,'status'=>$status),array('ddate' => 'desc'));
		else
			return $this->_em->getRepository('BoAdminBundle:Timesheet')->findBy(array('employee'=>$employee),array('ddate' => 'desc'));			
	}
	public function getDayTsByEmployee($employee,$oDate,$status=null){		
		if($status!=null)
			return $this->_em->getRepository('BoAdminBundle:Timesheet')->findBy(array('employee'=>$employee,'status'=>$status,'ddate'=>$oDate),array('ddate' => 'desc'));
		else
			return $this->_em->getRepository('BoAdminBundle:Timesheet')->findBy(array('employee'=>$employee,'ddate'=>$oDate),array('ddate' => 'desc'));			
	}
	public function getStudentTimesheet($student,$status=null){
		if($status!=null)
			return $this->_em->getRepository('BoAdminBundle:TsStudent')->findBy(array('students'=>$student,'status'=>$status),array('creationdate' => 'desc'));
		else
			return $this->_em->getRepository('BoAdminBundle:TsStudent')->findBy(array('students'=>$student),array('creationdate' => 'desc'));
	}
	public function getTsByGroup($group,$status=null){
		if($group==null) return $group;
		if($status!=null)
			return $this->_em->getRepository('BoAdminBundle:Timesheet')->findBy(array('group'=>$group,'status'=>$status),array('ddate' => 'desc'));
		else
			return $this->_em->getRepository('BoAdminBundle:Timesheet')->findBy(array('group'=>$group),array('ddate' => 'desc'));
	}
	private function getContracts($idcontract){
		return $this->_em->getRepository('BoAdminBundle:Contracts')->find($idcontract);
	}
	private function getGroupStudent($student){
		if(!$student) return null;
		$oContract = $this->getContracts($student->getIdcontracts());
		if(!$oContract) return null;
		return $oContract->getGroup();
	}
	public function existEmployeeTS($oTs,$employee,$oDate=null){
		if($oTs->getContract() and $this->existContractTS($oTs,$employee,$oDate)==1) return 1;
		elseif($oTs->getGroup() and $this->existGroupTS($oTs,$employee,$oDate)==1) return 1;
		elseif($oTs->getTypets()!="Teaching" and $this->existOthersTS($oTs,$employee,$oDate)==1) return 1;
		else return 0;		
	}
	private function existContractTS($oTs,$employee,$oDate=null){
		if($oDate==null) $oDate=$oTs->getDdate();
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.employee', 'b')
			->join('a.contract', 'c')
			->where("b.id=:idemployee and a.ddate=:ddate and c.id=:idcontract and a.typets=:typets" )
			->setParameters(array('idemployee'=>$employee->getId(),'ddate'=>$oDate,'idcontract'=>$oTs->getContract()->getId(),'typets'=>$oTs->getTypets()));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		if(isset($aResult[0])) return 1;
		return 0;
	}
	private function existGroupTS($oTs,$employee,$oDate=null){
		if($oDate==null) $oDate=$oTs->getDdate();
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.employee', 'b')
			->join('a.group', 'c')
			->where("b.id=:idemployee and a.ddate=:ddate and c.id=:idgroup and a.typets=:typets" )
			->setParameters(array('idemployee'=>$employee->getId(),'ddate'=>$oDate,'idgroup'=>$oTs->getGroup()->getId(),'typets'=>$oTs->getTypets()));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		if(isset($aResult[0])) return 1;
		return 0;
	}
	public function getExistTsGroup($aGroup,$oEmployee,$oDate){
		$aResult=array();
		foreach($aGroup as $oGroup){
			$aTS = $this->getExistTsForGroup($oGroup,$oEmployee,$oDate);
			if(isset($aTS[0])) $aResult[$oGroup->getId()] = 1;
		}
		return $aResult;
	}
	public function existTsGroup($oGroup,$oEmployee,$oDate){
		$aTS = $this->getExistTsForGroup($oGroup,$oEmployee,$oDate);
		if(isset($aTS[0])) return 1;
		return 0;
	}
	public function getExistTsForGroup($oGroup,$oEmployee,$oDate){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.employee', 'b')
			->join('a.group', 'c')
			->join('a.typets', 'd')			
			->where("c.id=:idgroup and b.id=:idemployee and a.ddate=:ddate and d.id=:idtypets" )
			->setParameters(array('idgroup'=>$oGroup->getId(),'idemployee'=>$oEmployee->getId(),'ddate'=>$oDate->format("Y-m-d"),'idtypets'=>1));
		$query = $qb->getQuery();
		return $query->getResult();	
	}
	public function getExistTsContract($aContract,$oEmployee,$oDate){
		$aResult=array();
		foreach($aContract as $oContract){
			$aTS = $this->getExistTsForContract($oContract,$oEmployee,$oDate);
			if(isset($aTS[0])) $aResult[$oContract->getId()] = 1;
		}
		return $aResult;
	}
	//Check if it exist a timesheet for the date and contracts and the employee given as parameters
	//Return 1 if it exist, 0 else
	public function existTsContract($oContract,$oEmployee,$oDate){
		$aTS = $this->getExistTsForContract($oContract,$oEmployee,$oDate);
		if(isset($aTS[0])) return 1;
		return 0;
	}
	public function getExistTsForContract($oContract,$oEmployee,$oDate){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.employee', 'b')
			->join('a.contract', 'c')
			->join('a.typets', 'd')			
			->where("c.id=:idcontract and b.id=:idemployee and a.ddate=:ddate and d.id=:idtypets" )
			->setParameters(array('idcontract'=>$oContract->getId(),'idemployee'=>$oEmployee->getId(),'ddate'=>$oDate->format("Y-m-d"),'idtypets'=>1));
		$query = $qb->getQuery();
		return $query->getResult();	
	}
	public function getTsForContractEmployee($oContract,$oEmployee){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.employee', 'b')
			->join('a.contract', 'c')
			->join('a.typets', 'd')			
			->where("c.id=:idcontract and b.id=:idemployee and a.status=:status and d.id=:idtypets" )
			->setParameters(array('idcontract'=>$oContract->getId(),'idemployee'=>$oEmployee->getId(),'status'=>2,'idtypets'=>1));
		$query = $qb->getQuery();
		return $query->getResult();	
	}
	public function getTsForGroupEmployee($oGroup,$oEmployee){
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.employee', 'b')
			->join('a.group', 'c')
			->join('a.typets', 'd')			
			->where("c.id=:idgroup and b.id=:idemployee and a.status=:status and d.id=:idtypets" )
			->setParameters(array('idgroup'=>$oGroup->getId(),'idemployee'=>$oEmployee->getId(),'status'=>2,'idtypets'=>1));
		$query = $qb->getQuery();
		return $query->getResult();	
	}
	private function existOthersTS($oTs,$employee,$oDate=null){
		if($oDate==null) $oDate=$oTs->getDdate();
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.employee', 'b')
			->where("b.id=:idemployee and a.ddate=:ddate and a.typets=:typets" )
			->setParameters(array('idemployee'=>$employee->getId(),'ddate'=>$oDate,'typets'=>$oTs->getTypets()));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		if(isset($aResult[0])) return 1;
		return 0;
	}
	public function existTsForEmployee($oContract,$oEmployee,$oDate){
		$aTS = $this->_em->getRepository('BoAdminBundle:Timesheet')->findBy(array('contract'=>$oContract,'employee'=>$oEmployee,'ddate'=>$oDate));
		if(isset($aTS[0])) return true;
		return false;
	}
	public function existTsGroupForEmployee($oGroup,$oEmployee,$oDate){
		$aTS = $this->_em->getRepository('BoAdminBundle:Timesheet')->findBy(array('group'=>$oGroup,'employee'=>$oEmployee,'ddate'=>$oDate));
		if(isset($aTS[0])) return true;
		return false;
	}
	public function existTsForContracts($oContract,$oDate){
		$aTS = $this->_em->getRepository('BoAdminBundle:Timesheet')->findBy(array('contract'=>$oContract,'ddate'=>$oDate));
		if(count($aTS)==count($oContract->getEmployee())) return true;
		return false;	
	}
	public function existTsForGroup2($oGroup,$oDate){
		$aTS = $this->_em->getRepository('BoAdminBundle:Timesheet')->findBy(array('group'=>$oGroup,'ddate'=>$oDate));
		if(count($aTS)==count($oGroup->getEmployee())) return true;
		return false;	
	}
	public function getBitExistTs($oContract,$oDate){
		$aResult = array();
		$aTeacher = $oContract->getEmployee();
		foreach($aTeacher as $oTeacher){
			if($this->existTsForEmployee($oContract,$oTeacher,$oDate)) $aResult[$oTeacher->getId()]=1;
			else $aResult[$oTeacher->getId()]=0;
		}
		return $aResult;
	}
	public function getBitExistTsGroup($oGroup,$oDate){
		$aResult = array();
		$aTeacher = $oGroup->getEmployee();
		foreach($aTeacher as $oTeacher){
			if($this->existTsGroupForEmployee($oGroup,$oTeacher,$oDate)) $aResult[$oTeacher->getId()]=1;
			else $aResult[$oTeacher->getId()]=0;
		}
		return $aResult;
	}
	public function getContractsWithoutTs($aContract,$oDate){
		$aResult = array();
		foreach($aContract as $oContract){			
			if(!$this->existTsForContracts($oContract,$oDate)) $aResult[]=$oContract;
		}
		return $aResult;
	}
	public function getDayTimesheet($oDate=null){
		if($oDate==null) $oDate=new \DateTime(date("Y-m-d"));
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a.id')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.typets', 'b')
			->where("a.ddate=:ddate and b.id=:typets" )
			->setParameters(array('ddate'=>$oDate,'typets'=>1));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	public function getTsByDayAndStatus($oDate,$status){
		if($oDate==null) $oDate=new \DateTime(date("Y-m-d"));
		$qb = $this->_em->createQueryBuilder();
		$qb->select('a')
			->from('BoAdminBundle:Timesheet', 'a')
			->join('a.typets', 'b')
			->where("a.ddate=:ddate and b.id=:typets and a.status=:status" )
			->setParameters(array('ddate'=>$oDate,'typets'=>1,'status'=>$status));
		$query = $qb->getQuery();
		$aResult = $query->getResult();	
		return $aResult;
	}
	//return object date after formating from Y-m-d to d-m-Y
	public function formatDate($date){
		$aDate = explode("-",$date);
		return new \DateTime($aDate[2]."-".$aDate[1]."-".$aDate[0]);		
	}
}
