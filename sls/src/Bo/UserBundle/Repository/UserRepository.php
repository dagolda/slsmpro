<?php

namespace Bo\UserBundle\Repository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
	public function getTotal(){
		$query = $this->_em->createQuery('SELECT COUNT(a) From BoUserBundle:User a');
		return (int) $query->getSingleScalarResult();
	}
	public function getAllusers(){
		$entityManager = $this->_em->getRepository('BoUserBundle:User');
		$aUsers = $entityManager->findAll();
		$aAllUsers = array();
		foreach($aUsers as $oUsers){
			if($oUsers->getEmployee()){
				$aAllUsers[$oUsers->getId()]= $oUsers->getEmployee()->getFirstname()." ".$oUsers->getEmployee()->getName();
			}elseif($oUsers->getStudents()){
				$aAllUsers[$oUsers->getId()]= $oUsers->getStudents()->getFirstname()." ".$oUsers->getStudents()->getName();
			}else{
				$oCoordinator = $this->_em->getRepository('BoAdminBundle:Coordinator')->find($oUsers->getIdcoordinator());
				if($oCoordinator) $aAllUsers[$oUsers->getId()]= $oCoordinator->getName();
			} 			
		}
		return $aAllUsers;
	}
	public function getUserById($id){
		$entityManager = $this->_em->getRepository('BoUserBundle:User');
		$oUser = $entityManager->find($id);	
		if($oUser) return $oUser->getEmployee()->getName()." ".$oUser->getEmployee()->getFirstname();
		return null;
	}
	public function search($sTexte){
		$aTexte = explode(" ",$sTexte);
		$oEmExp = $this->_em->getRepository('BoUserBundle:User');
		$aResult = $oEmExp->findBy(array('email'=>$sTexte),array('id' => 'desc'));
		if(isset($aResult[0])) return $aResult;
		$sSelect = "SELECT v FROM Bo\UserBundle\Entity\User v WHERE v.username like :motcle";
		$oQuery =  $this->_em->createQuery($sSelect);	
		$oQuery->setParameters(array(
			'motcle' => "%".$sTexte."%",
		));	
		$aResult = $oQuery->getResult();
		if(isset($aResult[0])) return $aResult;
		$aResult =$this->findByEmployee($sTexte);
		if(isset($aResult[0])) return $aResult;
		$aResult =$this->findByStudents($sTexte);
		if(isset($aResult[0])) return $aResult;
		return null;		
	}
	private function findByEmployee($sTexte){
		$aResult=array();	
		$qb = $this->_em->createQueryBuilder();
		$qb->select('v')
			->from('BoUserBundle:User', 'v')
			->join('v.employee', 'u')
			->where("u.name like :motcle or u.email like :motcle or u.firstname like :motcle " )
			->setParameter('motcle', "%".$sTexte."%");
		$query = $qb->getQuery();
		return $query->getResult();			
	}
	private function findByStudents($sTexte){
		$aResult=array();	
		$qb = $this->_em->createQueryBuilder();
		$qb->select('v')
			->from('BoUserBundle:User', 'v')
			->join('v.students', 'u')
			->where("u.name like :motcle or u.email like :motcle or u.firstname like :motcle " )
			->setParameter('motcle', "%".$sTexte."%");
		$query = $qb->getQuery();
		return $query->getResult();			
	}
	public function getAllTeacherConnected(){
		$date = new \DateTime('07-11-2017');
		$aResult=array();	
		$qb = $this->_em->createQueryBuilder();
		$qb->select('v')
			->from('BoUserBundle:User', 'v')
			->join('v.employee', 'u')
			->join('u.profil', 'w')
			->where("v.lastLogin>:date and v.enabled=:true and w.name=:teacher " )
			->setParameters(array('teacher'=>"Teacher",'true'=>true,'date'=>$date ));
		$query = $qb->getQuery();
		return $query->getResult();			
	}
}
